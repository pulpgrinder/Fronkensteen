(load-doc-strings  <%
  (define (% args) ; (% selector arg [arg arg...]) jQuery.

  (define (* args) ; Evaluates the product of all args. All args must be numbers.

  (define (+ args) ; Evaluates to the sum of all args. All args must be numbers.

  (define (- args) ; If one arg, evaluates to its negation. If more than one arg, returns the first arg minus the sum of the remaining args.  All args must be numbers.

  (define (/ args) ; If one arg, evaluates to the reciprocal of arg (1/arg). If more than one arg, evaluates the first arg divided by the product of the remaining args.  All args must be numbers.

  (define (< arg1 arg2) ; Evaluates to #t if arg1 is less than arg2, otherwise evaluates to #f.  All args must be numbers.

  (define (<<  args) ; Convenience synonym for string-append. All args must be strings. Evaluates to the concatenation of all the strings, in the order provided.

  (define (<= arg1 arg2) ; Evaluates to #t if arg1 is less than or equal to arg2, otherwise evaluates to #f.  All args must be numbers.

  (define (= arg1 arg2) ; Evaluates to #t if arg1 equals arg2, otherwise evaluates to #f.  All args must be numbers.

  (define (> arg1 arg2) ; Evaluates to #t if arg1 is greater than arg2, otherwise Evaluates to #f.  All args must be numbers.

  (define (>= arg1 arg2) ; Evaluates to #t if arg1 is greater than or equal to arg2, otherwise Evaluates to #f.  All args must be numbers.

  (define (abs arg) ; Evaluates to the absolute value of arg. Arg must be a number.

  (define (acos arg) ; Evaluates to the arccosine of arg. Arg must be a number. Radian measure is used.

  (define (zero? number) ; Evaluates to #t if number is zero, #f otherwise.

  (define (alert arg) ; Displays a JavaScript alert with arg as the content.
  (define (and args) ; Evaluates to #t if all the arguments are true. Note that evaluation ceases when the first non-true argument is reached (i.e., not all of the arguments will necessarily be evaluated).
  (define (or args) ; Evaluates to # if any of the args evaluate to true. Note that evaluation ceases when the first true argument is reached (i.e., not all of the arguments will necessarily be evaluated).
  (define (acos arg) ; Evaluates to arccosine of arg. Arg must be a number. Radian measure is used.
  (define (asin arg) ; Evaluates to the arcsine of arg. Arg must be a number. Radian measure is used.
  (define (atan arg) ; Evaluates to the arctangent of arg. Arg must be a number. Radian measure is used.
  (define (cos arg) ; Evaluates to the cosine of arg. Arg must be a number. Radian measure is used.
  (define (sin arg) ; Evaluates to the sin of arg. Arg must be a number. Radian measure is used.
  (define (tan arg) ; Evaluates to the tangent of arg. Arg must be a number. Radian measure is used.

  (define (caaaar pair) ; Evaluates to (car (car (car (car pair))))
  (define (caaadr pair)  ; Evaluates to (car (car (car (cdr pair))))
  (define (caaar pair)  ; Evaluates to (car (car (car pair)))
  (define (caadar pair)  ; Evaluates to (car (car (cdr (car pair))))
  (define (caaddr pair)  ; Evaluates to (car (car (cdr (cdr pair))))
  (define (caadr pair)  ; Evaluates to (car (car (cdr pair)))
  (define (caar pair)  ; Evaluates to (car (car pair))
  (define (cadaar pair)  ; Evaluates to (car (cdr (car (car pair))))
  (define (cadadr pair)  ; Evaluates to (car (cdr (car (cdr pair))))
  (define (cadar pair)  ; Evaluates to (car (cdr (car pair)))
  (define (caddar pair)  ; Evaluates to (car (cdr (cdr (car pair))))
  (define (cadddr pair)  ; Evaluates to (car (cdr (cdr (cdr pair))))
  (define (caddr pair)  ; Evaluates to (car (cdr (cdr pair)))
  (define (cadr pair)  ; Evaluates to (car (cdr pair))
  (define (car pair) ; Evaluates to the first item in the pair (the first item on the list, if pair is a list)
  (define (cdaaar pair) ; Evaluates to (cdr (car (car (car pair))))
  (define (cdaadr pair) ; Evaluates to (cdr (car (car (cdr pair))))
  (define (cdaar pair) ; Evaluates to (cdr (car (car pair)))
  (define (cdadar pair) ; Evaluates to (cdr (car (cdr (car pair))))
  (define (cdaddr pair) ; Evaluates to (cdr (car (cdr (cdr pair))))
  (define (cdadr pair) ; Evaluates to (cdr (car (cdr pair)))
  (define (cdar pair) ; Evaluates to (cdr (car pair))
  (define (cddaar pair) ; Evaluates to (cdr (cdr (car (car pair))))
  (define (cddadr pair) ; Evaluates to (cdr (cdr (car (cdr pair))))
  (define (cddar pair) ; Evaluates to (cdr (cdr (car pair)))
  (define (cdddar pair) ; Evaluates to (cdr (cdr (cdr (car pair))))
  (define (cddddr pair) ; Evaluates to (cdr (cdr (cdr (cdr pair))))
  (define (cdddr pair) ; Evaluates to (cdr (cdr (cdr pair)))
  (define (cddr pair) ; Evaluates to (cdr (cdr pair))
  (define (cdr pair) ; Evaluates to the second item in pair (the "rest of the list", if pair is a list).
  (define (= item1 item2) ; Evaluates to true if item1 and item2 are numerically equal. Only valid for numeric types.
  (define (eq? item1 item2) ; Evaluates to true if item1 and item2 are the exact same object in memory. eq? applied to primitive types may or may not yield true, depending on implementation (use eqv? if this matters) (eq? 1 1) => true  (eq? "foo" "foo") => ? (eq? 'a 'a) => ? (eq? '(a b) '(a b)) => false
  (define (equal? item1 item2) ; works like eqv?, but generalizes to lists of identical structure.  (equal? 1 1) => true  (equal? "foo" "foo") => true (equal? 'a 'a) => true (equal? '(a b) '(a b)) => true
  (define (eqv? item1 item2) ; Evaluates to true if item1 and item2 have the same value (for basic types) or are the exact same object in memory for lists. (eqv? 1 1) => true  (eqv? "foo" "foo") => true (eqv? 'a 'a) => true (eqv? '(a b) '(a b)) => false
  (define (assoc key alist) ; Looks for a pair in association list alist whose car is key. Evaluates to the pair or #f if not found. Uses equal? to compare.
  (define (assp proc alist) ; Looks for a pair in association list alist whose car evaluates to true when proc is applied to it.  Evaluates to the pair or #f if not found.
  (define (assq key alist) ; Looks for a pair in association list alist whose car is key. Evaluates to the pair or #f if not found. Uses eq? to compare.
  (define (assv key alist) ; Looks for a pair in association list alist whose car is key. Evaluates to the pair or #f if not found. Uses eqv? to compare.
  (define (beautify-html html-string) ; Takes the text in html-string and attempts to reformat it as well-formed and well-formatted html
  (define (launch-remote-repl-server) ; Starts an incoming REPL server that evaluates Scheme code transmitted from a remote client by way of an intermediate server (e.g., chrysotile).
  (define (launch-remote-repl-client) ; Attempts to connect to a server (e.g., chrysotile) to transmit Scheme code to a remote server for evaluation.
  (define (remote-evaluate expression-string)) ; Sends the given expression (in string form) to the remote server for evaluation. Note that you must also define a (display-repl-result result-string) procedure in your code if you want to display the result of the evaluation.
%>)
