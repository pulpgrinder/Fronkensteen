(define active-wiki-page #f)
(define active-menu-page #f)
(define active-doc-page #f)
(define active-editor #f)
(define active-editor-page #f)
(define display-mode "wiki")
(define full-history-list '())
(define menu-back-list '())
(define doc-back-list '())
(define page-back-list '())
(define page-forward-list '())
; if on-page-display is set to a procedure (rather than #f)
; that procedure will be invoked after a page transition has finished.
(define on-page-display #f)
(define post-display
  (lambda ()
    (if (eqv? on-page-display #f)
      #t
      (begin
        (on-page-display)
        (set! on-page-display #f)))))

(define (display-wiki-doc-page title)
    (let ((id (wiki-page-id title)))
      (create-wiki-doc-page title)
      (show-page id #f "cover")
      (set! active-doc-page id)
      (if (not (eqv? doc-back-list '()))
        (set! doc-back-list (cons title doc-back-list)))
      (process-wiki-links id)
      (% (<< id " .pure-text") "focus")
      (wire-ui)))

(define (display-wiki-menu-page title)
    (let ((id (wiki-page-id title)))
      (create-wiki-menu-page title)
      (show-page id #f "cover")
      (set! active-menu-page id)
      (if (not (eqv? menu-back-list '()))
        (set! menu-back-list (cons title menu-back-list)))
      (process-wiki-links id)
      (% (<< id " .pure-text") "focus")
      (wire-ui)))

(define (clear-history)
    (set! full-history-list '()))

(define (exec-wiki-page title)
  (let ((wikidata (retrieve-wiki-data title)))
    (if (eq? wikidata #f)
        (console-error (<< "Error retrieving wiki page: " title))
        (render-wiki-content wikidata)
        )))

(define (render-wiki-content wikidata)
  (fronkenmark wikidata #t #t))

(define (display-wiki-editor-page title . args)
    (let ((id (create-wiki-editor-page title)))
      (if (> (length args) 0)
          (show-page id (car args) "revolution")
          (show-page id #f "revolution"))
        (set! active-editor (<< id "-textarea"))
        (init-cm-editor! active-editor)
        (set! display-mode "text-editor")
        (set! active-editor-page id)
        (wire-ui)))

(define (display-code-editor-page filename . args)
    (let ((id (create-code-editor-page filename)))
      (if (> (length args) 0)
          (show-page id (car args) "revolution")
          (show-page id #f "revolution"))
        (set! active-editor (<< id "-textarea"))
        (init-cm-editor! active-editor)
        (set! display-mode "text-editor")
        (set! active-editor-page id)
        (wire-ui)))

(define (add-to-history title)
  (set! full-history-list (cons title (clean-history-list full-history-list title))))

(define (clean-history-list history-list entry)
  (if (eqv? history-list '())
      '()
    (if (eqv? (car history-list) entry)
        (clean-history-list (cdr history-list) entry)
        (cons (car history-list) (clean-history-list (cdr history-list) entry)))))

(define (display-wiki-page title . args)
    (let ((id (create-wiki-page title)))
      (apply show-page (cons id args))
      (if (or (= (length page-back-list) 0) (not (eqv? (car page-back-list) title)))
          (set! page-back-list (cons title page-back-list)))
      (set! menu-back-list '())
      (add-to-history title)
      (set! active-wiki-page id)
      (show-nav-buttons)
      (process-wiki-links id)
      (% (<< id " .pure-text") "focus")
      (wire-ui)
      ))

(define (trash-current-wiki-page)
  (console-log "Trashing")
  (let ((title (active-page-title)))
    (if (eqv? title "system/Launch System")
        (alert "Can't trash system launch page (but you can edit it)")
        (begin
          (let ((delete-page active-wiki-page))
            (trash-internal-file (wiki-data-path title)))
            (alert (<< title " moved to trash."))
            (nav-back)))))
