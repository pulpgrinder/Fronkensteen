[h1 Package Manager h1]

This page lets you export, import, and remove packages. Use caution when removing packages, as removing some packages may produce a system that is unable to start after being saved. It is strongly recommended that you save a copy of your system before experimenting with anything on this page. [smile]

The following packages can safely be removed to reduce system size, at the cost of losing the associated functionality:

[ul
9-mathjax-latex (saves 3.7 MB, but LaTeX will no longer work)
11-prismjs (saves 635 KB, but syntax highlighting will no longer work)
Kitchen-Sink-Font (saves 1.8 MB, but characters from many ancient and modern languages will no longer display properly, unless your browser's default font supports them)
quiz (saves 10 KB, but you will not be able to use quizzes)
ul]

In general, changes from adding or removing a package will not take effect until the system has been saved and reloaded.

[!scheme

(define (generate-package-list)
		(<<
			(generate-package-list-items (vector->list (get-package-vector)))))



(define (generate-package-list-items package-list)
	(if (eqv? package-list '())
    	""
		(let ((package-name (car package-list)))
      (<<
     	 (round-list-item (<<
          (span package-name) "&nbsp;&nbsp;"(button (<< ".package-export-button!package-name='" package-name "'!title='Export package'") (fa-icon "" "download" "")) "&nbsp;&nbsp;" (button (<< ".package-delete-button!package-name='" package-name "'!title='Delete package'") (fa-icon "" "trash" "")) ))
          (generate-package-list-items (cdr package-list))))))

(define (.package-delete-button_touch_click ev)
  (if (confirm "Removing packages may make the system unable to function. Making a backup before doing this is highly recommended. Continue with deletion?")
		(let ((target (js-ref ev "currentTarget")))
			(let ((package-name  (element-read-attribute target "package-name")))
      (delete-package package-name)
      (alert "Package deleted.")
      (% "#package-list" "html" (generate-package-list))
			(wire-ui)
      ))))

(define (.package-export-button_touch_click ev)
	(let ((target (js-ref ev "currentTarget")))
		(let ((package-name  (element-read-attribute target "package-name")))
        (save-package-files package-name (<< package-name "-" (file-version-time-stamp) ".json") "application/json" ))))

(define (#package-import-button_touch_click)
    (upload-file ".json" #f package-file-uploaded "data"))

(define (package-file-uploaded filename data)
  (install-package data)
  (% "#package-list" "html" (generate-package-list))
	(wire-ui)
  (alert "Package installed. You should save the system and reload it to ensure that all changes take effect.")
  )



(define (#fronkensteen-page-save-wiki-files-button_touch_click)
    (timer (lambda ()
      (save-package-files "user-files/wiki" (<< app-name "-wiki-" (file-version-time-stamp) ".json") "application/json" )
    ) 0.1))

(define (#fronkensteen-page-save-filesystem-button_touch_click)
    (timer (lambda ()
      (save-the-file-system)
    ) 0.1))

(dv
  (<<
    (button "#package-import-button" "Import package")
		(button "#fronkensteen-page-save-filesystem-button" "Export entire Fronkensteen filesystem as package")
		(button "#fronkensteen-page-save-wiki-files-button" "Export all wiki pages as package")
    (round-list "#package-list" (generate-package-list))))

scheme!]
