[h2 This page manages the installed packages. h2]

It is written in Scheme. Edit the page to see the source code.

[!scheme

(define (generate-package-list)
		(<<
			(generate-package-list-items (vector->list (get-package-vector)))))



(define (generate-package-list-items package-list)
	(if (eqv? package-list '())
    	""
        (<<
       	 (round-list-item (<<
        	(input (<< "#" (car package-list) "-package-select.package-checkbox!type='checkbox'"))
            "&nbsp;" (span (car package-list))))
            (generate-package-list-items (cdr package-list)))))

(define (#package-delete-button_click ev)
  (if (confirm "Removing packages may make the system unable to function. Making a backup before doing this is highly recommended. Continue with deletion?")
    (let ((package-names (vector->list (get-package-vector))))
      (delete-packages package-names)
      (alert "Packages deleted.")
      (% "#package-list" "html" (generate-package-list))
      )))

(define (#package-import-button_click)
    (upload-file ".json" #f package-file-uploaded))

(define (package-file-uploaded filename data)
  (install-package data)
  (% "#package-list" "html" (generate-package-list))
  (alert "Package installed. You should export the workspace and reload it to ensure that all changes take effect.")
  )


(define (delete-packages package-list)
  (if (eqv? package-list '())
    #t
    (begin
      (console-log (<< "checking: " (car package-list)))
      (if (checkbox-checked? (<< "#" (car package-list) "-package-select"))
          (delete-package (car package-list)))
      (delete-packages (cdr package-list)))))


(dv
  (<<
    (button "#package-import-button" "Import Package")
    (button "#package-delete-button" "Delete Selected Packages")
    (round-list "#package-list" (generate-package-list))))

scheme!]
