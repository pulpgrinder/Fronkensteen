; Documentation for Scheme procedures.
; Normally accessed through the programming tools.
; You probably shouldn't edit this by hand, though you
; can if you're brave. The format is:
;procedure name
;procedure signature
;description (can be multiple lines)
;§
;(blank line)
;
procedure->promise
(procedure->promise args)

§

!DOCTYPE
(!DOCTYPE args)
Used to generate an HTML DOCTYPE.

Examples:

You may use one of the predefined symbolic DOCTYPEs, or supply a string with a custom type:

(!DOCTYPE html5) => <!DOCTYPE HTML>

(!DOCTYPE xhtml-basic-1.0) => <!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN"
"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">

(!DOCTYPE "My Whackadoodle Type") => <!DOCTYPE My Whackadoodle Type>

Available symbolic DOCTYPEs:

html5
html-4.01-strict
html-4.01-transitional
html-4.01-frameset
xhtml-1.0-strict
xhtml-1.0-transitional
xhtml-1.0-frameset
xhtml-1.1-dtd
xhtml-basic-1.0
§

$
($ args)
BiwaScheme's default interface to jQuery. We recommend using % instead.
§

%
(% args)

The Fronkensteen jQuery interface. BiwaScheme has a nice, Scheme-like interface to jQuery. However, Fronkensteen opts for a more jQuery-like procedure syntax. Why jQuery? Because jQuery has been around for a long time, it works, and it's not going anywhere. Other frameworks seem to come and go with depressing regularity. Also, there's a vast amount of jQuery example code on the net. Translating this code to work with Fronkensteen is pretty straightforward.

A jQuery call like:

$("#test-div").html("New text")

maps in a direct fashion to:

(% "#test-div" "html" "New Text")

Note that this actually has *fewer* parentheses than the jQuery. :-)
§

*
(* arg-list)
Returns the product of all its arguments.

Example:

(* 2 3 4) => 24
§

+
(+ arg-list)
Returns the sum of all its arguments.
Examples:
(+ 1 2) => 3
(+ 1 2 3)  => 5
§

-
(- a b)
Returns the difference of its two arguments.
Examples:
(- 2 1) => 1
(- 1 2)  => -1

/
(/ a b)

Returns a / b.

Example:

(/ 6 2) => 3

Note that BiwaScheme does not support the standard Scheme numeric tower. All numbers are JavaScript (floating point) numbers.
§

<
(< a b)

Returns true if a < b, false otherwise.

Examples:

(< 1 2) => true

(< 10 5) => false
§

<<
(<< string1 string2 string3...)

Shorthand for string-append. Returns the concatenation of all its string arguments.

Example:

(<< "Hello" "," "world") => Hello,world

Fronkensteen uses string concatenation a LOT, so it's convenient to have a form that requires less typing and less screen real estate.
§

<=
(<= a b)

Returns true if a <= b, false otherwise.

Examples:

(<= 1 2) => true

(<= 10 5) => false

(<= 5 5) => true
§

=
(= a b c...)

Returns true if all its (numeric) arguments are equal, false otherwise. See the other predicates, such as eq? eqv? and equal? if you need to compare non-numeric values.

Examples:

(= 1 1) => true
(= 1 2) => false
(= 2 2 2) => true
(= 2 1 2) => false
§

>
(> a b)

Returns true if a > b, false otherwise.

Examples:

(> 1 2) => false

(> 10 5) => true
§

>=
(>= a b)

Returns true if a >= b, false otherwise.

Examples:

(>= 1 2) => false

(>= 10 5) => true

(>= 5 5) => true
§

DOCTYPE
(DOCTYPE args)
Same as !DOCTYPE
§

a
(a value)
(a seml-spec value)

Returns an HTML a tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(a "This is an anchor") => <a>This is an anchor.</a>
(a "#myanchor.myclass" "This is an anchor.") => <a id="myanchor" class="myclass">This is an anchor.</a>
§

abbr
(abbr value)
(abbr seml-spec value)

Returns an HTML abbr tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(abbr "This is the text") => <abbr>This is the text</abbr>
(abbr "#myabbr.myclass" "This is the text.") => <abbr id="myabbr" class="myclass">This is the text.</abbr>
§

abs
(abs arg)

Returns the absolute value of its arg.

Examples:

(abs 1) => 1
(abs -5) => 5
§

acos
(acos arg)

Returns the arccosine of the arg, in radians.

Examples:

(acos 1) => 0
(acos 0) => 1.5707963267948966
§

acronym
(acronym value)
(acronym seml-spec value)

Returns an HTML acronym tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(acronym "This is the text") => <acronym>This is the text</acronym>
(acronym"#myacronym.myclass" "This is the text.") => <acronym id="myacronym class="myclass">This is the text.</acronym>

add-handler!
(add-handler! args)

§

add-ui-panel
(add-ui-panel args)

§

address
(address value)
(address seml-spec value)

Returns an HTML address tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(address "This is the text") => <address>This is the text</address>
(address"#myaddress.myclass" "This is the text.") => <address id="myaddress class="myclass">This is the text.</address>
§

alert
(alert text)

Generates a browser alert box containing the specified text.
§

alist->js-obj
(alist->js-obj args)

§

alist-to-js-obj
(alist-to-js-obj args)

§

angle
(angle args)

§

append
(append args)

§

append-main-content
(append-main-content args)

§

applet
(applet args)

§

apply
(apply args)

§

area
(area args)

§

article
(article value)
(article seml-spec value)

Returns an HTML article tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(article "This is the text") => <article>This is the text</article>
(article"#myarticle.myclass" "This is the text.") => <article id="myarticle class="myclass">This is the text.</article>
§

aside
(aside value)
(aside seml-spec value)

Returns an HTML aside tag containing the specified value. Uses the given SEML spec if provided.

Examples:
(aside "This is the text") => <aside>This is the text</aside>
(aside"#myaside.myclass" "This is the text.") => <aside id="myaside class="myclass">This is the text.</aside>
§

asin
(asin args)

§

assoc
(assoc args)

§

assp
(assp args)

§

assq
(assq args)

§

assv
(assv args)

§

atan
(atan args)

§

attr
(attr args)

§

attr!
(attr! args)

§

audio
(audio args)

§

b
(b args)

§

base
(base args)

§

base-64-image-to-bytes
(base-64-image-to-bytes args)

§

bdi
(bdi args)

§

bdo
(bdo args)

§

beautify-html
(beautify-html  args)

§

binary-port?
(binary-port? args)

§

bitwise-and
(bitwise-and args)

§

bitwise-arithmetic-shift
(bitwise-arithmetic-shift args)

§

bitwise-arithmetic-shift-left
(bitwise-arithmetic-shift-left args)

§

bitwise-arithmetic-shift-right
(bitwise-arithmetic-shift-right args)

§

bitwise-bit-count
(bitwise-bit-count args)

§

bitwise-bit-field
(bitwise-bit-field args)

§

bitwise-bit-set?
(bitwise-bit-set? args)

§

bitwise-copy-bit
(bitwise-copy-bit args)

§

bitwise-copy-bit-field
(bitwise-copy-bit-field args)

§

bitwise-first-bit-set
(bitwise-first-bit-set args)

§

bitwise-if
(bitwise-if args)

§

bitwise-ior
(bitwise-ior args)

§

bitwise-length
(bitwise-length args)

§

bitwise-not
(bitwise-not args)

§

bitwise-reverse-bit-field
(bitwise-reverse-bit-field args)

§

bitwise-rotate-bit-field
(bitwise-rotate-bit-field args)

§

bitwise-xor
(bitwise-xor args)

§

blockquote
(blockquote args)

§

body
(body args)

§

boolean=?
(boolean=? args)

§

boolean?
(boolean? args)

§

bootstrap-documentation
(bootstrap-documentation args)

§

box
(box args)

§

box-top
(box-top args)

§

br
(br args)

§

build-downloader
(build-downloader args)

§

build-fronkensteen-dialog
(build-fronkensteen-dialog args)

§

build-uploader
(build-uploader args)

§

build-wiki-history-display
(build-wiki-history-display args)

§

button
(button args)

§

bytes-to-base-64-image
(bytes-to-base-64-image args)

§

caaaar
(caaaar args)

§

caaadr
(caaadr args)

§

caaar
(caaar args)

§

caadar
(caadar args)

§

caaddr
(caaddr args)

§

caadr
(caadr args)

§

caar
(caar args)

§

cadaar
(cadaar args)

§

cadadr
(cadadr args)

§

cadar
(cadar args)

§

caddar
(caddar args)

§

cadddr
(cadddr args)

§

caddr
(caddr args)

§

cadr
(cadr args)

§

call-with-port
(call-with-port args)

§

call-with-string-output-port
(call-with-string-output-port args)

§

call-with-values
(call-with-values args)

§

canvas
(canvas args)

§

caption
(caption args)

§

car
(car pair)
Returns the first element of a pair (which may be a list)
Examples:
(car '(a b)) => 'a
car '(2 . 3) => 2
§

case-search
(case-search args)

§

cdaaar
(cdaaar args)

§

cdaadr
(cdaadr args)

§

cdaar
(cdaar args)

§

cdadar
(cdadar args)

§

cdaddr
(cdaddr args)

§

cdadr
(cdadr args)

§

cdar
(cdar args)

§

cddaar
(cddaar args)

§

cddadr
(cddadr args)

§

cddar
(cddar args)

§

cdddar
(cdddar args)

§

cddddr
(cddddr args)

§

cdddr
(cdddr args)

§

cddr
(cddr args)

§

cdr
(cdr args)

§

ceiling
(ceiling args)

§

center-element
(center-element args)

§

change_handler
(change_handler args)

§

char->integer
(char->integer args)

§

char<=?
(char<=? args)

§

char<?
(char<? args)

§

char=?
(char=? args)

§

char>=?
(char>=? args)

§

char>?
(char>? args)

§

char?
(char? args)

§

check-editor-title-change
(check-editor-title-change args)

§

checkbox-checked?
(checkbox-checked? args)

§

cite
(cite args)

§

classdiv
(classdiv args)

§

clear-cm-editor-undo!
(clear-cm-editor-undo! args)

§

clear-cumulative-errors
(clear-cumulative-errors args)

§

clear-local-storage!
(clear-local-storage! args)

§

clear-timer!
(clear-timer! args)

§

click_handler
(click_handler args)

§

clone-workspace
(clone-workspace args)

§

close-editor
(close-editor args)

§

close-input-port
(close-input-port args)

§

close-output-port
(close-output-port args)

§

close-port
(close-port args)

§

cm-editor-delete-selected-text
(cm-editor-delete-selected-text args)

§

cm-editor-eval-js-selection!
(cm-editor-eval-js-selection! args)

§

cm-editor-eval-selection-or-expr-before-cursor!
(cm-editor-eval-selection-or-expr-before-cursor! args)

§

cm-editor-get-current-symbol
(cm-editor-get-current-symbol args)

§

cm-editor-get-cursor-position
(cm-editor-get-cursor-position args)

§

cm-editor-get-line
(cm-editor-get-line args)

§

cm-editor-get-procedure-at-cursor
(cm-editor-get-procedure-at-cursor args)

§

cm-editor-get-scheme-selection-or-expr-before-cursor!
(cm-editor-get-scheme-selection-or-expr-before-cursor! args)

§

cm-editor-get-selected-text
(cm-editor-get-selected-text args)

§

cm-editor-get-text
(cm-editor-get-text args)

§

cm-editor-hide
(cm-editor-hide args)

§

cm-editor-hide-all
(cm-editor-hide-all args)

§

cm-editor-redo!
(cm-editor-redo! args)

§

cm-editor-replace
(cm-editor-replace args)

§

cm-editor-replace-selected-text
(cm-editor-replace-selected-text args)

§

cm-editor-scroll-to-line
(cm-editor-scroll-to-line args)

§

cm-editor-select-all
(cm-editor-select-all args)

§

cm-editor-set-align-left
(cm-editor-set-align-left args)

§

cm-editor-set-align-right
(cm-editor-set-align-right args)

§

cm-editor-set-block-quote
(cm-editor-set-block-quote args)

§

cm-editor-set-bold
(cm-editor-set-bold args)

§

cm-editor-set-bulleted-list
(cm-editor-set-bulleted-list args)

§

cm-editor-set-center
(cm-editor-set-center args)

§

cm-editor-set-code
(cm-editor-set-code args)

§

cm-editor-set-comment
(cm-editor-set-comment args)

§

cm-editor-set-cursor-position
(cm-editor-set-cursor-position args)

§

cm-editor-set-heading
(cm-editor-set-heading args)

§

cm-editor-set-italic
(cm-editor-set-italic args)

§

cm-editor-set-justify
(cm-editor-set-justify args)

§

cm-editor-set-link
(cm-editor-set-link args)

§

cm-editor-set-math
(cm-editor-set-math args)

§

cm-editor-set-note
(cm-editor-set-note args)

§

cm-editor-set-numbered-list
(cm-editor-set-numbered-list args)

§

cm-editor-set-poetry
(cm-editor-set-poetry args)

§

cm-editor-set-strikeout
(cm-editor-set-strikeout args)

§

cm-editor-set-subscript
(cm-editor-set-subscript args)

§

cm-editor-set-superscript
(cm-editor-set-superscript args)

§

cm-editor-set-text
(cm-editor-set-text args)

§

cm-editor-show
(cm-editor-show args)

§

cm-editor-undo!
(cm-editor-undo! args)

§

cm-end-position
(cm-end-position args)

§

cm-eval-editor-buffer!
(cm-eval-editor-buffer! args)

§

cm-find
(cm-find args)

§

code
(code args)

§

codeblock
(codeblock args)

§

col
(col args)

§

colgroup
(colgroup args)

§

collect-licenses
(collect-licenses args)

§

collect-linked-pages
(collect-linked-pages args)

§

collect-matching-wiki-pages
(collect-matching-wiki-pages args)

§

collect-wiki-page-list
(collect-wiki-page-list args)

§

color-box
(color-box args)

§

color-box-top
(color-box-top args)

§

command
(command args)

§

complex?
(complex? args)

§

confirm
(confirm args)

§

cons
(cons args)

§

cons*
(cons* args)

§

console-+name
(console-+name args)

§

construct-wiki-editor
(construct-wiki-editor args)

§

convert-roman
(convert-roman args)

§

convert-roman-helper
(convert-roman-helper args)

§

cos
(cos args)

§

css
(css args)

§

css!
(css! args)

§

css-string
(css-string args)

§

cumulative-errors
(cumulative-errors args)

§

current-date
(current-date args)

§

current-error-port
(current-error-port args)

§

current-input-port
(current-input-port args)

§

current-output-port
(current-output-port args)

§

datalist
(datalist args)

§

date->string
(date->string args)

§

date-day
(date-day args)

§

date-hour
(date-hour args)

§

date-millisecond
(date-millisecond args)

§

date-minute
(date-minute args)

§

date-month
(date-month args)

§

date-nanosecond
(date-nanosecond args)

§

date-second
(date-second args)

§

date-week-day
(date-week-day args)

§

date-year
(date-year args)

§

date?
(date? args)

§

dd
(dd args)

§

decode-base-32
(decode-base-32 args)

§

decode-base-64
(decode-base-64 args)

§

decode-base-64-text
(decode-base-64-text args)

§

decode-uri
(decode-uri args)

§

decode-uri-component
(decode-uri-component args)

§

del
(del args)

§

del-assoc
(del-assoc args)

§

del-assoc-list
(del-assoc-list args)

§

del-assq
(del-assq args)

§

del-assv
(del-assv args)

§

delete-internal-file
(delete-internal-file args)

§

delete-nth
(delete-nth args)

§

delete-package
(delete-package args)

§

denominator
(denominator args)

§

destroy-cm-editor!
(destroy-cm-editor! args)

§

details
(details args)

§

dfn
(dfn args)

§

disable!
(disable! args)

§

display
(display args)

§

display-incoming-links
(display-incoming-links args)

§

display-repl-result
(display-repl-result args)

§

display-search-results
(display-search-results args)

§

display-ui-panel
(display-ui-panel args)

§

display-wiki-content
(display-wiki-content args)

§

display-wiki-history
(display-wiki-history args)

§

display-wiki-page
(display-wiki-page args)

§

div
(div args)

§

div0
(div0 args)

§

div0-and-mod0
(div0-and-mod0 args)

§

dl
(dl args)

§

doc-root
(doc-root args)

§

document-object
(document-object args)

§

dom-create-element
(dom-create-element args)

§

dom-element
(dom-element args)

§

dom-get-attribute
(dom-get-attribute args)

§

dom-remove-child!
(dom-remove-child! args)

§

dom-remove-children!
(dom-remove-children! args)

§

domelem
(domelem args)

§

double-box
(double-box args)

§

double-grey-box
(double-grey-box args)

§

double-round-box
(double-round-box args)

§

double-round-grey-box
(double-round-grey-box args)

§

#download-done_click
(#download-done_click args)

§

download-file
(download-file args)

§

download-internal-file
(download-internal-file args)

§

dt
(dt args)

§

dumpobj
(dumpobj args)

§

dv
(dv args)

§

edit-wiki-page
(edit-wiki-page args)

§

element-absolutize!
(element-absolutize! args)

§

element-add-class-name
(element-add-class-name args)

§

element-add-class-name!
(element-add-class-name! args)

§

element-adjacent
(element-adjacent args)

§

element-ancestors
(element-ancestors args)

§

element-append-child!
(element-append-child! args)

§

element-class-names
(element-class-names args)

§

element-clean-whitespace!
(element-clean-whitespace! args)

§

element-clone-position!
(element-clone-position! args)

§

element-content
(element-content args)

§

element-cumulative-offset
(element-cumulative-offset args)

§

element-cumulative-scroll-offset
(element-cumulative-scroll-offset args)

§

element-descendant-of!
(element-descendant-of! args)

§

element-descendants
(element-descendants args)

§

element-dimensions
(element-dimensions args)

§

element-down
(element-down args)

§

element-empty!
(element-empty! args)

§

element-empty?
(element-empty? args)

§

element-exists?
(element-exists? args)

§

element-first-descendant
(element-first-descendant args)

§

element-focus!
(element-focus! args)

§

element-has-class-name?
(element-has-class-name? args)

§

element-height
(element-height args)

§

element-hide!
(element-hide! args)

§

element-identify
(element-identify args)

§

element-immediate-descendants
(element-immediate-descendants args)

§

element-insert!
(element-insert! args)

§

element-make-clipping!
(element-make-clipping! args)

§

element-make-positioned!
(element-make-positioned! args)

§

element-match?
(element-match? args)

§

element-new
(element-new args)

§

element-next
(element-next args)

§

element-next-sibling
(element-next-sibling args)

§

element-offset-parent
(element-offset-parent args)

§

element-opacity
(element-opacity args)

§

element-opacity-set!
(element-opacity-set! args)

§

element-positioned-offset
(element-positioned-offset args)

§

element-previous
(element-previous args)

§

element-previous-sibling
(element-previous-sibling args)

§

element-read-attribute
(element-read-attribute args)

§

element-relativize!
(element-relativize! args)

§

element-remove!
(element-remove! args)

§

element-remove-class-name
(element-remove-class-name args)

§

element-remove-class-name!
(element-remove-class-name! args)

§

element-replace!
(element-replace! args)

§

element-select
(element-select args)

§

element-show!
(element-show! args)

§

element-siblings
(element-siblings args)

§

element-style
(element-style args)

§

element-style-set!
(element-style-set! args)

§

element-toggle!
(element-toggle! args)

§

element-toggle-class-name
(element-toggle-class-name args)

§

element-toggle-class-name!
(element-toggle-class-name! args)

§

element-undo-clipping!
(element-undo-clipping! args)

§

element-undo-positioned!
(element-undo-positioned! args)

§

element-up
(element-up args)

§

element-update!
(element-update! args)

§

element-viewport-offset
(element-viewport-offset args)

§

element-visible?
(element-visible? args)

§

element-width
(element-width args)

§

element-wrap!
(element-wrap! args)

§

element-write-attribute
(element-write-attribute args)

§

element-write-attribute!
(element-write-attribute! args)

§

elems
(elems  args)

§

em
(em args)

§

embed
(embed args)

§

encode-base-32
(encode-base-32 args)

§

encode-base-64
(encode-base-64 args)

§

encode-uri
(encode-uri args)

§

encode-uri-component
(encode-uri-component args)

§

enum-set->list
(enum-set->list args)

§

enum-set-complement
(enum-set-complement args)

§

enum-set-constructor
(enum-set-constructor args)

§

enum-set-difference
(enum-set-difference args)

§

enum-set-indexer
(enum-set-indexer args)

§

enum-set-intersection
(enum-set-intersection args)

§

enum-set-member?
(enum-set-member? args)

§

enum-set-projection
(enum-set-projection args)

§

enum-set-subset?
(enum-set-subset? args)

§

enum-set-union
(enum-set-union args)

§

enum-set-universe
(enum-set-universe args)

§

enum-set=?
(enum-set=? args)

§

enumerate-procedures
(enumerate-procedures args)

§

enumerate-undocumented-procedures
(enumerate-undocumented-procedures args)

§

eof-object
(eof-object args)

§

eof-object?
(eof-object? args)

§

eq?
(eq? obj1 obj2)

   The eq? predicate is similar to eqv? except that in some cases it is capable of discerning distinctions finer than those detectable by eqv?.

   The eq? and eqv? predicates are guaranteed to have the same behavior on symbols, booleans, the empty list, pairs, procedures, non-empty strings, bytevectors, and vectors, and records. The behavior of eq? on number objects and characters is implementation-dependent, but it always returns either #t or #f, and returns #t only when eqv? would also return #t. The eq? predicate may also behave differently from eqv? on empty vectors, empty bytevectors, and empty strings.

   (eq? 'a 'a)                     ‌⇒  #t

   (eq? '(a) '(a))                 ‌⇒  unspecified

   (eq? (list 'a) (list 'a))       ‌⇒  #f

   (eq? "a" "a")                   ‌⇒  unspecified

   (eq? "" "")                     ‌⇒  unspecified

   (eq? '() '())                   ‌⇒  #t

   (eq? 2 2)                       ‌⇒  unspecified

   (eq? #\A #\A) ‌⇒  unspecified

   (eq? car car)                   ‌⇒  #t

   (let ((n (+ 2 3)))

     (eq? n n))      ‌⇒  unspecified

   (let ((x '(a)))

     (eq? x x))      ‌⇒  #t

   (let ((x '#()))

     (eq? x x))      ‌⇒  unspecified

   (let ((p (lambda (x) x)))

     (eq? p p))      ‌⇒  unspecified
§

equal-hash
(equal-hash args)

§

equal?
(equal? obj1 obj2)

   The equal? predicate returns #t if and only if the (possibly infinite) unfoldings of its arguments into regular trees are equal as ordered trees.

   The equal? predicate treats pairs and vectors as nodes with outgoing edges, uses string=? to compare strings, uses bytevector=? to compare bytevectors (see library chapter on “Bytevectors”), and uses eqv? to compare other nodes.

   (equal? 'a 'a)                  ‌⇒  #t

   (equal? '(a) '(a))              ‌⇒  #t

   (equal? '(a (b) c)

           '(a (b) c))             ‌⇒  #t

   (equal? "abc" "abc")            ‌⇒  #t

   (equal? 2 2)                    ‌⇒  #t

   (equal? (make-vector 5 'a)

           (make-vector 5 'a))     ‌⇒  #t

   (equal? '#vu8(1 2 3 4 5)

           (u8-list->bytevector

            '(1 2 3 4 5))          ‌⇒  #t

   (equal? (lambda (x) x)

           (lambda (y) y))  ‌⇒  unspecified

   (let* ((x (list 'a))

          (y (list 'a))

          (z (list x y)))

     (list (equal? z (list y x))

           (equal? z (list x x))))
   ‌‌⇒  (#t #t)

       Note:‌ The equal? procedure must always terminate, even if its arguments contain cycles.
§

eqv?
(eqv? obj1 obj2)
 The eqv? procedure defines a useful equivalence relation on objects. Briefly, it returns #t if obj1 and obj2 should normally be regarded as the same object and #f otherwise. This relation is left slightly open to interpretation, but the following partial specification of eqv? must hold for all implementations.

 The eqv? procedure returns #t if one of the following holds:

     Obj1 and obj2 are both booleans and are the same according to the boolean=? procedure (section 11.8).

     Obj1 and obj2 are both symbols and are the same according to the symbol=? procedure (section 11.10).

     Obj1 and obj2 are both exactnumber objects and are numerically equal (see =, section 11.7).

     Obj1 and obj2 are both inexact number objects, are numerically equal (see =, section 11.7), and yield the same results (in the sense of eqv?) when passed as arguments to any other procedure that can be defined as a finite composition of Scheme's standard arithmetic procedures.

     Obj1 and obj2 are both characters and are the same character according to the char=? procedure (section 11.11).

     Both obj1 and obj2 are the empty list.

     Obj1 and obj2 are objects such as pairs, vectors, bytevectors (library chapter on “Bytevectors”), strings, hashtables, records (library chapter on “Records”), ports (library section on “Port I/O”), or hashtables (library chapter on “Hash tables”) that refer to the same locations in the store (section 5.10).

     Obj1 and obj2 are record-type descriptors that are specified to be eqv? in library section on “Procedural layer”.

 The eqv? procedure returns #f if one of the following holds:

     Obj1 and obj2 are of different types (section 11.1).

     Obj1 and obj2 are booleans for which the boolean=? procedure returns #f.

     Obj1 and obj2 are symbols for which the symbol=? procedure returns #f.

     One of obj1 and obj2 is an exact number object but the other is an inexact number object.

     Obj1 and obj2 are rational number objects for which the = procedure returns #f.

     Obj1 and obj2 yield different results (in the sense of eqv?) when passed as arguments to any other procedure that can be defined as a finite composition of Scheme's standard arithmetic procedures.

     Obj1 and obj2 are characters for which the char=? procedure returns #f.

     One of obj1 and obj2 is the empty list, but the other is not.

     Obj1 and obj2 are objects such as pairs, vectors, bytevectors (library chapter on “Bytevectors”), strings, records (library chapter on “Records”), ports (library section on “Port I/O”), or hashtables (library chapter on “Hashtables”) that refer to distinct locations.

     Obj1 and obj2 are pairs, vectors, strings, or records, or hashtables, where the applying the same accessor (i.e. car, cdr, vector-ref, string-ref, or record accessors) to both yields results for which eqv? returns #f.

     Obj1 and obj2 are procedures that would behave differently (return different values or have different side effects) for some arguments.

     Note:‌ The eqv? procedure returning #t when obj1 and obj2 are number objects does not imply that = would also return #t when called with obj1 and obj2 as arguments.

 (eqv? 'a 'a)                     ‌⇒  #t

 (eqv? 'a 'b)                     ‌⇒  #f

 (eqv? 2 2)                       ‌⇒  #t

 (eqv? '() '())                   ‌⇒  #t

 (eqv? 100000000 100000000)       ‌⇒  #t

 (eqv? (cons 1 2) (cons 1 2))     ‌⇒  #f

 (eqv? (lambda () 1)

       (lambda () 2))             ‌⇒  #f

 (eqv? #f 'nil)                  ‌⇒  #f

 The following examples illustrate cases in which the above rules do not fully specify the behavior of eqv?. All that can be said about such cases is that the value returned by eqv? must be a boolean.

 (let ((p (lambda (x) x)))

   (eqv? p p))                    ‌⇒  unspecified

 (eqv? "" "")             ‌⇒  unspecified

 (eqv? '#() '#())         ‌⇒  unspecified

 (eqv? (lambda (x) x)

       (lambda (x) x))    ‌⇒  unspecified

 (eqv? (lambda (x) x)

       (lambda (y) y))    ‌⇒  unspecified

 (eqv? +nan.0 +nan.0)             ‌⇒ unspecified

 The next set of examples shows the use of eqv? with procedures that have local state. Calls to gen-counter must return a distinct procedure every time, since each procedure has its own internal counter. Calls to gen-loser return procedures that behave equivalently when called. However, eqv? may not detect this equivalence.

 (define gen-counter

   (lambda ()

     (let ((n 0))

       (lambda () (set! n (+ n 1)) n))))

 (let ((g (gen-counter)))

   (eqv? g g))           ‌⇒  unspecified

 (eqv? (gen-counter) (gen-counter))

                         ‌⇒  #f

 (define gen-loser

   (lambda ()

     (let ((n 0))

       (lambda () (set! n (+ n 1)) 27))))

 (let ((g (gen-loser)))

   (eqv? g g))           ‌⇒  unspecified

 (eqv? (gen-loser) (gen-loser))

                         ‌⇒  unspecified

 (letrec ((f (lambda () (if (eqv? f g) 'both 'f)))

          (g (lambda () (if (eqv? f g) 'both 'g))))

   (eqv? f g)) ‌⇒  unspecified

 (letrec ((f (lambda () (if (eqv? f g) 'f 'both)))

          (g (lambda () (if (eqv? f g) 'g 'both))))

   (eqv? f g)) ‌⇒  #f

 Implementations may share structure between constants where appropriate. Furthermore, a constant may be copied at any time by the implementation so as to exist simultaneously in different sets of locations, as noted in section 11.4.1. Thus the value of eqv? on constants is sometimes implementation-dependent.

 (eqv? '(a) '(a))                 ‌⇒  unspecified

 (eqv? "a" "a")                   ‌⇒  unspecified

 (eqv? '(b) (cdr '(a b)))         ‌⇒  unspecified

 (let ((x '(a)))

   (eqv? x x))                    ‌⇒  #t
§

escape-html
(escape-html args)

§

eval
(eval args)

§

eval-js-string
(eval-js-string args)

§

eval-scheme-string
(eval-scheme-string args)

§

even?
(even? args)

§

exact-integer-sqrt
(exact-integer-sqrt args)

§

exec-wiki-page
(exec-wiki-page args)

§

exists
(exists args)

§

exp
(exp args)

§

expt
(expt args)

§

fieldset
(fieldset args)

§

figcaption
(figcaption args)

§

figure
(figure args)

§

file-basename
(file-basename args)

§

file-basename-no-extension
(file-basename-no-extension args)

§

file-exists?
(file-exists? args)

§

file-extension
(file-extension args)

§

file-path
(file-path args)

§

file-path-no-extension
(file-path-no-extension args)

§

file-rename
(file-rename args)

§

file-version-time-stamp
(file-version-time-stamp args)

§

filter
(filter args)

§

find
(find args)

§

find-matching-wiki-pages
(find-matching-wiki-pages args)

§

finite?
(finite? args)

§

fix-uncacheable
(fix-uncacheable args)

§

floor
(floor args)

§

focus-cm-editor-component!
(focus-cm-editor-component! args)

§

fold-left
(fold-left args)

§

fold-right
(fold-right args)

§

folder-rename
(folder-rename args)

§

footer
(footer args)

§

for-all
(for-all args)

§

for-each
(for-each args)

§

force
(force args)

§

form
(form args)

§

format
(format args)

§

fronkenmark
(fronkenmark args)

§

fronkenmark-get-notes
(fronkenmark-get-notes args)

§

fronkenmark-reset-notes
(fronkenmark-reset-notes args)

§

#fronkensteen-editor-align-left-button_click
(#fronkensteen-editor-align-left-button_click args)

§

#fronkensteen-editor-align-right-button_click
(#fronkensteen-editor-align-right-button_click args)

§

#fronkensteen-editor-block-quote-button_click
(#fronkensteen-editor-block-quote-button_click args)

§

#fronkensteen-editor-bold-button_click
(#fronkensteen-editor-bold-button_click args)

§

#fronkensteen-editor-bullet-list-button_click
(#fronkensteen-editor-bullet-list-button_click args)

§

#fronkensteen-editor-center-button_click
(#fronkensteen-editor-center-button_click args)

§

fronkensteen-editor-close-and-display-page
(fronkensteen-editor-close-and-display-page args)

§

#fronkensteen-editor-close-button_click
(#fronkensteen-editor-close-button_click args)

§

#fronkensteen-editor-code-button_click
(#fronkensteen-editor-code-button_click args)

§

#fronkensteen-editor-comment-button_click
(#fronkensteen-editor-comment-button_click args)

§

fronkensteen-editor-controls
(fronkensteen-editor-controls args)

§

#fronkensteen-editor-doc-button_click
(#fronkensteen-editor-doc-button_click args)

§

#fronkensteen-editor-footnote-button_click
(#fronkensteen-editor-footnote-button_click args)

§

#fronkensteen-editor-h1-button_click
(#fronkensteen-editor-h1-button_click args)

§

#fronkensteen-editor-h2-button_click
(#fronkensteen-editor-h2-button_click args)

§

#fronkensteen-editor-h3-button_click
(#fronkensteen-editor-h3-button_click args)

§

#fronkensteen-editor-history-button_click
(#fronkensteen-editor-history-button_click args)

§

#fronkensteen-editor-italic-button_click
(#fronkensteen-editor-italic-button_click args)

§

#fronkensteen-editor-javascript-eval-button_click
(#fronkensteen-editor-javascript-eval-button_click args)

§

#fronkensteen-editor-justify-button_click
(#fronkensteen-editor-justify-button_click args)

§

#fronkensteen-editor-latex-button_click
(#fronkensteen-editor-latex-button_click args)

§

#fronkensteen-editor-link-button_click
(#fronkensteen-editor-link-button_click args)

§

#fronkensteen-editor-number-list-button_click
(#fronkensteen-editor-number-list-button_click args)

§

#fronkensteen-editor-poetry-button_click
(#fronkensteen-editor-poetry-button_click args)

§

#fronkensteen-editor-preview-button_click
(#fronkensteen-editor-preview-button_click args)

§

#fronkensteen-editor-redo-button_click
(#fronkensteen-editor-redo-button_click args)

§

#fronkensteen-editor-save-and-close-button_click
(#fronkensteen-editor-save-and-close-button_click args)

§

#fronkensteen-editor-save-button_click
(#fronkensteen-editor-save-button_click args)

§

#fronkensteen-editor-scheme-eval-button_click
(#fronkensteen-editor-scheme-eval-button_click args)

§

#fronkensteen-editor-strikeout-button_click
(#fronkensteen-editor-strikeout-button_click args)

§

#fronkensteen-editor-subscript-button_click
(#fronkensteen-editor-subscript-button_click args)

§

#fronkensteen-editor-superscript-button_click
(#fronkensteen-editor-superscript-button_click args)

§

#fronkensteen-editor-undo-button_click
(#fronkensteen-editor-undo-button_click args)

§

#fronkensteen-preview-done-button_click
(#fronkensteen-preview-done-button_click args)

§

#fronkensteen-wiki-lambda-button_click
(#fronkensteen-wiki-lambda-button_click args)

§

fronkensteen-toolbar-button
(fronkensteen-toolbar-button args)

§

#fronkensteen-wiki-delete-button_click
(#fronkensteen-wiki-delete-button_click args)

§

#fronkensteen-wiki-docs-button_click
(#fronkensteen-wiki-docs-button_click args)

§

#fronkensteen-wiki-edit-button_click
(#fronkensteen-wiki-edit-button_click args)

§

#fronkensteen-wiki-history-button_click
(#fronkensteen-wiki-history-button_click args)

§

#fronkensteen-wiki-home-button_click
(#fronkensteen-wiki-home-button_click args)

§

#fronkensteen-wiki-import-file-button_click
(#fronkensteen-wiki-import-file-button_click args)

§

#fronkensteen-wiki-incoming-links-button_click
(#fronkensteen-wiki-incoming-links-button_click args)

§

#fronkensteen-wiki-new-page-button_click
(#fronkensteen-wiki-new-page-button_click args)

§

#fronkensteen-wiki-refresh-button_click
(#fronkensteen-wiki-refresh-button_click args)

§

#fronkensteen-wiki-save-work_space-button_click
(#fronkensteen-wiki-save-work_space-button_click args)

§

#fronkensteen-wiki-search-button_click
(#fronkensteen-wiki-search-button_click args)

§

fronkensteen-wiki-search-field_input
(fronkensteen-wiki-search-field_input args)

§

#fronkensteen-wiki-special-button_click
(#fronkensteen-wiki-special-button_click args)

§

gen-id
(gen-id args)

§

gen_handler
(gen_handler args)

§

generate-doc-skeleton
(generate-doc-skeleton args)

§

generate-json-key-value
(generate-json-key-value args)

§

generate-json-number
(generate-json-number args)

§

generate-json-object
(generate-json-object args)

§

generate-json-object-rec
(generate-json-object-rec args)

§

generate-json-string
(generate-json-string args)

§

generate-json-vector
(generate-json-vector args)

§

generate-json-vector-items
(generate-json-vector-items args)

§

generate-select-items-rec
(generate-select-items-rec args)

§

generate-wiki-search-results
(generate-wiki-search-results args)

§

generate-wiki-toolbar
(generate-wiki-toolbar args)

§

generic-span
(generic-span args)

§

gensym
(gensym args)

§

get-cm-editor-ids
(get-cm-editor-ids args)

§

get-content
(get-content args)

§

get-id-vector
(get-id-vector args)

§

get-internal-dir
(get-internal-dir args)

§

get-internal-filesystem-json
(get-internal-filesystem-json args)

§

get-local-storage-item
(get-local-storage-item args)

§

get-matching-wiki-files
(get-matching-wiki-files args)

§

get-output-string
(get-output-string args)

§

get-package-vector
(get-package-vector args)

§

get-selected-index
(get-selected-index args)

§

get-sorted-file-names
(get-sorted-file-names args)

§

get-style
(get-style args)

§

get-unsorted-file-names
(get-unsorted-file-names args)

§

get-versioned-file-name
(get-versioned-file-name args)

§

getelem
(getelem args)

§

grey-box
(grey-box args)

§

grid-container
(grid-container args)

§

h1
(h1 args)

§

h2
(h2 args)

§

h3
(h3 args)

§

h4
(h4 args)

§

h5
(h5 args)

§

h6
(h6 args)

§

hang
(hang args)

§

hashtable-clear!
(hashtable-clear! args)

§

hashtable-contains?
(hashtable-contains? args)

§

hashtable-copy
(hashtable-copy args)

§

hashtable-delete!
(hashtable-delete! args)

§

hashtable-entries
(hashtable-entries args)

§

hashtable-equivalence-function
(hashtable-equivalence-function args)

§

hashtable-hash-function
(hashtable-hash-function args)

§

hashtable-keys
(hashtable-keys args)

§

hashtable-mutable?
(hashtable-mutable? args)

§

hashtable-ref
(hashtable-ref args)

§

hashtable-set!
(hashtable-set! args)

§

hashtable-size
(hashtable-size args)

§

hashtable-update!
(hashtable-update! args)

§

hashtable?
(hashtable? args)

§

head
(head args)

§

header
(header args)

§

hereload
(hereload args)

§

hgroup
(hgroup args)

§

hide-ui-panel
(hide-ui-panel args)

§

hr
(hr args)

§

html
(html args)

§

html-error
(html-error args)

§

html-escape
(html-escape args)

§

html-list
(html-list args)

§

html-list-rec
(html-list-rec args)

§

htmlmap
(htmlmap args)

§

http-post
(http-post args)

§

http-request
(http-request args)

§

i
(i args)

§

iconic-icon
(iconic-icon args)

§

iconic-icon-gen
(iconic-icon-gen args)

§

identity
(identity args)

§

iframe
(iframe args)

§

imag-part
(imag-part args)

§

img
(img args)

§

indexOf
(indexOf args)

§

infinite?
(infinite? args)

§

init-cm-editor!
(init-cm-editor! args)

§

init-wiki-history-display
(init-wiki-history-display args)

§

init-wiki-search-display
(init-wiki-search-display args)

§

init-wiki-viewer
(init-wiki-viewer args)

§

input
(input args)

§

input-port?
(input-port? args)

§

input_handler
(input_handler args)

§

ins
(ins args)

§

insert-nth
(insert-nth args)

§

inspect
(inspect args)

§

inspect!
(inspect! args)

§

install-css
(install-css args)

§

install-package
(install-package args)

§

integer->char
(integer->char args)

§

integer?
(integer? obj)

Returns #t if obj is an integer, #f otherwise.
§

internal-audio
(internal-audio args)

§

internal-image
(internal-image args)

§

internal-video
(internal-video args)

§

intersperse
(intersperse args)

§

iota
(iota args)

§

is-alist?
(is-alist? args)

§

is-audio-file?
(is-audio-file? args)

§

is-cm-editor-clean?
(is-cm-editor-clean? args)

§

is-dotted-pair?
(is-dotted-pair? args)

§

is-image-file?
(is-image-file? args)

§

is-procedure-defined?
(is-procedure-defined? args)

§

is-system-dirty?
(is-system-dirty? args)

§

is-text-file?
(is-text-file? args)

§

is-video-file?
(is-video-file? args)

§

iso-8601-date
(iso-8601-date args)

§

iso-8601-date-epub-3
(iso-8601-date-epub-3 args)

§

iso-8601-date-short
(iso-8601-date-short args)

§

jq-attr
(jq-attr args)

§

jq-is-empty-object?
(jq-is-empty-object? args)

§

jq-length
(jq-length args)

§

js-array->list
(js-array->list args)

§

js-array-to-list
(js-array-to-list args)

§

js-biwa-evaluate
(js-biwa-evaluate args)

§

js-call
(js-call args)

§

js-closure
(js-closure args)

§

js-eval
(js-eval args)

§

js-function?
(js-function? args)

§

js-install-head
(js-install-head args)

§

js-invocation
(js-invocation args)

§

js-invoke
(js-invoke args)

§

js-load
(js-load args)

§

js-new
(js-new args)

§

js-null?
(js-null? args)

§

js-obj
(js-obj args)

§

js-obj->alist
(js-obj->alist args)

§

js-obj-to-alist
(js-obj-to-alist args)

§

js-ref
(js-ref args)

§

js-set!
(js-set! args)

§

js-undefined?
(js-undefined? args)

§

js-window-height
(js-window-height args)

§

js-window-width
(js-window-width args)

§

json->scheme
(json->scheme args)

§

json->sexp
(json->sexp args)

§

kbd
(kbd args)

§

keygen
(keygen args)

§

label
(label args)

§

launch-remote-repl-app
(launch-remote-repl-app args)

§

launch-remote-repl-terminal
(launch-remote-repl-terminal args)

§

legend
(legend args)

§

length
(length args)

§

li
(li args)

§

link
(link args)

§

list
(list args)

§

list->js-array
(list->js-array args)

§

list->string
(list->string args)

§

list->vector
(list->vector args)

§

list-copy
(list-copy args)

§

list-ref
(list-ref args)

§

list-sort
(list-sort args)

§

list-sort/comp
(list-sort/comp args)

§

list-tail
(list-tail args)

§

list-to-js-array
(list-to-js-array args)

§

list?
(list? args)

§

load
(load args)

§

load-iframe
(load-iframe args)

§

load-stylesheet
(load-stylesheet args)

§

log
(log args)

§

lower-case-letter-equivalent
(lower-case-letter-equivalent args)

§

macroexpand
(macroexpand args)

§

macroexpand-1
(macroexpand-1 args)

§

magnitude
(magnitude args)

§

make-custom-textual-output-port
(make-custom-textual-output-port args)

§

make-enumeration
(make-enumeration args)

§

make-eq-hashtable
(make-eq-hashtable args)

§

make-eqv-hashtable
(make-eqv-hashtable args)

§

make-hashtable
(make-hashtable args)

§

make-page-dirty
(make-page-dirty args)

§

make-polar
(make-polar args)

§

make-promise
(make-promise args)

§

make-record-constructor-descriptor
(make-record-constructor-descriptor args)

§

make-record-type-descriptor
(make-record-type-descriptor args)

§

make-rectangular
(make-rectangular args)

§

make-regexp
(make-regexp args)

§

make-string
(make-string args)

§

make-vector
(make-vector args)

§

map
(map args)

§

map-with-index
(map-with-index args)

§

mark
(mark args)

§

markdown
(markdown args)

§

markup-trusted-text
(markup-trusted-text args)

§

markup-trusted-text-file
(markup-trusted-text-file args)

§

markup-untrusted-text
(markup-untrusted-text args)

§

markup-untrusted-text-file
(markup-untrusted-text-file args)

§

max
(max args)

§

member
(member args)

§

memp
(memp args)

§

memq
(memq args)

§

memv
(memv args)

§

menu
(menu args)

§

meta
(meta args)

§

meter
(meter args)

§

mime-type
(mime-type  args)

§

min
(min args)

§

mla-heading-string
(mla-heading-string args)

§

mod
(mod args)

§

mod0
(mod0 args)

§

mono-font
(mono-font args)

§

nan?
(nan? args)

§

natural-sort
(natural-sort args)

§

nav
(nav args)

§

nav-go-back
(nav-go-back args)

§

nav-go-forward
(nav-go-forward args)

§

nav-go-history
(nav-go-history args)

§

navigate-url
(navigate-url args)

§

negative?
(negative? args)

§

new-wiki-page
(new-wiki-page args)

§

newline
(newline args)

§

no-dash-uuid
(no-dash-uuid  args)

§

noscript
(noscript args)

§

not
(not args)

§

nth
(nth args)

§

nth-cdr
(nth-cdr args)

§

null?
(null? args)

§

number->string
(number->string args)

§

number?
(number? obj)

Returns #t if obj is a number, #f otherwise.
§

numerator
(numerator args)

§

numeric-time-stamp
(numeric-time-stamp args)

§

object
(object args)

§

odd?
(odd? args)

§

ol
(ol args)

§

olist
(olist args)

§

open-input-string
(open-input-string args)

§

open-output-string
(open-output-string args)

§

open-url
(open-url args)

§

optgroup
(optgroup args)

§

option
(option args)

§

output
(output args)

§

output-port?
(output-port? args)

§

p
(p args)

§

pair?
(pair? args)

§

param
(param args)

§

parse-date
(parse-date args)

§

parse-seml
(parse-seml args)

§

parse-youtube-url
(parse-youtube-url args)

§

partition
(partition args)

§

place-caret-at-end
(place-caret-at-end  args)

§

place-caret-at-start
(place-caret-at-start  args)

§

poem
(poem args)

§

pop-browser-state_handler
(pop-browser-state_handler args)

§

populate-select
(populate-select args)

§

port-closed?
(port-closed? args)

§

port?
(port? args)

§

positive?
(positive? args)

§

pre
(pre args)

§

print
(print args)

§

proc-css
(proc-css args)

§

proc-css-list
(proc-css-list args)

§

proc-css-rules
(proc-css-rules args)

§

procedure?
(procedure? obj)

       Returns #t if obj is a procedure, otherwise returns #f.

       (procedure? car)            ‌⇒  #t

       (procedure? 'car)           ‌⇒  #f

       (procedure? (lambda (x) (* x x)))

                                   ‌⇒  #t

       (procedure? '(lambda (x) (* x x)))

                                   ‌⇒  #f
§

process-doc-strings
(process-doc-strings args)

§

process-internal-text-file
(process-internal-text-file args)

§

process-matching-wiki-files
(process-matching-wiki-files args)

§

process-read-template
(process-read-template args)

§

process-template-lines
(process-template-lines args)

§

process-wiki-documentation
(process-wiki-documentation args)

§

progress
(progress args)

§

promise?
(promise? args)

§

prompt
(prompt args)

§

prompt-to-save-user-data
(prompt-to-save-user-data args)

§

prop
(prop args)

§

prop!
(prop! args)

§

push-browser-state
(push-browser-state args)

§

put-char
(put-char args)

§

put-datum
(put-datum args)

§

put-string
(put-string args)

§

q
(q args)

§

raise
(raise args)

§

random-integer
(random-integer args)

§

random-real
(random-real args)

§

randomize-select!
(randomize-select! args)

§

rational?
(rational? args)

§

read
(read args)

§

read-from-string
(read-from-string args)

§

read-internal-data-url
(read-internal-data-url args)

§

read-internal-file
(read-internal-file args)

§

read-internal-text-file
(read-internal-text-file args)

§

read-line
(read-line args)

§

real-part
(real-part args)

§

real?
(real? args)

§

receive-jsonp
(receive-jsonp args)

§

record-accessor
(record-accessor args)

§

record-constructor
(record-constructor args)

§

record-field-mutable?
(record-field-mutable? args)

§

record-mutator
(record-mutator args)

§

record-predicate
(record-predicate args)

§

record-rtd
(record-rtd args)

§

record-type-descriptor?
(record-type-descriptor? args)

§

record-type-field-names
(record-type-field-names args)

§

record-type-generative?
(record-type-generative? args)

§

record-type-name
(record-type-name args)

§

record-type-opaque?
(record-type-opaque? args)

§

record-type-parent
(record-type-parent args)

§

record-type-sealed?
(record-type-sealed? args)

§

record-type-uid
(record-type-uid args)

§

record?
(record? args)

§

refresh-cm-editor-component!
(refresh-cm-editor-component! args)

§

regexp->string
(regexp->string args)

§

regexp-exec
(regexp-exec args)

§

regexp-replace-all
(regexp-replace-all args)

§

regexp?
(regexp? args)

§

reload
(reload args)

§

#remote-eval-button_click
(#remote-eval-button_click args)

§

#remote-eval-done-button_click
(#remote-eval-done-button_click args)

§

#remote-eval-expression-button_click
(#remote-eval-expression-button_click args)

§

remote-evaluate
(remote-evaluate args)

§

remote-repl-terminal
(remote-repl-terminal args)

§

remoteload
(remoteload args)

§

remove
(remove args)

§

remove-dirty-pages
(remove-dirty-pages args)

§

remove-handler!
(remove-handler! args)

§

remove-local-storage-item!
(remove-local-storage-item! args)

§

remove-wiki-history
(remove-wiki-history args)

§

remp
(remp args)

§

remq
(remq args)

§

remv
(remv args)

§

render-incoming-links
(render-incoming-links args)

§

render-wiki-content
(render-wiki-content args)

§

#repl-clear-button_click
(#repl-clear-button_click args)

§

#repl-eval-buffer-button_click
(#repl-eval-buffer-button_click args)

§

#repl-eval-button_click
(#repl-eval-button_click args)

§

repl-here
(repl-here args)

§

replace-browser-state
(replace-browser-state args)

§

replace-nth
(replace-nth args)

§

replace-ui-panel
(replace-ui-panel args)

§

reset-lower-levels
(reset-lower-levels args)

§

reset-mla-level-counter
(reset-mla-level-counter args)

§

retrieve-procedure-definition
(retrieve-procedure-definition args)

§

retrieve-procedure-documentation
(retrieve-procedure-documentation args)

§

retrieve-procedure-filename
(retrieve-procedure-filename args)

§

retrieve-wiki-audio
(retrieve-wiki-audio args)

§

retrieve-wiki-data
(retrieve-wiki-data args)

§

retrieve-wiki-image
(retrieve-wiki-image args)

§

retrieve-wiki-video
(retrieve-wiki-video args)

§

reverse
(reverse args)

§

round
(round args)

§

round-box
(round-box args)

§

round-grey-box
(round-grey-box args)

§

round-list
(round-list args)

§

round-list-item
(round-list-item args)

§

rp
(rp args)

§

rt
(rt args)

§

ruby
(ruby args)

§

run-wiki-search
(run-wiki-search args)

§

rxmatch
(rxmatch args)

§

samp
(samp args)

§

sans-font
(sans-font args)

§

save-the-static-world
(save-the-static-world args)

§

save-wiki-file
(save-wiki-file args)

§

scheme->json
(scheme->json args)

§

script
(script args)

§

scroll-element-into-view
(scroll-element-into-view args)

§

scroll-into-view
(scroll-into-view args)

§

scroll-to-bottom
(scroll-to-bottom args)

§

scroll-to-element!
(scroll-to-element! args)

§

scroll-to-top
(scroll-to-top args)

§

search-defined-procedures
(search-defined-procedures args)

§

search-hash-tag
(search-hash-tag args)

§

section
(section args)

§

select
(select args)

§

select_handler
(select_handler args)

§

seml
(seml args)

§

seml-element
(seml-element args)

§

seml-self-closing
(seml-self-closing args)

§

seml-self-closing-element
(seml-self-closing-element args)

§

serif-font
(serif-font args)

§

set-app-name
(set-app-name args)

§

set-car!
(set-car! args)

§

set-cdr!
(set-cdr! args)

§

set-checkbox-checked!
(set-checkbox-checked! args)

§

set-cm-editor-clean!
(set-cm-editor-clean! args)

§

set-content!
(set-content! args)

§

set-document-title
(set-document-title args)

§

set-draggable!
(set-draggable! args)

§

set-fav-icon
(set-fav-icon args)

§

set-handler!
(set-handler! args)

§

set-local-storage-item!
(set-local-storage-item! args)

§

set-selected-index!
(set-selected-index! args)

§

set-style!
(set-style! args)

§

set-system-clean
(set-system-clean args)

§

set-system-dirty
(set-system-dirty args)

§

set-timer!
(set-timer! args)

§

set-upload-element
(set-upload-element args)

§

set-wiki-data
(set-wiki-data args)

§

set-window-location-hash!
(set-window-location-hash! args)

§

show-download
(show-download args)

§

show-editor
(show-editor args)

§

show-editor-preview
(show-editor-preview args)

§

show-mini-repl
(show-mini-repl args)

§

show-ui-panel
(show-ui-panel args)

§

show-wiki-history-dialog
(show-wiki-history-dialog args)

§

show-wiki-toolbar
(show-wiki-toolbar args)

§

show-wiki-tools
(show-wiki-tools args)

§

sin
(sin args)

§

sleep
(sleep args)

§

small
(small args)

§

smallcaps-font
(smallcaps-font args)

§

smart-quotes
(smart-quotes args)

§

sort-order
(sort-order  args)

§

source
(source args)

§

span
(span args)

§

sqrt
(sqrt args)

§

str-escape
(str-escape args)

§

str-find
(str-find args)

§

str-find-unique
(str-find-unique args)

§

str-match?
(str-match? args)

§

str-replace
(str-replace args)

§

str-replace-re
(str-replace-re args)

§

str-split
(str-split args)

§

str-trim
(str-trim args)

§

str-unescape
(str-unescape args)

§

str-wordcount
(str-wordcount args)

§

string
(string args)

§

string->list
(string->list args)

§

string->number
(string->number args)

§

string->regexp
(string->regexp args)

§

string->symbol
(string->symbol args)

§

string-append
(string-append args)

§

string-ci-hash
(string-ci-hash args)

§

string-ci<=?
(string-ci<=? args)

§

string-ci<?
(string-ci<? args)

§

string-ci=?
(string-ci=? args)

§

string-ci>=?
(string-ci>=? args)

§

string-ci>?
(string-ci>? args)

§

string-concat
(string-concat args)

§

string-copy
(string-copy args)

§

string-downcase
(string-downcase args)

§

string-for-each
(string-for-each args)

§

string-hash
(string-hash args)

§

string-join
(string-join args)

§

string-length
(string-length args)

§

string-reader
(string-reader args)

§

string-reader-read
(string-reader-read args)

§

string-ref
(string-ref args)

§

string-split
(string-split args)

§

string-upcase
(string-upcase args)

§

string<=?
(string<=? args)

§

string<?
(string<? args)

§

string=?
(string=? args)

§

string>=?
(string>=? args)

§

string>?
(string>? args)

§

string?
(string? args)

§

strong
(strong args)

§

style
(style args)

§

sub
(sub args)

§

substring
(substring args)

§

summary
(summary args)

§

sup
(sup args)

§

svg
(svg args)

§

symbol->string
(symbol->string args)

§

symbol-font
(symbol-font args)

§

symbol-hash
(symbol-hash args)

§

symbol=?
(symbol=? args)

§

symbol?
(symbol? args)

§

system-launch
(system-launch args)

§

table
(table args)

§

tan
(tan args)

§

tbody
(tbody args)

§

td
(td args)

§

textarea
(textarea args)

§

textual-port?
(textual-port? args)

§

tfoot
(tfoot args)

§

th
(th args)

§

thead
(thead args)

§

time
(time args)

§

timer
(timer args)

§

title
(title args)

§

tr
(tr args)

§

track
(track args)

§

truncate
(truncate args)

§

trusted-markdown
(trusted-markdown args)

§

u
(u args)

§

ul
(ul args)

§

ulist
(ulist args)

§

unescape-html
(unescape-html args)

§

unique-page-title
(unique-page-title args)

§

unix-time
(unix-time args)

§

upload-file
(upload-file args)

§

upper-case-letter-equivalent
(upper-case-letter-equivalent args)

§

url-params
(url-params args)

§

uuid
(uuid  args)

§

values
(values args)

§

var
(var args)

§

vector
(vector args)

§

vector->list
(vector->list args)

§

vector-append
(vector-append args)

§

vector-copy
(vector-copy args)

§

vector-fill!
(vector-fill! args)

§

vector-for-each
(vector-for-each args)

§

vector-length
(vector-length args)

§

vector-map
(vector-map args)

§

vector-push!
(vector-push! args)

§

vector-ref
(vector-ref args)

§

vector-set!
(vector-set! args)

§

vector-sort
(vector-sort args)

§

vector-sort!
(vector-sort! args)

§

vector-sort/comp
(vector-sort/comp args)

§

vector-sort/comp!
(vector-sort/comp! args)

§

vector?
(vector? args)

§

video
(video args)

§

wait-for
(wait-for args)

§

warning-box
(warning-box args)

§

wbr
(wbr args)

§

wiki-base-name
(wiki-base-name args)

§

wiki-data-path
(wiki-data-path args)

§

wiki-display-name
(wiki-display-name args)

§

wiki-file-name-match
(wiki-file-name-match args)

§

wiki-file-text-match
(wiki-file-text-match args)

§

wiki-file-uploaded
(wiki-file-uploaded args)

§

window-location-basename
(window-location-basename args)

§

window-location-basename-no-extension
(window-location-basename-no-extension args)

§

window-location-hash
(window-location-hash args)

§

window-location-host
(window-location-host args)

§

window-location-hostname
(window-location-hostname args)

§

window-location-href
(window-location-href args)

§

window-location-origin
(window-location-origin args)

§

window-location-password
(window-location-password args)

§

window-location-pathname
(window-location-pathname args)

§

window-location-port
(window-location-port args)

§

window-location-replace!
(window-location-replace! args)

§

window-location-search
(window-location-search args)

§

window-location-username
(window-location-username args)

§

window-object
(window-object args)

§

wire-button
(wire-button args)

§

wire-buttons
(wire-buttons args)

§

wire-change
(wire-change args)

§

wire-click
(wire-click args)

§

wire-submit-input
(wire-submit-input args)

§

wire-submit-inputs
(wire-submit-inputs args)

§

wire-text-input
(wire-text-input args)

§

wire-text-inputs
(wire-text-inputs args)

§

wire-ui
(wire-ui args)

§

with-output-to-port
(with-output-to-port args)

§

write
(write args)

§

write*
(write* args)

§

write-char
(write-char args)

§

write-data-url-to-internal-file
(write-data-url-to-internal-file args)

§

write-internal-file
(write-internal-file args)

§

write-internal-text-file
(write-internal-text-file args)

§

write-raw-internal-file
(write-raw-internal-file args)

§

write-to-clipboard!
(write-to-clipboard! args)

§

write-to-string
(write-to-string args)

§

write-with-shared-structure
(write-with-shared-structure args)

§

write/ss
(write/ss args)

§

youtube
(youtube args)

§

zero?
(zero? args)
