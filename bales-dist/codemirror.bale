{"codemirror/LICENSE-codemirror.md":"YGNvZGVtaXJyb3ItZXh0ZW5zaW9ucy5qc2AgaXMgY29weXJpZ2h0IDIwMTgtMjAyMCBieSBBbnRob255IFcuIEh1cnNoLCBhbmQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHNhbWUgTUlUIGxpY2Vuc2UgYXMgRnJvbmtlbnN0ZWVuIGFzIGEgd2hvbGUuCgpUaGUgZm9sbG93aW5nIGZpbGVzIGFyZSBjb3B5cmlnaHQgYnkgTWFyaWpuIEhhdmVyYmVrZSBhbmQgb3RoZXJzLCBhbmQgYXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgZm9sbG93aW5nIE1JVCBsaWNlbnNlLgoKYGBgCmNvZGVtaXJyb3IuanMKY29kZW1pcnJvci5jc3MKY3NzLmpzCmh0bWxtaXhlZC5qcwpqYXZhc2NyaXB0LmpzCm1hcmtkb3duLmpzCm1hdGNoYnJhY2tldHMuanMsc2NoZW1lLmpzCnhtbC5qcyAKYGBgCgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5Cm9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsCmluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMKdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbApjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMKZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCmFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksCkZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRQpBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSCkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sCk9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4KVEhFIFNPRlRXQVJFLgo=","codemirror/codemirror.css":"","codemirror/codemirror.js":"","codemirror/codemirror-extensions.js":"","codemirror/markdown.js":"","codemirror/scheme.js":"Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMKLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQoKLyoqCiAqIEF1dGhvcjogS29oIFppIEhhbiwgYmFzZWQgb24gaW1wbGVtZW50YXRpb24gYnkgS29oIFppIENodW4KICovCgooZnVuY3Rpb24obW9kKSB7CiAgaWYgKHR5cGVvZiBleHBvcnRzID09ICJvYmplY3QiICYmIHR5cGVvZiBtb2R1bGUgPT0gIm9iamVjdCIpIC8vIENvbW1vbkpTCiAgICBtb2QocmVxdWlyZSgiLi4vLi4vbGliL2NvZGVtaXJyb3IiKSk7CiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIC8vIEFNRAogICAgZGVmaW5lKFsiLi4vLi4vbGliL2NvZGVtaXJyb3IiXSwgbW9kKTsKICBlbHNlIC8vIFBsYWluIGJyb3dzZXIgZW52CiAgICBtb2QoQ29kZU1pcnJvcik7Cn0pKGZ1bmN0aW9uKENvZGVNaXJyb3IpIHsKInVzZSBzdHJpY3QiOwoKQ29kZU1pcnJvci5kZWZpbmVNb2RlKCJzY2hlbWUiLCBmdW5jdGlvbiAoKSB7CiAgICB2YXIgQlVJTFRJTiA9ICJidWlsdGluIiwgQ09NTUVOVCA9ICJjb21tZW50IiwgU1RSSU5HID0gInN0cmluZyIsCiAgICAgICAgQVRPTSA9ICJhdG9tIiwgTlVNQkVSID0gIm51bWJlciIsIEJSQUNLRVQgPSAiYnJhY2tldCI7CiAgICB2YXIgSU5ERU5UX1dPUkRfU0tJUCA9IDI7CgogICAgZnVuY3Rpb24gbWFrZUtleXdvcmRzKHN0cikgewogICAgICAgIHZhciBvYmogPSB7fSwgd29yZHMgPSBzdHIuc3BsaXQoIiAiKTsKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmRzLmxlbmd0aDsgKytpKSBvYmpbd29yZHNbaV1dID0gdHJ1ZTsKICAgICAgICByZXR1cm4gb2JqOwogICAgfQoKICAgIHZhciBrZXl3b3JkcyA9IG1ha2VLZXl3b3JkcygizrsgY2FzZS1sYW1iZGEgY2FsbC9jYyBjbGFzcyBkZWZpbmUtY2xhc3MgZXhpdC1oYW5kbGVyIGZpZWxkIGltcG9ydCBpbmhlcml0IGluaXQtZmllbGQgaW50ZXJmYWNlIGxldCotdmFsdWVzIGxldC12YWx1ZXMgbGV0L2VjIG1peGluIG9wdC1sYW1iZGEgb3ZlcnJpZGUgcHJvdGVjdCBwcm92aWRlIHB1YmxpYyByZW5hbWUgcmVxdWlyZSByZXF1aXJlLWZvci1zeW50YXggc3ludGF4IHN5bnRheC1jYXNlIHN5bnRheC1lcnJvciB1bml0L3NpZyB1bmxlc3Mgd2hlbiB3aXRoLXN5bnRheCBhbmQgYmVnaW4gY2FsbC13aXRoLWN1cnJlbnQtY29udGludWF0aW9uIGNhbGwtd2l0aC1pbnB1dC1maWxlIGNhbGwtd2l0aC1vdXRwdXQtZmlsZSBjYXNlIGNvbmQgZGVmaW5lIGRlZmluZS1zeW50YXggZGVsYXkgZG8gZHluYW1pYy13aW5kIGVsc2UgZm9yLWVhY2ggaWYgbGFtYmRhIGxldCBsZXQqIGxldC1zeW50YXggbGV0cmVjIGxldHJlYy1zeW50YXggbWFwIG9yIHN5bnRheC1ydWxlcyBhYnMgYWNvcyBhbmdsZSBhcHBlbmQgYXBwbHkgYXNpbiBhc3NvYyBhc3NxIGFzc3YgYXRhbiBib29sZWFuPyBjYWFyIGNhZHIgY2FsbC13aXRoLWlucHV0LWZpbGUgY2FsbC13aXRoLW91dHB1dC1maWxlIGNhbGwtd2l0aC12YWx1ZXMgY2FyIGNkZGRhciBjZGRkZHIgY2RyIGNlaWxpbmcgY2hhci0+aW50ZWdlciBjaGFyLWFscGhhYmV0aWM/IGNoYXItY2k8PT8gY2hhci1jaTw/IGNoYXItY2k9PyBjaGFyLWNpPj0/IGNoYXItY2k+PyBjaGFyLWRvd25jYXNlIGNoYXItbG93ZXItY2FzZT8gY2hhci1udW1lcmljPyBjaGFyLXJlYWR5PyBjaGFyLXVwY2FzZSBjaGFyLXVwcGVyLWNhc2U/IGNoYXItd2hpdGVzcGFjZT8gY2hhcjw9PyBjaGFyPD8gY2hhcj0/IGNoYXI+PT8gY2hhcj4/IGNoYXI/IGNsb3NlLWlucHV0LXBvcnQgY2xvc2Utb3V0cHV0LXBvcnQgY29tcGxleD8gY29ucyBjb3MgY3VycmVudC1pbnB1dC1wb3J0IGN1cnJlbnQtb3V0cHV0LXBvcnQgZGVub21pbmF0b3IgZGlzcGxheSBlb2Ytb2JqZWN0PyBlcT8gZXF1YWw/IGVxdj8gZXZhbCBldmVuPyBleGFjdC0+aW5leGFjdCBleGFjdD8gZXhwIGV4cHQgI2YgZmxvb3IgZm9yY2UgZ2NkIGltYWctcGFydCBpbmV4YWN0LT5leGFjdCBpbmV4YWN0PyBpbnB1dC1wb3J0PyBpbnRlZ2VyLT5jaGFyIGludGVnZXI/IGludGVyYWN0aW9uLWVudmlyb25tZW50IGxjbSBsZW5ndGggbGlzdCBsaXN0LT5zdHJpbmcgbGlzdC0+dmVjdG9yIGxpc3QtcmVmIGxpc3QtdGFpbCBsaXN0PyBsb2FkIGxvZyBtYWduaXR1ZGUgbWFrZS1wb2xhciBtYWtlLXJlY3Rhbmd1bGFyIG1ha2Utc3RyaW5nIG1ha2UtdmVjdG9yIG1heCBtZW1iZXIgbWVtcSBtZW12IG1pbiBtb2R1bG8gbmVnYXRpdmU/IG5ld2xpbmUgbm90IG51bGwtZW52aXJvbm1lbnQgbnVsbD8gbnVtYmVyLT5zdHJpbmcgbnVtYmVyPyBudW1lcmF0b3Igb2RkPyBvcGVuLWlucHV0LWZpbGUgb3Blbi1vdXRwdXQtZmlsZSBvdXRwdXQtcG9ydD8gcGFpcj8gcGVlay1jaGFyIHBvcnQ/IHBvc2l0aXZlPyBwcm9jZWR1cmU/IHF1YXNpcXVvdGUgcXVvdGUgcXVvdGllbnQgcmF0aW9uYWw/IHJhdGlvbmFsaXplIHJlYWQgcmVhZC1jaGFyIHJlYWwtcGFydCByZWFsPyByZW1haW5kZXIgcmV2ZXJzZSByb3VuZCBzY2hlbWUtcmVwb3J0LWVudmlyb25tZW50IHNldCEgc2V0LWNhciEgc2V0LWNkciEgc2luIHNxcnQgc3RyaW5nIHN0cmluZy0+bGlzdCBzdHJpbmctPm51bWJlciBzdHJpbmctPnN5bWJvbCBzdHJpbmctYXBwZW5kIHN0cmluZy1jaTw9PyBzdHJpbmctY2k8PyBzdHJpbmctY2k9PyBzdHJpbmctY2k+PT8gc3RyaW5nLWNpPj8gc3RyaW5nLWNvcHkgc3RyaW5nLWZpbGwhIHN0cmluZy1sZW5ndGggc3RyaW5nLXJlZiBzdHJpbmctc2V0ISBzdHJpbmc8PT8gc3RyaW5nPD8gc3RyaW5nPT8gc3RyaW5nPj0/IHN0cmluZz4/IHN0cmluZz8gc3Vic3RyaW5nIHN5bWJvbC0+c3RyaW5nIHN5bWJvbD8gI3QgdGFuIHRyYW5zY3JpcHQtb2ZmIHRyYW5zY3JpcHQtb24gdHJ1bmNhdGUgdmFsdWVzIHZlY3RvciB2ZWN0b3ItPmxpc3QgdmVjdG9yLWZpbGwhIHZlY3Rvci1sZW5ndGggdmVjdG9yLXJlZiB2ZWN0b3Itc2V0ISB3aXRoLWlucHV0LWZyb20tZmlsZSB3aXRoLW91dHB1dC10by1maWxlIHdyaXRlIHdyaXRlLWNoYXIgemVybz8iKTsKICAgIHZhciBpbmRlbnRLZXlzID0gbWFrZUtleXdvcmRzKCJkZWZpbmUgbGV0IGxldHJlYyBsZXQqIGxhbWJkYSIpOwoKICAgIGZ1bmN0aW9uIHN0YXRlU3RhY2soaW5kZW50LCB0eXBlLCBwcmV2KSB7IC8vIHJlcHJlc2VudHMgYSBzdGF0ZSBzdGFjayBvYmplY3QKICAgICAgICB0aGlzLmluZGVudCA9IGluZGVudDsKICAgICAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgICAgIHRoaXMucHJldiA9IHByZXY7CiAgICB9CgogICAgZnVuY3Rpb24gcHVzaFN0YWNrKHN0YXRlLCBpbmRlbnQsIHR5cGUpIHsKICAgICAgICBzdGF0ZS5pbmRlbnRTdGFjayA9IG5ldyBzdGF0ZVN0YWNrKGluZGVudCwgdHlwZSwgc3RhdGUuaW5kZW50U3RhY2spOwogICAgfQoKICAgIGZ1bmN0aW9uIHBvcFN0YWNrKHN0YXRlKSB7CiAgICAgICAgc3RhdGUuaW5kZW50U3RhY2sgPSBzdGF0ZS5pbmRlbnRTdGFjay5wcmV2OwogICAgfQoKICAgIHZhciBiaW5hcnlNYXRjaGVyID0gbmV3IFJlZ0V4cCgvXig/OlstK11pfFstK11bMDFdKyMqKD86XC9bMDFdKyMqKT9pfFstK10/WzAxXSsjKig/OlwvWzAxXSsjKik/QFstK10/WzAxXSsjKig/OlwvWzAxXSsjKik/fFstK10/WzAxXSsjKig/OlwvWzAxXSsjKik/Wy0rXSg/OlswMV0rIyooPzpcL1swMV0rIyopPyk/aXxbLStdP1swMV0rIyooPzpcL1swMV0rIyopPykoPz1bKClcczsiXXwkKS9pKTsKICAgIHZhciBvY3RhbE1hdGNoZXIgPSBuZXcgUmVnRXhwKC9eKD86Wy0rXWl8Wy0rXVswLTddKyMqKD86XC9bMC03XSsjKik/aXxbLStdP1swLTddKyMqKD86XC9bMC03XSsjKik/QFstK10/WzAtN10rIyooPzpcL1swLTddKyMqKT98Wy0rXT9bMC03XSsjKig/OlwvWzAtN10rIyopP1stK10oPzpbMC03XSsjKig/OlwvWzAtN10rIyopPyk/aXxbLStdP1swLTddKyMqKD86XC9bMC03XSsjKik/KSg/PVsoKVxzOyJdfCQpL2kpOwogICAgdmFyIGhleE1hdGNoZXIgPSBuZXcgUmVnRXhwKC9eKD86Wy0rXWl8Wy0rXVtcZGEtZl0rIyooPzpcL1tcZGEtZl0rIyopP2l8Wy0rXT9bXGRhLWZdKyMqKD86XC9bXGRhLWZdKyMqKT9AWy0rXT9bXGRhLWZdKyMqKD86XC9bXGRhLWZdKyMqKT98Wy0rXT9bXGRhLWZdKyMqKD86XC9bXGRhLWZdKyMqKT9bLStdKD86W1xkYS1mXSsjKig/OlwvW1xkYS1mXSsjKik/KT9pfFstK10/W1xkYS1mXSsjKig/OlwvW1xkYS1mXSsjKik/KSg/PVsoKVxzOyJdfCQpL2kpOwogICAgdmFyIGRlY2ltYWxNYXRjaGVyID0gbmV3IFJlZ0V4cCgvXig/OlstK11pfFstK10oPzooPzooPzpcZCsjK1wuPyMqfFxkK1wuXGQqIyp8XC5cZCsjKnxcZCspKD86W2VzZmRsXVstK10/XGQrKT8pfFxkKyMqXC9cZCsjKilpfFstK10/KD86KD86KD86XGQrIytcLj8jKnxcZCtcLlxkKiMqfFwuXGQrIyp8XGQrKSg/Oltlc2ZkbF1bLStdP1xkKyk/KXxcZCsjKlwvXGQrIyopQFstK10/KD86KD86KD86XGQrIytcLj8jKnxcZCtcLlxkKiMqfFwuXGQrIyp8XGQrKSg/Oltlc2ZkbF1bLStdP1xkKyk/KXxcZCsjKlwvXGQrIyopfFstK10/KD86KD86KD86XGQrIytcLj8jKnxcZCtcLlxkKiMqfFwuXGQrIyp8XGQrKSg/Oltlc2ZkbF1bLStdP1xkKyk/KXxcZCsjKlwvXGQrIyopWy0rXSg/Oig/Oig/OlxkKyMrXC4/Iyp8XGQrXC5cZCojKnxcLlxkKyMqfFxkKykoPzpbZXNmZGxdWy0rXT9cZCspPyl8XGQrIypcL1xkKyMqKT9pfCg/Oig/Oig/OlxkKyMrXC4/Iyp8XGQrXC5cZCojKnxcLlxkKyMqfFxkKykoPzpbZXNmZGxdWy0rXT9cZCspPyl8XGQrIypcL1xkKyMqKSkoPz1bKClcczsiXXwkKS9pKTsKCiAgICBmdW5jdGlvbiBpc0JpbmFyeU51bWJlciAoc3RyZWFtKSB7CiAgICAgICAgcmV0dXJuIHN0cmVhbS5tYXRjaChiaW5hcnlNYXRjaGVyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBpc09jdGFsTnVtYmVyIChzdHJlYW0pIHsKICAgICAgICByZXR1cm4gc3RyZWFtLm1hdGNoKG9jdGFsTWF0Y2hlcik7CiAgICB9CgogICAgZnVuY3Rpb24gaXNEZWNpbWFsTnVtYmVyIChzdHJlYW0sIGJhY2t1cCkgewogICAgICAgIGlmIChiYWNrdXAgPT09IHRydWUpIHsKICAgICAgICAgICAgc3RyZWFtLmJhY2tVcCgxKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHN0cmVhbS5tYXRjaChkZWNpbWFsTWF0Y2hlcik7CiAgICB9CgogICAgZnVuY3Rpb24gaXNIZXhOdW1iZXIgKHN0cmVhbSkgewogICAgICAgIHJldHVybiBzdHJlYW0ubWF0Y2goaGV4TWF0Y2hlcik7CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgICBzdGFydFN0YXRlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBpbmRlbnRTdGFjazogbnVsbCwKICAgICAgICAgICAgICAgIGluZGVudGF0aW9uOiAwLAogICAgICAgICAgICAgICAgbW9kZTogZmFsc2UsCiAgICAgICAgICAgICAgICBzRXhwckNvbW1lbnQ6IGZhbHNlLAogICAgICAgICAgICAgICAgc0V4cHJRdW90ZTogZmFsc2UKICAgICAgICAgICAgfTsKICAgICAgICB9LAoKICAgICAgICB0b2tlbjogZnVuY3Rpb24gKHN0cmVhbSwgc3RhdGUpIHsKICAgICAgICAgICAgaWYgKHN0YXRlLmluZGVudFN0YWNrID09IG51bGwgJiYgc3RyZWFtLnNvbCgpKSB7CiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgaW5kZW50YXRpb24sIGJ1dCBvbmx5IGlmIGluZGVudFN0YWNrIGlzIGVtcHR5CiAgICAgICAgICAgICAgICBzdGF0ZS5pbmRlbnRhdGlvbiA9IHN0cmVhbS5pbmRlbnRhdGlvbigpOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyBza2lwIHNwYWNlcwogICAgICAgICAgICBpZiAoc3RyZWFtLmVhdFNwYWNlKCkpIHsKICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciByZXR1cm5UeXBlID0gbnVsbDsKCiAgICAgICAgICAgIHN3aXRjaChzdGF0ZS5tb2RlKXsKICAgICAgICAgICAgICAgIGNhc2UgInN0cmluZyI6IC8vIG11bHRpLWxpbmUgc3RyaW5nIHBhcnNpbmcgbW9kZQogICAgICAgICAgICAgICAgICAgIHZhciBuZXh0LCBlc2NhcGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PSAiXCIiICYmICFlc2NhcGVkKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gIlxcIjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IFNUUklORzsgLy8gY29udGludWUgb24gaW4gc2NoZW1lLXN0cmluZyBtb2RlCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJjb21tZW50IjogLy8gY29tbWVudCBwYXJzaW5nIG1vZGUKICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCwgbWF5YmVFbmQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKG5leHQgPSBzdHJlYW0ubmV4dCgpKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0ID09ICIjIiAmJiBtYXliZUVuZCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlRW5kID0gKG5leHQgPT0gInwiKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IENPTU1FTlQ7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlICJzLWV4cHItY29tbWVudCI6IC8vIHMtZXhwciBjb21tZW50aW5nIG1vZGUKICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgaWYoc3RyZWFtLnBlZWsoKSA9PSAiKCIgfHwgc3RyZWFtLnBlZWsoKSA9PSAiWyIpewogICAgICAgICAgICAgICAgICAgICAgICAvLyBhY3R1YWxseSBzdGFydCBzY2hlbWUgcy1leHByIGNvbW1lbnRpbmcgbW9kZQogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zRXhwckNvbW1lbnQgPSAwOwogICAgICAgICAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3Qgd2UganVzdCBjb21tZW50IHRoZSBlbnRpcmUgb2YgdGhlIG5leHQgdG9rZW4KICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXlxzXChcKVxbXF1dLyk7IC8vIGVhdCBzeW1ib2wgYXRvbQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gQ09NTUVOVDsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZGVmYXVsdDogLy8gZGVmYXVsdCBwYXJzaW5nIG1vZGUKICAgICAgICAgICAgICAgICAgICB2YXIgY2ggPSBzdHJlYW0ubmV4dCgpOwoKICAgICAgICAgICAgICAgICAgICBpZiAoY2ggPT0gIlwiIikgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gInN0cmluZyI7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBTVFJJTkc7CgogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gIiciKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0ucGVlaygpID09ICIoIiB8fCBzdHJlYW0ucGVlaygpID09ICJbIil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlLnNFeHByUXVvdGUgIT0gIm51bWJlciIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zRXhwclF1b3RlID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy8gZWxzZSBhbHJlYWR5IGluIGEgcXVvdGVkIGV4cHJlc3Npb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBBVE9NOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXHdfXC0hJCUmKitcLlwvOjw9Pj9AXF5+XS8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IEFUT007CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoID09ICcjJykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RyZWFtLmVhdCgifCIpKSB7ICAgICAgICAgICAgICAgICAgICAvLyBNdWx0aS1saW5lIGNvbW1lbnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLm1vZGUgPSAiY29tbWVudCI7IC8vIHRvZ2dsZSB0byBjb21tZW50IG1vZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBDT01NRU5UOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5lYXQoL1t0Zl0vaSkpIHsgICAgICAgICAgICAvLyAjdC8jZiAoYXRvbSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBBVE9NOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5lYXQoJzsnKSkgeyAgICAgICAgICAgICAgICAvLyBTLUV4cHIgY29tbWVudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9ICJzLWV4cHItY29tbWVudCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gQ09NTUVOVDsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudW1UZXN0ID0gbnVsbCwgaGFzRXhhY3RuZXNzID0gZmFsc2UsIGhhc1JhZGl4ID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0uZWF0KC9bZWldL2kpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXhhY3RuZXNzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmJhY2tVcCgxKTsgICAgICAgLy8gbXVzdCBiZSByYWRpeCBzcGVjaWZpZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0ubWF0Y2goL14jYi9pKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVRlc3QgPSBpc0JpbmFyeU51bWJlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eI28vaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1UZXN0ID0gaXNPY3RhbE51bWJlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eI3gvaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1UZXN0ID0gaXNIZXhOdW1iZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0cmVhbS5tYXRjaCgvXiNkL2kpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtVGVzdCA9IGlzRGVjaW1hbE51bWJlcjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyZWFtLm1hdGNoKC9eWy0rMC05Ll0vLCBmYWxzZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNSYWRpeCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bVRlc3QgPSBpc0RlY2ltYWxOdW1iZXI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZS1jb25zdW1lIHRoZSBpbnRpYWwgIyBpZiBhbGwgbWF0Y2hlcyBmYWlsZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWhhc0V4YWN0bmVzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVhbS5lYXQoJyMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudW1UZXN0ICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUmFkaXggJiYgIWhhc0V4YWN0bmVzcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdW1lIG9wdGlvbmFsIGV4YWN0bmVzcyBhZnRlciByYWRpeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0ubWF0Y2goL14jW2VpXS9pKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bVRlc3Qoc3RyZWFtKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IE5VTUJFUjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoL15bLSswLTkuXS8udGVzdChjaCkgJiYgaXNEZWNpbWFsTnVtYmVyKHN0cmVhbSwgdHJ1ZSkpIHsgLy8gbWF0Y2ggbm9uLXByZWZpeGVkIG51bWJlciwgbXVzdCBiZSBkZWNpbWFsCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBOVU1CRVI7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjaCA9PSAiOyIpIHsgLy8gY29tbWVudAogICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uc2tpcFRvRW5kKCk7IC8vIHJlc3Qgb2YgdGhlIGxpbmUgaXMgYSBjb21tZW50CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBDT01NRU5UOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gIigiIHx8IGNoID09ICJbIikgewogICAgICAgICAgICAgICAgICAgICAgdmFyIGtleVdvcmQgPSAnJzsgdmFyIGluZGVudFRlbXAgPSBzdHJlYW0uY29sdW1uKCksIGxldHRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgIEVpdGhlcgogICAgICAgICAgICAgICAgICAgICAgICAoaW5kZW50LXdvcmQgLi4KICAgICAgICAgICAgICAgICAgICAgICAgKG5vbi1pbmRlbnQtd29yZCAuLgogICAgICAgICAgICAgICAgICAgICAgICAoO3NvbWV0aGluZyBlbHNlLCBicmFja2V0LCBldGMuCiAgICAgICAgICAgICAgICAgICAgICAgICovCgogICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoKGxldHRlciA9IHN0cmVhbS5lYXQoL1teXHNcKFxbXDtcKVxdXS8pKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlXb3JkICs9IGxldHRlcjsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleVdvcmQubGVuZ3RoID4gMCAmJiBpbmRlbnRLZXlzLnByb3BlcnR5SXNFbnVtZXJhYmxlKGtleVdvcmQpKSB7IC8vIGluZGVudC13b3JkCgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFN0YWNrKHN0YXRlLCBpbmRlbnRUZW1wICsgSU5ERU5UX1dPUkRfU0tJUCwgY2gpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyAvLyBub24taW5kZW50IHdvcmQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGNvbnRpbnVlIGVhdGluZyB0aGUgc3BhY2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlYW0uZWF0U3BhY2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJlYW0uZW9sKCkgfHwgc3RyZWFtLnBlZWsoKSA9PSAiOyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBub3RoaW5nIHNpZ25pZmljYW50IGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgcmVzdGFydCBpbmRlbnRhdGlvbiAxIHNwYWNlIGFmdGVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHVzaFN0YWNrKHN0YXRlLCBpbmRlbnRUZW1wICsgMSwgY2gpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXNoU3RhY2soc3RhdGUsIGluZGVudFRlbXAgKyBzdHJlYW0uY3VycmVudCgpLmxlbmd0aCwgY2gpOyAvLyBlbHNlIHdlIG1hdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmJhY2tVcChzdHJlYW0uY3VycmVudCgpLmxlbmd0aCAtIDEpOyAvLyB1bmRvIGFsbCB0aGUgZWF0aW5nCgogICAgICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2Ygc3RhdGUuc0V4cHJDb21tZW50ID09ICJudW1iZXIiKSBzdGF0ZS5zRXhwckNvbW1lbnQrKzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHN0YXRlLnNFeHByUXVvdGUgPT0gIm51bWJlciIpIHN0YXRlLnNFeHByUXVvdGUrKzsKCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblR5cGUgPSBCUkFDS0VUOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2ggPT0gIikiIHx8IGNoID09ICJdIikgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gQlJBQ0tFVDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlLmluZGVudFN0YWNrICE9IG51bGwgJiYgc3RhdGUuaW5kZW50U3RhY2sudHlwZSA9PSAoY2ggPT0gIikiID8gIigiIDogIlsiKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9wU3RhY2soc3RhdGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBzdGF0ZS5zRXhwckNvbW1lbnQgPT0gIm51bWJlciIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKC0tc3RhdGUuc0V4cHJDb21tZW50ID09IDApewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gQ09NTUVOVDsgLy8gZmluYWwgY2xvc2luZyBicmFja2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLnNFeHByQ29tbWVudCA9IGZhbHNlOyAvLyB0dXJuIG9mZiBzLWV4cHIgY29tbWVudGluZyBtb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIHN0YXRlLnNFeHByUXVvdGUgPT0gIm51bWJlciIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKC0tc3RhdGUuc0V4cHJRdW90ZSA9PSAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVHlwZSA9IEFUT007IC8vIGZpbmFsIGNsb3NpbmcgYnJhY2tldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5zRXhwclF1b3RlID0gZmFsc2U7IC8vIHR1cm4gb2ZmIHMtZXhwciBxdW90ZSBtb2RlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RyZWFtLmVhdFdoaWxlKC9bXHdfXC0hJCUmKitcLlwvOjw9Pj9AXF5+XS8pOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtleXdvcmRzICYmIGtleXdvcmRzLnByb3BlcnR5SXNFbnVtZXJhYmxlKHN0cmVhbS5jdXJyZW50KCkpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UeXBlID0gQlVJTFRJTjsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHJldHVyblR5cGUgPSAidmFyaWFibGUiOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gKHR5cGVvZiBzdGF0ZS5zRXhwckNvbW1lbnQgPT0gIm51bWJlciIpID8gQ09NTUVOVCA6ICgodHlwZW9mIHN0YXRlLnNFeHByUXVvdGUgPT0gIm51bWJlciIpID8gQVRPTSA6IHJldHVyblR5cGUpOwogICAgICAgIH0sCgogICAgICAgIGluZGVudDogZnVuY3Rpb24gKHN0YXRlKSB7CiAgICAgICAgICAgIGlmIChzdGF0ZS5pbmRlbnRTdGFjayA9PSBudWxsKSByZXR1cm4gc3RhdGUuaW5kZW50YXRpb247CiAgICAgICAgICAgIHJldHVybiBzdGF0ZS5pbmRlbnRTdGFjay5pbmRlbnQ7CiAgICAgICAgfSwKCiAgICAgICAgY2xvc2VCcmFja2V0czoge3BhaXJzOiAiKClbXXt9XCJcIiJ9LAogICAgICAgIGxpbmVDb21tZW50OiAiOzsiCiAgICB9Owp9KTsKCkNvZGVNaXJyb3IuZGVmaW5lTUlNRSgidGV4dC94LXNjaGVtZSIsICJzY2hlbWUiKTsKCn0pOwo=","codemirror/matchbrackets.js":"Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMKLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQoKKGZ1bmN0aW9uKG1vZCkgewogIGlmICh0eXBlb2YgZXhwb3J0cyA9PSAib2JqZWN0IiAmJiB0eXBlb2YgbW9kdWxlID09ICJvYmplY3QiKSAvLyBDb21tb25KUwogICAgbW9kKHJlcXVpcmUoIi4uLy4uL2xpYi9jb2RlbWlycm9yIikpOwogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQKICAgIGRlZmluZShbIi4uLy4uL2xpYi9jb2RlbWlycm9yIl0sIG1vZCk7CiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudgogICAgbW9kKENvZGVNaXJyb3IpOwp9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7CiAgdmFyIGllX2x0OCA9IC9NU0lFIFxkLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmCiAgICAoZG9jdW1lbnQuZG9jdW1lbnRNb2RlID09IG51bGwgfHwgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDwgOCk7CgogIHZhciBQb3MgPSBDb2RlTWlycm9yLlBvczsKCiAgdmFyIG1hdGNoaW5nID0geyIoIjogIik+IiwgIikiOiAiKDwiLCAiWyI6ICJdPiIsICJdIjogIls8IiwgInsiOiAifT4iLCAifSI6ICJ7PCIsICI8IjogIj4+IiwgIj4iOiAiPDwifTsKCiAgZnVuY3Rpb24gYnJhY2tldFJlZ2V4KGNvbmZpZykgewogICAgcmV0dXJuIGNvbmZpZyAmJiBjb25maWcuYnJhY2tldFJlZ2V4IHx8IC9bKCl7fVtcXV0vCiAgfQoKICBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdCcmFja2V0KGNtLCB3aGVyZSwgY29uZmlnKSB7CiAgICB2YXIgbGluZSA9IGNtLmdldExpbmVIYW5kbGUod2hlcmUubGluZSksIHBvcyA9IHdoZXJlLmNoIC0gMTsKICAgIHZhciBhZnRlckN1cnNvciA9IGNvbmZpZyAmJiBjb25maWcuYWZ0ZXJDdXJzb3IKICAgIGlmIChhZnRlckN1cnNvciA9PSBudWxsKQogICAgICBhZnRlckN1cnNvciA9IC8oXnwgKWNtLWZhdC1jdXJzb3IoJHwgKS8udGVzdChjbS5nZXRXcmFwcGVyRWxlbWVudCgpLmNsYXNzTmFtZSkKICAgIHZhciByZSA9IGJyYWNrZXRSZWdleChjb25maWcpCgogICAgLy8gQSBjdXJzb3IgaXMgZGVmaW5lZCBhcyBiZXR3ZWVuIHR3byBjaGFyYWN0ZXJzLCBidXQgaW4gaW4gdmltIGNvbW1hbmQgbW9kZQogICAgLy8gKGkuZS4gbm90IGluc2VydCBtb2RlKSwgdGhlIGN1cnNvciBpcyB2aXN1YWxseSByZXByZXNlbnRlZCBhcyBhCiAgICAvLyBoaWdobGlnaHRlZCBib3ggb24gdG9wIG9mIHRoZSAybmQgY2hhcmFjdGVyLiBPdGhlcndpc2UsIHdlIGFsbG93IG1hdGNoZXMKICAgIC8vIGZyb20gYmVmb3JlIG9yIGFmdGVyIHRoZSBjdXJzb3IuCiAgICB2YXIgbWF0Y2ggPSAoIWFmdGVyQ3Vyc29yICYmIHBvcyA+PSAwICYmIHJlLnRlc3QobGluZS50ZXh0LmNoYXJBdChwb3MpKSAmJiBtYXRjaGluZ1tsaW5lLnRleHQuY2hhckF0KHBvcyldKSB8fAogICAgICAgIHJlLnRlc3QobGluZS50ZXh0LmNoYXJBdChwb3MgKyAxKSkgJiYgbWF0Y2hpbmdbbGluZS50ZXh0LmNoYXJBdCgrK3BvcyldOwogICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7CiAgICB2YXIgZGlyID0gbWF0Y2guY2hhckF0KDEpID09ICI+IiA/IDEgOiAtMTsKICAgIGlmIChjb25maWcgJiYgY29uZmlnLnN0cmljdCAmJiAoZGlyID4gMCkgIT0gKHBvcyA9PSB3aGVyZS5jaCkpIHJldHVybiBudWxsOwogICAgdmFyIHN0eWxlID0gY20uZ2V0VG9rZW5UeXBlQXQoUG9zKHdoZXJlLmxpbmUsIHBvcyArIDEpKTsKCiAgICB2YXIgZm91bmQgPSBzY2FuRm9yQnJhY2tldChjbSwgUG9zKHdoZXJlLmxpbmUsIHBvcyArIChkaXIgPiAwID8gMSA6IDApKSwgZGlyLCBzdHlsZSB8fCBudWxsLCBjb25maWcpOwogICAgaWYgKGZvdW5kID09IG51bGwpIHJldHVybiBudWxsOwogICAgcmV0dXJuIHtmcm9tOiBQb3Mod2hlcmUubGluZSwgcG9zKSwgdG86IGZvdW5kICYmIGZvdW5kLnBvcywKICAgICAgICAgICAgbWF0Y2g6IGZvdW5kICYmIGZvdW5kLmNoID09IG1hdGNoLmNoYXJBdCgwKSwgZm9yd2FyZDogZGlyID4gMH07CiAgfQoKICAvLyBicmFja2V0UmVnZXggaXMgdXNlZCB0byBzcGVjaWZ5IHdoaWNoIHR5cGUgb2YgYnJhY2tldCB0byBzY2FuCiAgLy8gc2hvdWxkIGJlIGEgcmVnZXhwLCBlLmcuIC9bW1xdXS8KICAvLwogIC8vIE5vdGU6IElmICJ3aGVyZSIgaXMgb24gYW4gb3BlbiBicmFja2V0LCB0aGVuIHRoaXMgYnJhY2tldCBpcyBpZ25vcmVkLgogIC8vCiAgLy8gUmV0dXJucyBmYWxzZSB3aGVuIG5vIGJyYWNrZXQgd2FzIGZvdW5kLCBudWxsIHdoZW4gaXQgcmVhY2hlZAogIC8vIG1heFNjYW5MaW5lcyBhbmQgZ2F2ZSB1cAogIGZ1bmN0aW9uIHNjYW5Gb3JCcmFja2V0KGNtLCB3aGVyZSwgZGlyLCBzdHlsZSwgY29uZmlnKSB7CiAgICB2YXIgbWF4U2NhbkxlbiA9IChjb25maWcgJiYgY29uZmlnLm1heFNjYW5MaW5lTGVuZ3RoKSB8fCAxMDAwMDsKICAgIHZhciBtYXhTY2FuTGluZXMgPSAoY29uZmlnICYmIGNvbmZpZy5tYXhTY2FuTGluZXMpIHx8IDEwMDA7CgogICAgdmFyIHN0YWNrID0gW107CiAgICB2YXIgcmUgPSBicmFja2V0UmVnZXgoY29uZmlnKQogICAgdmFyIGxpbmVFbmQgPSBkaXIgPiAwID8gTWF0aC5taW4od2hlcmUubGluZSArIG1heFNjYW5MaW5lcywgY20ubGFzdExpbmUoKSArIDEpCiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBNYXRoLm1heChjbS5maXJzdExpbmUoKSAtIDEsIHdoZXJlLmxpbmUgLSBtYXhTY2FuTGluZXMpOwogICAgZm9yICh2YXIgbGluZU5vID0gd2hlcmUubGluZTsgbGluZU5vICE9IGxpbmVFbmQ7IGxpbmVObyArPSBkaXIpIHsKICAgICAgdmFyIGxpbmUgPSBjbS5nZXRMaW5lKGxpbmVObyk7CiAgICAgIGlmICghbGluZSkgY29udGludWU7CiAgICAgIHZhciBwb3MgPSBkaXIgPiAwID8gMCA6IGxpbmUubGVuZ3RoIC0gMSwgZW5kID0gZGlyID4gMCA/IGxpbmUubGVuZ3RoIDogLTE7CiAgICAgIGlmIChsaW5lLmxlbmd0aCA+IG1heFNjYW5MZW4pIGNvbnRpbnVlOwogICAgICBpZiAobGluZU5vID09IHdoZXJlLmxpbmUpIHBvcyA9IHdoZXJlLmNoIC0gKGRpciA8IDAgPyAxIDogMCk7CiAgICAgIGZvciAoOyBwb3MgIT0gZW5kOyBwb3MgKz0gZGlyKSB7CiAgICAgICAgdmFyIGNoID0gbGluZS5jaGFyQXQocG9zKTsKICAgICAgICBpZiAocmUudGVzdChjaCkgJiYgKHN0eWxlID09PSB1bmRlZmluZWQgfHwgY20uZ2V0VG9rZW5UeXBlQXQoUG9zKGxpbmVObywgcG9zICsgMSkpID09IHN0eWxlKSkgewogICAgICAgICAgdmFyIG1hdGNoID0gbWF0Y2hpbmdbY2hdOwogICAgICAgICAgaWYgKG1hdGNoICYmIChtYXRjaC5jaGFyQXQoMSkgPT0gIj4iKSA9PSAoZGlyID4gMCkpIHN0YWNrLnB1c2goY2gpOwogICAgICAgICAgZWxzZSBpZiAoIXN0YWNrLmxlbmd0aCkgcmV0dXJuIHtwb3M6IFBvcyhsaW5lTm8sIHBvcyksIGNoOiBjaH07CiAgICAgICAgICBlbHNlIHN0YWNrLnBvcCgpOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgcmV0dXJuIGxpbmVObyAtIGRpciA9PSAoZGlyID4gMCA/IGNtLmxhc3RMaW5lKCkgOiBjbS5maXJzdExpbmUoKSkgPyBmYWxzZSA6IG51bGw7CiAgfQoKICBmdW5jdGlvbiBtYXRjaEJyYWNrZXRzKGNtLCBhdXRvY2xlYXIsIGNvbmZpZykgewogICAgLy8gRGlzYWJsZSBicmFjZSBtYXRjaGluZyBpbiBsb25nIGxpbmVzLCBzaW5jZSBpdCdsbCBjYXVzZSBodWdlbHkgc2xvdyB1cGRhdGVzCiAgICB2YXIgbWF4SGlnaGxpZ2h0TGVuID0gY20uc3RhdGUubWF0Y2hCcmFja2V0cy5tYXhIaWdobGlnaHRMaW5lTGVuZ3RoIHx8IDEwMDA7CiAgICB2YXIgbWFya3MgPSBbXSwgcmFuZ2VzID0gY20ubGlzdFNlbGVjdGlvbnMoKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmFuZ2VzLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBtYXRjaCA9IHJhbmdlc1tpXS5lbXB0eSgpICYmIGZpbmRNYXRjaGluZ0JyYWNrZXQoY20sIHJhbmdlc1tpXS5oZWFkLCBjb25maWcpOwogICAgICBpZiAobWF0Y2ggJiYgY20uZ2V0TGluZShtYXRjaC5mcm9tLmxpbmUpLmxlbmd0aCA8PSBtYXhIaWdobGlnaHRMZW4pIHsKICAgICAgICB2YXIgc3R5bGUgPSBtYXRjaC5tYXRjaCA/ICJDb2RlTWlycm9yLW1hdGNoaW5nYnJhY2tldCIgOiAiQ29kZU1pcnJvci1ub25tYXRjaGluZ2JyYWNrZXQiOwogICAgICAgIG1hcmtzLnB1c2goY20ubWFya1RleHQobWF0Y2guZnJvbSwgUG9zKG1hdGNoLmZyb20ubGluZSwgbWF0Y2guZnJvbS5jaCArIDEpLCB7Y2xhc3NOYW1lOiBzdHlsZX0pKTsKICAgICAgICBpZiAobWF0Y2gudG8gJiYgY20uZ2V0TGluZShtYXRjaC50by5saW5lKS5sZW5ndGggPD0gbWF4SGlnaGxpZ2h0TGVuKQogICAgICAgICAgbWFya3MucHVzaChjbS5tYXJrVGV4dChtYXRjaC50bywgUG9zKG1hdGNoLnRvLmxpbmUsIG1hdGNoLnRvLmNoICsgMSksIHtjbGFzc05hbWU6IHN0eWxlfSkpOwogICAgICB9CiAgICB9CgogICAgaWYgKG1hcmtzLmxlbmd0aCkgewogICAgICAvLyBLbHVkZ2UgdG8gd29yayBhcm91bmQgdGhlIElFIGJ1ZyBmcm9tIGlzc3VlICMxMTkzLCB3aGVyZSB0ZXh0CiAgICAgIC8vIGlucHV0IHN0b3BzIGdvaW5nIHRvIHRoZSB0ZXh0YXJlIHdoZXZlciB0aGlzIGZpcmVzLgogICAgICBpZiAoaWVfbHQ4ICYmIGNtLnN0YXRlLmZvY3VzZWQpIGNtLmZvY3VzKCk7CgogICAgICB2YXIgY2xlYXIgPSBmdW5jdGlvbigpIHsKICAgICAgICBjbS5vcGVyYXRpb24oZnVuY3Rpb24oKSB7CiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1hcmtzLmxlbmd0aDsgaSsrKSBtYXJrc1tpXS5jbGVhcigpOwogICAgICAgIH0pOwogICAgICB9OwogICAgICBpZiAoYXV0b2NsZWFyKSBzZXRUaW1lb3V0KGNsZWFyLCA4MDApOwogICAgICBlbHNlIHJldHVybiBjbGVhcjsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGRvTWF0Y2hCcmFja2V0cyhjbSkgewogICAgY20ub3BlcmF0aW9uKGZ1bmN0aW9uKCkgewogICAgICBpZiAoY20uc3RhdGUubWF0Y2hCcmFja2V0cy5jdXJyZW50bHlIaWdobGlnaHRlZCkgewogICAgICAgIGNtLnN0YXRlLm1hdGNoQnJhY2tldHMuY3VycmVudGx5SGlnaGxpZ2h0ZWQoKTsKICAgICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzLmN1cnJlbnRseUhpZ2hsaWdodGVkID0gbnVsbDsKICAgICAgfQogICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzLmN1cnJlbnRseUhpZ2hsaWdodGVkID0gbWF0Y2hCcmFja2V0cyhjbSwgZmFsc2UsIGNtLnN0YXRlLm1hdGNoQnJhY2tldHMpOwogICAgfSk7CiAgfQoKICBDb2RlTWlycm9yLmRlZmluZU9wdGlvbigibWF0Y2hCcmFja2V0cyIsIGZhbHNlLCBmdW5jdGlvbihjbSwgdmFsLCBvbGQpIHsKICAgIGlmIChvbGQgJiYgb2xkICE9IENvZGVNaXJyb3IuSW5pdCkgewogICAgICBjbS5vZmYoImN1cnNvckFjdGl2aXR5IiwgZG9NYXRjaEJyYWNrZXRzKTsKICAgICAgaWYgKGNtLnN0YXRlLm1hdGNoQnJhY2tldHMgJiYgY20uc3RhdGUubWF0Y2hCcmFja2V0cy5jdXJyZW50bHlIaWdobGlnaHRlZCkgewogICAgICAgIGNtLnN0YXRlLm1hdGNoQnJhY2tldHMuY3VycmVudGx5SGlnaGxpZ2h0ZWQoKTsKICAgICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzLmN1cnJlbnRseUhpZ2hsaWdodGVkID0gbnVsbDsKICAgICAgfQogICAgfQogICAgaWYgKHZhbCkgewogICAgICBjbS5zdGF0ZS5tYXRjaEJyYWNrZXRzID0gdHlwZW9mIHZhbCA9PSAib2JqZWN0IiA/IHZhbCA6IHt9OwogICAgICBjbS5vbigiY3Vyc29yQWN0aXZpdHkiLCBkb01hdGNoQnJhY2tldHMpOwogICAgfQogIH0pOwoKICBDb2RlTWlycm9yLmRlZmluZUV4dGVuc2lvbigibWF0Y2hCcmFja2V0cyIsIGZ1bmN0aW9uKCkge21hdGNoQnJhY2tldHModGhpcywgdHJ1ZSk7fSk7CiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oImZpbmRNYXRjaGluZ0JyYWNrZXQiLCBmdW5jdGlvbihwb3MsIGNvbmZpZywgb2xkQ29uZmlnKXsKICAgIC8vIEJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGtsdWRnZQogICAgaWYgKG9sZENvbmZpZyB8fCB0eXBlb2YgY29uZmlnID09ICJib29sZWFuIikgewogICAgICBpZiAoIW9sZENvbmZpZykgewogICAgICAgIGNvbmZpZyA9IGNvbmZpZyA/IHtzdHJpY3Q6IHRydWV9IDogbnVsbAogICAgICB9IGVsc2UgewogICAgICAgIG9sZENvbmZpZy5zdHJpY3QgPSBjb25maWcKICAgICAgICBjb25maWcgPSBvbGRDb25maWcKICAgICAgfQogICAgfQogICAgcmV0dXJuIGZpbmRNYXRjaGluZ0JyYWNrZXQodGhpcywgcG9zLCBjb25maWcpCiAgfSk7CiAgQ29kZU1pcnJvci5kZWZpbmVFeHRlbnNpb24oInNjYW5Gb3JCcmFja2V0IiwgZnVuY3Rpb24ocG9zLCBkaXIsIHN0eWxlLCBjb25maWcpewogICAgcmV0dXJuIHNjYW5Gb3JCcmFja2V0KHRoaXMsIHBvcywgZGlyLCBzdHlsZSwgY29uZmlnKTsKICB9KTsKfSk7Cg==","codemirror/javascript.js":"Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMKLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQoKKGZ1bmN0aW9uKG1vZCkgewogIGlmICh0eXBlb2YgZXhwb3J0cyA9PSAib2JqZWN0IiAmJiB0eXBlb2YgbW9kdWxlID09ICJvYmplY3QiKSAvLyBDb21tb25KUwogICAgbW9kKHJlcXVpcmUoIi4uLy4uL2xpYi9jb2RlbWlycm9yIikpOwogIGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT0gImZ1bmN0aW9uIiAmJiBkZWZpbmUuYW1kKSAvLyBBTUQKICAgIGRlZmluZShbIi4uLy4uL2xpYi9jb2RlbWlycm9yIl0sIG1vZCk7CiAgZWxzZSAvLyBQbGFpbiBicm93c2VyIGVudgogICAgbW9kKENvZGVNaXJyb3IpOwp9KShmdW5jdGlvbihDb2RlTWlycm9yKSB7CiJ1c2Ugc3RyaWN0IjsKCkNvZGVNaXJyb3IuZGVmaW5lTW9kZSgiamF2YXNjcmlwdCIsIGZ1bmN0aW9uKGNvbmZpZywgcGFyc2VyQ29uZmlnKSB7CiAgdmFyIGluZGVudFVuaXQgPSBjb25maWcuaW5kZW50VW5pdDsKICB2YXIgc3RhdGVtZW50SW5kZW50ID0gcGFyc2VyQ29uZmlnLnN0YXRlbWVudEluZGVudDsKICB2YXIganNvbmxkTW9kZSA9IHBhcnNlckNvbmZpZy5qc29ubGQ7CiAgdmFyIGpzb25Nb2RlID0gcGFyc2VyQ29uZmlnLmpzb24gfHwganNvbmxkTW9kZTsKICB2YXIgaXNUUyA9IHBhcnNlckNvbmZpZy50eXBlc2NyaXB0OwogIHZhciB3b3JkUkUgPSBwYXJzZXJDb25maWcud29yZENoYXJhY3RlcnMgfHwgL1tcdyRceGExLVx1ZmZmZl0vOwoKICAvLyBUb2tlbml6ZXIKCiAgdmFyIGtleXdvcmRzID0gZnVuY3Rpb24oKXsKICAgIGZ1bmN0aW9uIGt3KHR5cGUpIHtyZXR1cm4ge3R5cGU6IHR5cGUsIHN0eWxlOiAia2V5d29yZCJ9O30KICAgIHZhciBBID0ga3coImtleXdvcmQgYSIpLCBCID0ga3coImtleXdvcmQgYiIpLCBDID0ga3coImtleXdvcmQgYyIpLCBEID0ga3coImtleXdvcmQgZCIpOwogICAgdmFyIG9wZXJhdG9yID0ga3coIm9wZXJhdG9yIiksIGF0b20gPSB7dHlwZTogImF0b20iLCBzdHlsZTogImF0b20ifTsKCiAgICByZXR1cm4gewogICAgICAiaWYiOiBrdygiaWYiKSwgIndoaWxlIjogQSwgIndpdGgiOiBBLCAiZWxzZSI6IEIsICJkbyI6IEIsICJ0cnkiOiBCLCAiZmluYWxseSI6IEIsCiAgICAgICJyZXR1cm4iOiBELCAiYnJlYWsiOiBELCAiY29udGludWUiOiBELCAibmV3Ijoga3coIm5ldyIpLCAiZGVsZXRlIjogQywgInZvaWQiOiBDLCAidGhyb3ciOiBDLAogICAgICAiZGVidWdnZXIiOiBrdygiZGVidWdnZXIiKSwgInZhciI6IGt3KCJ2YXIiKSwgImNvbnN0Ijoga3coInZhciIpLCAibGV0Ijoga3coInZhciIpLAogICAgICAiZnVuY3Rpb24iOiBrdygiZnVuY3Rpb24iKSwgImNhdGNoIjoga3coImNhdGNoIiksCiAgICAgICJmb3IiOiBrdygiZm9yIiksICJzd2l0Y2giOiBrdygic3dpdGNoIiksICJjYXNlIjoga3coImNhc2UiKSwgImRlZmF1bHQiOiBrdygiZGVmYXVsdCIpLAogICAgICAiaW4iOiBvcGVyYXRvciwgInR5cGVvZiI6IG9wZXJhdG9yLCAiaW5zdGFuY2VvZiI6IG9wZXJhdG9yLAogICAgICAidHJ1ZSI6IGF0b20sICJmYWxzZSI6IGF0b20sICJudWxsIjogYXRvbSwgInVuZGVmaW5lZCI6IGF0b20sICJOYU4iOiBhdG9tLCAiSW5maW5pdHkiOiBhdG9tLAogICAgICAidGhpcyI6IGt3KCJ0aGlzIiksICJjbGFzcyI6IGt3KCJjbGFzcyIpLCAic3VwZXIiOiBrdygiYXRvbSIpLAogICAgICAieWllbGQiOiBDLCAiZXhwb3J0Ijoga3coImV4cG9ydCIpLCAiaW1wb3J0Ijoga3coImltcG9ydCIpLCAiZXh0ZW5kcyI6IEMsCiAgICAgICJhd2FpdCI6IEMKICAgIH07CiAgfSgpOwoKICB2YXIgaXNPcGVyYXRvckNoYXIgPSAvWytcLSomJT08PiE/fH5eQF0vOwogIHZhciBpc0pzb25sZEtleXdvcmQgPSAvXkAoY29udGV4dHxpZHx2YWx1ZXxsYW5ndWFnZXx0eXBlfGNvbnRhaW5lcnxsaXN0fHNldHxyZXZlcnNlfGluZGV4fGJhc2V8dm9jYWJ8Z3JhcGgpIi87CgogIGZ1bmN0aW9uIHJlYWRSZWdleHAoc3RyZWFtKSB7CiAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0LCBpblNldCA9IGZhbHNlOwogICAgd2hpbGUgKChuZXh0ID0gc3RyZWFtLm5leHQoKSkgIT0gbnVsbCkgewogICAgICBpZiAoIWVzY2FwZWQpIHsKICAgICAgICBpZiAobmV4dCA9PSAiLyIgJiYgIWluU2V0KSByZXR1cm47CiAgICAgICAgaWYgKG5leHQgPT0gIlsiKSBpblNldCA9IHRydWU7CiAgICAgICAgZWxzZSBpZiAoaW5TZXQgJiYgbmV4dCA9PSAiXSIpIGluU2V0ID0gZmFsc2U7CiAgICAgIH0KICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gIlxcIjsKICAgIH0KICB9CgogIC8vIFVzZWQgYXMgc2NyYXRjaCB2YXJpYWJsZXMgdG8gY29tbXVuaWNhdGUgbXVsdGlwbGUgdmFsdWVzIHdpdGhvdXQKICAvLyBjb25zaW5nIHVwIHRvbnMgb2Ygb2JqZWN0cy4KICB2YXIgdHlwZSwgY29udGVudDsKICBmdW5jdGlvbiByZXQodHAsIHN0eWxlLCBjb250KSB7CiAgICB0eXBlID0gdHA7IGNvbnRlbnQgPSBjb250OwogICAgcmV0dXJuIHN0eWxlOwogIH0KICBmdW5jdGlvbiB0b2tlbkJhc2Uoc3RyZWFtLCBzdGF0ZSkgewogICAgdmFyIGNoID0gc3RyZWFtLm5leHQoKTsKICAgIGlmIChjaCA9PSAnIicgfHwgY2ggPT0gIiciKSB7CiAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5TdHJpbmcoY2gpOwogICAgICByZXR1cm4gc3RhdGUudG9rZW5pemUoc3RyZWFtLCBzdGF0ZSk7CiAgICB9IGVsc2UgaWYgKGNoID09ICIuIiAmJiBzdHJlYW0ubWF0Y2goL15cZFtcZF9dKig/OltlRV1bK1wtXT9bXGRfXSspPy8pKSB7CiAgICAgIHJldHVybiByZXQoIm51bWJlciIsICJudW1iZXIiKTsKICAgIH0gZWxzZSBpZiAoY2ggPT0gIi4iICYmIHN0cmVhbS5tYXRjaCgiLi4iKSkgewogICAgICByZXR1cm4gcmV0KCJzcHJlYWQiLCAibWV0YSIpOwogICAgfSBlbHNlIGlmICgvW1xbXF17fVwoXCksO1w6XC5dLy50ZXN0KGNoKSkgewogICAgICByZXR1cm4gcmV0KGNoKTsKICAgIH0gZWxzZSBpZiAoY2ggPT0gIj0iICYmIHN0cmVhbS5lYXQoIj4iKSkgewogICAgICByZXR1cm4gcmV0KCI9PiIsICJvcGVyYXRvciIpOwogICAgfSBlbHNlIGlmIChjaCA9PSAiMCIgJiYgc3RyZWFtLm1hdGNoKC9eKD86eFtcZEEtRmEtZl9dK3xvWzAtN19dK3xiWzAxX10rKW4/LykpIHsKICAgICAgcmV0dXJuIHJldCgibnVtYmVyIiwgIm51bWJlciIpOwogICAgfSBlbHNlIGlmICgvXGQvLnRlc3QoY2gpKSB7CiAgICAgIHN0cmVhbS5tYXRjaCgvXltcZF9dKig/Om58KD86XC5bXGRfXSopPyg/OltlRV1bK1wtXT9bXGRfXSspPyk/Lyk7CiAgICAgIHJldHVybiByZXQoIm51bWJlciIsICJudW1iZXIiKTsKICAgIH0gZWxzZSBpZiAoY2ggPT0gIi8iKSB7CiAgICAgIGlmIChzdHJlYW0uZWF0KCIqIikpIHsKICAgICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuQ29tbWVudDsKICAgICAgICByZXR1cm4gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpOwogICAgICB9IGVsc2UgaWYgKHN0cmVhbS5lYXQoIi8iKSkgewogICAgICAgIHN0cmVhbS5za2lwVG9FbmQoKTsKICAgICAgICByZXR1cm4gcmV0KCJjb21tZW50IiwgImNvbW1lbnQiKTsKICAgICAgfSBlbHNlIGlmIChleHByZXNzaW9uQWxsb3dlZChzdHJlYW0sIHN0YXRlLCAxKSkgewogICAgICAgIHJlYWRSZWdleHAoc3RyZWFtKTsKICAgICAgICBzdHJlYW0ubWF0Y2goL15cYigoW2dpbXl1c10pKD8hW2dpbXl1c10qXDIpKStcYi8pOwogICAgICAgIHJldHVybiByZXQoInJlZ2V4cCIsICJzdHJpbmctMiIpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0cmVhbS5lYXQoIj0iKTsKICAgICAgICByZXR1cm4gcmV0KCJvcGVyYXRvciIsICJvcGVyYXRvciIsIHN0cmVhbS5jdXJyZW50KCkpOwogICAgICB9CiAgICB9IGVsc2UgaWYgKGNoID09ICJgIikgewogICAgICBzdGF0ZS50b2tlbml6ZSA9IHRva2VuUXVhc2k7CiAgICAgIHJldHVybiB0b2tlblF1YXNpKHN0cmVhbSwgc3RhdGUpOwogICAgfSBlbHNlIGlmIChjaCA9PSAiIyIpIHsKICAgICAgc3RyZWFtLnNraXBUb0VuZCgpOwogICAgICByZXR1cm4gcmV0KCJlcnJvciIsICJlcnJvciIpOwogICAgfSBlbHNlIGlmIChpc09wZXJhdG9yQ2hhci50ZXN0KGNoKSkgewogICAgICBpZiAoY2ggIT0gIj4iIHx8ICFzdGF0ZS5sZXhpY2FsIHx8IHN0YXRlLmxleGljYWwudHlwZSAhPSAiPiIpIHsKICAgICAgICBpZiAoc3RyZWFtLmVhdCgiPSIpKSB7CiAgICAgICAgICBpZiAoY2ggPT0gIiEiIHx8IGNoID09ICI9Iikgc3RyZWFtLmVhdCgiPSIpCiAgICAgICAgfSBlbHNlIGlmICgvWzw+KitcLV0vLnRlc3QoY2gpKSB7CiAgICAgICAgICBzdHJlYW0uZWF0KGNoKQogICAgICAgICAgaWYgKGNoID09ICI+Iikgc3RyZWFtLmVhdChjaCkKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJldCgib3BlcmF0b3IiLCAib3BlcmF0b3IiLCBzdHJlYW0uY3VycmVudCgpKTsKICAgIH0gZWxzZSBpZiAod29yZFJFLnRlc3QoY2gpKSB7CiAgICAgIHN0cmVhbS5lYXRXaGlsZSh3b3JkUkUpOwogICAgICB2YXIgd29yZCA9IHN0cmVhbS5jdXJyZW50KCkKICAgICAgaWYgKHN0YXRlLmxhc3RUeXBlICE9ICIuIikgewogICAgICAgIGlmIChrZXl3b3Jkcy5wcm9wZXJ0eUlzRW51bWVyYWJsZSh3b3JkKSkgewogICAgICAgICAgdmFyIGt3ID0ga2V5d29yZHNbd29yZF0KICAgICAgICAgIHJldHVybiByZXQoa3cudHlwZSwga3cuc3R5bGUsIHdvcmQpCiAgICAgICAgfQogICAgICAgIGlmICh3b3JkID09ICJhc3luYyIgJiYgc3RyZWFtLm1hdGNoKC9eKFxzfFwvXCouKj9cKlwvKSpbXFtcKFx3XS8sIGZhbHNlKSkKICAgICAgICAgIHJldHVybiByZXQoImFzeW5jIiwgImtleXdvcmQiLCB3b3JkKQogICAgICB9CiAgICAgIHJldHVybiByZXQoInZhcmlhYmxlIiwgInZhcmlhYmxlIiwgd29yZCkKICAgIH0KICB9CgogIGZ1bmN0aW9uIHRva2VuU3RyaW5nKHF1b3RlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24oc3RyZWFtLCBzdGF0ZSkgewogICAgICB2YXIgZXNjYXBlZCA9IGZhbHNlLCBuZXh0OwogICAgICBpZiAoanNvbmxkTW9kZSAmJiBzdHJlYW0ucGVlaygpID09ICJAIiAmJiBzdHJlYW0ubWF0Y2goaXNKc29ubGRLZXl3b3JkKSl7CiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7CiAgICAgICAgcmV0dXJuIHJldCgianNvbmxkLWtleXdvcmQiLCAibWV0YSIpOwogICAgICB9CiAgICAgIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHsKICAgICAgICBpZiAobmV4dCA9PSBxdW90ZSAmJiAhZXNjYXBlZCkgYnJlYWs7CiAgICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gIlxcIjsKICAgICAgfQogICAgICBpZiAoIWVzY2FwZWQpIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlOwogICAgICByZXR1cm4gcmV0KCJzdHJpbmciLCAic3RyaW5nIik7CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gdG9rZW5Db21tZW50KHN0cmVhbSwgc3RhdGUpIHsKICAgIHZhciBtYXliZUVuZCA9IGZhbHNlLCBjaDsKICAgIHdoaWxlIChjaCA9IHN0cmVhbS5uZXh0KCkpIHsKICAgICAgaWYgKGNoID09ICIvIiAmJiBtYXliZUVuZCkgewogICAgICAgIHN0YXRlLnRva2VuaXplID0gdG9rZW5CYXNlOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIG1heWJlRW5kID0gKGNoID09ICIqIik7CiAgICB9CiAgICByZXR1cm4gcmV0KCJjb21tZW50IiwgImNvbW1lbnQiKTsKICB9CgogIGZ1bmN0aW9uIHRva2VuUXVhc2koc3RyZWFtLCBzdGF0ZSkgewogICAgdmFyIGVzY2FwZWQgPSBmYWxzZSwgbmV4dDsKICAgIHdoaWxlICgobmV4dCA9IHN0cmVhbS5uZXh0KCkpICE9IG51bGwpIHsKICAgICAgaWYgKCFlc2NhcGVkICYmIChuZXh0ID09ICJgIiB8fCBuZXh0ID09ICIkIiAmJiBzdHJlYW0uZWF0KCJ7IikpKSB7CiAgICAgICAgc3RhdGUudG9rZW5pemUgPSB0b2tlbkJhc2U7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgZXNjYXBlZCA9ICFlc2NhcGVkICYmIG5leHQgPT0gIlxcIjsKICAgIH0KICAgIHJldHVybiByZXQoInF1YXNpIiwgInN0cmluZy0yIiwgc3RyZWFtLmN1cnJlbnQoKSk7CiAgfQoKICB2YXIgYnJhY2tldHMgPSAiKFt7fV0pIjsKICAvLyBUaGlzIGlzIGEgY3J1ZGUgbG9va2FoZWFkIHRyaWNrIHRvIHRyeSBhbmQgbm90aWNlIHRoYXQgd2UncmUKICAvLyBwYXJzaW5nIHRoZSBhcmd1bWVudCBwYXR0ZXJucyBmb3IgYSBmYXQtYXJyb3cgZnVuY3Rpb24gYmVmb3JlIHdlCiAgLy8gYWN0dWFsbHkgaGl0IHRoZSBhcnJvdyB0b2tlbi4gSXQgb25seSB3b3JrcyBpZiB0aGUgYXJyb3cgaXMgb24KICAvLyB0aGUgc2FtZSBsaW5lIGFzIHRoZSBhcmd1bWVudHMgYW5kIHRoZXJlJ3Mgbm8gc3RyYW5nZSBub2lzZQogIC8vIChjb21tZW50cykgaW4gYmV0d2Vlbi4gRmFsbGJhY2sgaXMgdG8gb25seSBub3RpY2Ugd2hlbiB3ZSBoaXQgdGhlCiAgLy8gYXJyb3csIGFuZCBub3QgZGVjbGFyZSB0aGUgYXJndW1lbnRzIGFzIGxvY2FscyBmb3IgdGhlIGFycm93CiAgLy8gYm9keS4KICBmdW5jdGlvbiBmaW5kRmF0QXJyb3coc3RyZWFtLCBzdGF0ZSkgewogICAgaWYgKHN0YXRlLmZhdEFycm93QXQpIHN0YXRlLmZhdEFycm93QXQgPSBudWxsOwogICAgdmFyIGFycm93ID0gc3RyZWFtLnN0cmluZy5pbmRleE9mKCI9PiIsIHN0cmVhbS5zdGFydCk7CiAgICBpZiAoYXJyb3cgPCAwKSByZXR1cm47CgogICAgaWYgKGlzVFMpIHsgLy8gVHJ5IHRvIHNraXAgVHlwZVNjcmlwdCByZXR1cm4gdHlwZSBkZWNsYXJhdGlvbnMgYWZ0ZXIgdGhlIGFyZ3VtZW50cwogICAgICB2YXIgbSA9IC86XHMqKD86XHcrKD86PFtePl0qPnxcW1xdKT98XHtbXn1dKlx9KVxzKiQvLmV4ZWMoc3RyZWFtLnN0cmluZy5zbGljZShzdHJlYW0uc3RhcnQsIGFycm93KSkKICAgICAgaWYgKG0pIGFycm93ID0gbS5pbmRleAogICAgfQoKICAgIHZhciBkZXB0aCA9IDAsIHNhd1NvbWV0aGluZyA9IGZhbHNlOwogICAgZm9yICh2YXIgcG9zID0gYXJyb3cgLSAxOyBwb3MgPj0gMDsgLS1wb3MpIHsKICAgICAgdmFyIGNoID0gc3RyZWFtLnN0cmluZy5jaGFyQXQocG9zKTsKICAgICAgdmFyIGJyYWNrZXQgPSBicmFja2V0cy5pbmRleE9mKGNoKTsKICAgICAgaWYgKGJyYWNrZXQgPj0gMCAmJiBicmFja2V0IDwgMykgewogICAgICAgIGlmICghZGVwdGgpIHsgKytwb3M7IGJyZWFrOyB9CiAgICAgICAgaWYgKC0tZGVwdGggPT0gMCkgeyBpZiAoY2ggPT0gIigiKSBzYXdTb21ldGhpbmcgPSB0cnVlOyBicmVhazsgfQogICAgICB9IGVsc2UgaWYgKGJyYWNrZXQgPj0gMyAmJiBicmFja2V0IDwgNikgewogICAgICAgICsrZGVwdGg7CiAgICAgIH0gZWxzZSBpZiAod29yZFJFLnRlc3QoY2gpKSB7CiAgICAgICAgc2F3U29tZXRoaW5nID0gdHJ1ZTsKICAgICAgfSBlbHNlIGlmICgvWyInXC9gXS8udGVzdChjaCkpIHsKICAgICAgICBmb3IgKDs7IC0tcG9zKSB7CiAgICAgICAgICBpZiAocG9zID09IDApIHJldHVybgogICAgICAgICAgdmFyIG5leHQgPSBzdHJlYW0uc3RyaW5nLmNoYXJBdChwb3MgLSAxKQogICAgICAgICAgaWYgKG5leHQgPT0gY2ggJiYgc3RyZWFtLnN0cmluZy5jaGFyQXQocG9zIC0gMikgIT0gIlxcIikgeyBwb3MtLTsgYnJlYWsgfQogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChzYXdTb21ldGhpbmcgJiYgIWRlcHRoKSB7CiAgICAgICAgKytwb3M7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGlmIChzYXdTb21ldGhpbmcgJiYgIWRlcHRoKSBzdGF0ZS5mYXRBcnJvd0F0ID0gcG9zOwogIH0KCiAgLy8gUGFyc2VyCgogIHZhciBhdG9taWNUeXBlcyA9IHsiYXRvbSI6IHRydWUsICJudW1iZXIiOiB0cnVlLCAidmFyaWFibGUiOiB0cnVlLCAic3RyaW5nIjogdHJ1ZSwgInJlZ2V4cCI6IHRydWUsICJ0aGlzIjogdHJ1ZSwgImpzb25sZC1rZXl3b3JkIjogdHJ1ZX07CgogIGZ1bmN0aW9uIEpTTGV4aWNhbChpbmRlbnRlZCwgY29sdW1uLCB0eXBlLCBhbGlnbiwgcHJldiwgaW5mbykgewogICAgdGhpcy5pbmRlbnRlZCA9IGluZGVudGVkOwogICAgdGhpcy5jb2x1bW4gPSBjb2x1bW47CiAgICB0aGlzLnR5cGUgPSB0eXBlOwogICAgdGhpcy5wcmV2ID0gcHJldjsKICAgIHRoaXMuaW5mbyA9IGluZm87CiAgICBpZiAoYWxpZ24gIT0gbnVsbCkgdGhpcy5hbGlnbiA9IGFsaWduOwogIH0KCiAgZnVuY3Rpb24gaW5TY29wZShzdGF0ZSwgdmFybmFtZSkgewogICAgZm9yICh2YXIgdiA9IHN0YXRlLmxvY2FsVmFyczsgdjsgdiA9IHYubmV4dCkKICAgICAgaWYgKHYubmFtZSA9PSB2YXJuYW1lKSByZXR1cm4gdHJ1ZTsKICAgIGZvciAodmFyIGN4ID0gc3RhdGUuY29udGV4dDsgY3g7IGN4ID0gY3gucHJldikgewogICAgICBmb3IgKHZhciB2ID0gY3gudmFyczsgdjsgdiA9IHYubmV4dCkKICAgICAgICBpZiAodi5uYW1lID09IHZhcm5hbWUpIHJldHVybiB0cnVlOwogICAgfQogIH0KCiAgZnVuY3Rpb24gcGFyc2VKUyhzdGF0ZSwgc3R5bGUsIHR5cGUsIGNvbnRlbnQsIHN0cmVhbSkgewogICAgdmFyIGNjID0gc3RhdGUuY2M7CiAgICAvLyBDb21tdW5pY2F0ZSBvdXIgY29udGV4dCB0byB0aGUgY29tYmluYXRvcnMuCiAgICAvLyAoTGVzcyB3YXN0ZWZ1bCB0aGFuIGNvbnNpbmcgdXAgYSBodW5kcmVkIGNsb3N1cmVzIG9uIGV2ZXJ5IGNhbGwuKQogICAgY3guc3RhdGUgPSBzdGF0ZTsgY3guc3RyZWFtID0gc3RyZWFtOyBjeC5tYXJrZWQgPSBudWxsLCBjeC5jYyA9IGNjOyBjeC5zdHlsZSA9IHN0eWxlOwoKICAgIGlmICghc3RhdGUubGV4aWNhbC5oYXNPd25Qcm9wZXJ0eSgiYWxpZ24iKSkKICAgICAgc3RhdGUubGV4aWNhbC5hbGlnbiA9IHRydWU7CgogICAgd2hpbGUodHJ1ZSkgewogICAgICB2YXIgY29tYmluYXRvciA9IGNjLmxlbmd0aCA/IGNjLnBvcCgpIDoganNvbk1vZGUgPyBleHByZXNzaW9uIDogc3RhdGVtZW50OwogICAgICBpZiAoY29tYmluYXRvcih0eXBlLCBjb250ZW50KSkgewogICAgICAgIHdoaWxlKGNjLmxlbmd0aCAmJiBjY1tjYy5sZW5ndGggLSAxXS5sZXgpCiAgICAgICAgICBjYy5wb3AoKSgpOwogICAgICAgIGlmIChjeC5tYXJrZWQpIHJldHVybiBjeC5tYXJrZWQ7CiAgICAgICAgaWYgKHR5cGUgPT0gInZhcmlhYmxlIiAmJiBpblNjb3BlKHN0YXRlLCBjb250ZW50KSkgcmV0dXJuICJ2YXJpYWJsZS0yIjsKICAgICAgICByZXR1cm4gc3R5bGU7CiAgICAgIH0KICAgIH0KICB9CgogIC8vIENvbWJpbmF0b3IgdXRpbHMKCiAgdmFyIGN4ID0ge3N0YXRlOiBudWxsLCBjb2x1bW46IG51bGwsIG1hcmtlZDogbnVsbCwgY2M6IG51bGx9OwogIGZ1bmN0aW9uIHBhc3MoKSB7CiAgICBmb3IgKHZhciBpID0gYXJndW1lbnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBjeC5jYy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgfQogIGZ1bmN0aW9uIGNvbnQoKSB7CiAgICBwYXNzLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgZnVuY3Rpb24gaW5MaXN0KG5hbWUsIGxpc3QpIHsKICAgIGZvciAodmFyIHYgPSBsaXN0OyB2OyB2ID0gdi5uZXh0KSBpZiAodi5uYW1lID09IG5hbWUpIHJldHVybiB0cnVlCiAgICByZXR1cm4gZmFsc2U7CiAgfQogIGZ1bmN0aW9uIHJlZ2lzdGVyKHZhcm5hbWUpIHsKICAgIHZhciBzdGF0ZSA9IGN4LnN0YXRlOwogICAgY3gubWFya2VkID0gImRlZiI7CiAgICBpZiAoc3RhdGUuY29udGV4dCkgewogICAgICBpZiAoc3RhdGUubGV4aWNhbC5pbmZvID09ICJ2YXIiICYmIHN0YXRlLmNvbnRleHQgJiYgc3RhdGUuY29udGV4dC5ibG9jaykgewogICAgICAgIC8vIEZJWE1FIGZ1bmN0aW9uIGRlY2xzIGFyZSBhbHNvIG5vdCBibG9jayBzY29wZWQKICAgICAgICB2YXIgbmV3Q29udGV4dCA9IHJlZ2lzdGVyVmFyU2NvcGVkKHZhcm5hbWUsIHN0YXRlLmNvbnRleHQpCiAgICAgICAgaWYgKG5ld0NvbnRleHQgIT0gbnVsbCkgewogICAgICAgICAgc3RhdGUuY29udGV4dCA9IG5ld0NvbnRleHQKICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICghaW5MaXN0KHZhcm5hbWUsIHN0YXRlLmxvY2FsVmFycykpIHsKICAgICAgICBzdGF0ZS5sb2NhbFZhcnMgPSBuZXcgVmFyKHZhcm5hbWUsIHN0YXRlLmxvY2FsVmFycykKICAgICAgICByZXR1cm4KICAgICAgfQogICAgfQogICAgLy8gRmFsbCB0aHJvdWdoIG1lYW5zIHRoaXMgaXMgZ2xvYmFsCiAgICBpZiAocGFyc2VyQ29uZmlnLmdsb2JhbFZhcnMgJiYgIWluTGlzdCh2YXJuYW1lLCBzdGF0ZS5nbG9iYWxWYXJzKSkKICAgICAgc3RhdGUuZ2xvYmFsVmFycyA9IG5ldyBWYXIodmFybmFtZSwgc3RhdGUuZ2xvYmFsVmFycykKICB9CiAgZnVuY3Rpb24gcmVnaXN0ZXJWYXJTY29wZWQodmFybmFtZSwgY29udGV4dCkgewogICAgaWYgKCFjb250ZXh0KSB7CiAgICAgIHJldHVybiBudWxsCiAgICB9IGVsc2UgaWYgKGNvbnRleHQuYmxvY2spIHsKICAgICAgdmFyIGlubmVyID0gcmVnaXN0ZXJWYXJTY29wZWQodmFybmFtZSwgY29udGV4dC5wcmV2KQogICAgICBpZiAoIWlubmVyKSByZXR1cm4gbnVsbAogICAgICBpZiAoaW5uZXIgPT0gY29udGV4dC5wcmV2KSByZXR1cm4gY29udGV4dAogICAgICByZXR1cm4gbmV3IENvbnRleHQoaW5uZXIsIGNvbnRleHQudmFycywgdHJ1ZSkKICAgIH0gZWxzZSBpZiAoaW5MaXN0KHZhcm5hbWUsIGNvbnRleHQudmFycykpIHsKICAgICAgcmV0dXJuIGNvbnRleHQKICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBuZXcgQ29udGV4dChjb250ZXh0LnByZXYsIG5ldyBWYXIodmFybmFtZSwgY29udGV4dC52YXJzKSwgZmFsc2UpCiAgICB9CiAgfQoKICBmdW5jdGlvbiBpc01vZGlmaWVyKG5hbWUpIHsKICAgIHJldHVybiBuYW1lID09ICJwdWJsaWMiIHx8IG5hbWUgPT0gInByaXZhdGUiIHx8IG5hbWUgPT0gInByb3RlY3RlZCIgfHwgbmFtZSA9PSAiYWJzdHJhY3QiIHx8IG5hbWUgPT0gInJlYWRvbmx5IgogIH0KCiAgLy8gQ29tYmluYXRvcnMKCiAgZnVuY3Rpb24gQ29udGV4dChwcmV2LCB2YXJzLCBibG9jaykgeyB0aGlzLnByZXYgPSBwcmV2OyB0aGlzLnZhcnMgPSB2YXJzOyB0aGlzLmJsb2NrID0gYmxvY2sgfQogIGZ1bmN0aW9uIFZhcihuYW1lLCBuZXh0KSB7IHRoaXMubmFtZSA9IG5hbWU7IHRoaXMubmV4dCA9IG5leHQgfQoKICB2YXIgZGVmYXVsdFZhcnMgPSBuZXcgVmFyKCJ0aGlzIiwgbmV3IFZhcigiYXJndW1lbnRzIiwgbnVsbCkpCiAgZnVuY3Rpb24gcHVzaGNvbnRleHQoKSB7CiAgICBjeC5zdGF0ZS5jb250ZXh0ID0gbmV3IENvbnRleHQoY3guc3RhdGUuY29udGV4dCwgY3guc3RhdGUubG9jYWxWYXJzLCBmYWxzZSkKICAgIGN4LnN0YXRlLmxvY2FsVmFycyA9IGRlZmF1bHRWYXJzCiAgfQogIGZ1bmN0aW9uIHB1c2hibG9ja2NvbnRleHQoKSB7CiAgICBjeC5zdGF0ZS5jb250ZXh0ID0gbmV3IENvbnRleHQoY3guc3RhdGUuY29udGV4dCwgY3guc3RhdGUubG9jYWxWYXJzLCB0cnVlKQogICAgY3guc3RhdGUubG9jYWxWYXJzID0gbnVsbAogIH0KICBmdW5jdGlvbiBwb3Bjb250ZXh0KCkgewogICAgY3guc3RhdGUubG9jYWxWYXJzID0gY3guc3RhdGUuY29udGV4dC52YXJzCiAgICBjeC5zdGF0ZS5jb250ZXh0ID0gY3guc3RhdGUuY29udGV4dC5wcmV2CiAgfQogIHBvcGNvbnRleHQubGV4ID0gdHJ1ZQogIGZ1bmN0aW9uIHB1c2hsZXgodHlwZSwgaW5mbykgewogICAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc3RhdGUgPSBjeC5zdGF0ZSwgaW5kZW50ID0gc3RhdGUuaW5kZW50ZWQ7CiAgICAgIGlmIChzdGF0ZS5sZXhpY2FsLnR5cGUgPT0gInN0YXQiKSBpbmRlbnQgPSBzdGF0ZS5sZXhpY2FsLmluZGVudGVkOwogICAgICBlbHNlIGZvciAodmFyIG91dGVyID0gc3RhdGUubGV4aWNhbDsgb3V0ZXIgJiYgb3V0ZXIudHlwZSA9PSAiKSIgJiYgb3V0ZXIuYWxpZ247IG91dGVyID0gb3V0ZXIucHJldikKICAgICAgICBpbmRlbnQgPSBvdXRlci5pbmRlbnRlZDsKICAgICAgc3RhdGUubGV4aWNhbCA9IG5ldyBKU0xleGljYWwoaW5kZW50LCBjeC5zdHJlYW0uY29sdW1uKCksIHR5cGUsIG51bGwsIHN0YXRlLmxleGljYWwsIGluZm8pOwogICAgfTsKICAgIHJlc3VsdC5sZXggPSB0cnVlOwogICAgcmV0dXJuIHJlc3VsdDsKICB9CiAgZnVuY3Rpb24gcG9wbGV4KCkgewogICAgdmFyIHN0YXRlID0gY3guc3RhdGU7CiAgICBpZiAoc3RhdGUubGV4aWNhbC5wcmV2KSB7CiAgICAgIGlmIChzdGF0ZS5sZXhpY2FsLnR5cGUgPT0gIikiKQogICAgICAgIHN0YXRlLmluZGVudGVkID0gc3RhdGUubGV4aWNhbC5pbmRlbnRlZDsKICAgICAgc3RhdGUubGV4aWNhbCA9IHN0YXRlLmxleGljYWwucHJldjsKICAgIH0KICB9CiAgcG9wbGV4LmxleCA9IHRydWU7CgogIGZ1bmN0aW9uIGV4cGVjdCh3YW50ZWQpIHsKICAgIGZ1bmN0aW9uIGV4cCh0eXBlKSB7CiAgICAgIGlmICh0eXBlID09IHdhbnRlZCkgcmV0dXJuIGNvbnQoKTsKICAgICAgZWxzZSBpZiAod2FudGVkID09ICI7IiB8fCB0eXBlID09ICJ9IiB8fCB0eXBlID09ICIpIiB8fCB0eXBlID09ICJdIikgcmV0dXJuIHBhc3MoKTsKICAgICAgZWxzZSByZXR1cm4gY29udChleHApOwogICAgfTsKICAgIHJldHVybiBleHA7CiAgfQoKICBmdW5jdGlvbiBzdGF0ZW1lbnQodHlwZSwgdmFsdWUpIHsKICAgIGlmICh0eXBlID09ICJ2YXIiKSByZXR1cm4gY29udChwdXNobGV4KCJ2YXJkZWYiLCB2YWx1ZSksIHZhcmRlZiwgZXhwZWN0KCI7IiksIHBvcGxleCk7CiAgICBpZiAodHlwZSA9PSAia2V5d29yZCBhIikgcmV0dXJuIGNvbnQocHVzaGxleCgiZm9ybSIpLCBwYXJlbkV4cHIsIHN0YXRlbWVudCwgcG9wbGV4KTsKICAgIGlmICh0eXBlID09ICJrZXl3b3JkIGIiKSByZXR1cm4gY29udChwdXNobGV4KCJmb3JtIiksIHN0YXRlbWVudCwgcG9wbGV4KTsKICAgIGlmICh0eXBlID09ICJrZXl3b3JkIGQiKSByZXR1cm4gY3guc3RyZWFtLm1hdGNoKC9eXHMqJC8sIGZhbHNlKSA/IGNvbnQoKSA6IGNvbnQocHVzaGxleCgic3RhdCIpLCBtYXliZWV4cHJlc3Npb24sIGV4cGVjdCgiOyIpLCBwb3BsZXgpOwogICAgaWYgKHR5cGUgPT0gImRlYnVnZ2VyIikgcmV0dXJuIGNvbnQoZXhwZWN0KCI7IikpOwogICAgaWYgKHR5cGUgPT0gInsiKSByZXR1cm4gY29udChwdXNobGV4KCJ9IiksIHB1c2hibG9ja2NvbnRleHQsIGJsb2NrLCBwb3BsZXgsIHBvcGNvbnRleHQpOwogICAgaWYgKHR5cGUgPT0gIjsiKSByZXR1cm4gY29udCgpOwogICAgaWYgKHR5cGUgPT0gImlmIikgewogICAgICBpZiAoY3guc3RhdGUubGV4aWNhbC5pbmZvID09ICJlbHNlIiAmJiBjeC5zdGF0ZS5jY1tjeC5zdGF0ZS5jYy5sZW5ndGggLSAxXSA9PSBwb3BsZXgpCiAgICAgICAgY3guc3RhdGUuY2MucG9wKCkoKTsKICAgICAgcmV0dXJuIGNvbnQocHVzaGxleCgiZm9ybSIpLCBwYXJlbkV4cHIsIHN0YXRlbWVudCwgcG9wbGV4LCBtYXliZWVsc2UpOwogICAgfQogICAgaWYgKHR5cGUgPT0gImZ1bmN0aW9uIikgcmV0dXJuIGNvbnQoZnVuY3Rpb25kZWYpOwogICAgaWYgKHR5cGUgPT0gImZvciIpIHJldHVybiBjb250KHB1c2hsZXgoImZvcm0iKSwgZm9yc3BlYywgc3RhdGVtZW50LCBwb3BsZXgpOwogICAgaWYgKHR5cGUgPT0gImNsYXNzIiB8fCAoaXNUUyAmJiB2YWx1ZSA9PSAiaW50ZXJmYWNlIikpIHsKICAgICAgY3gubWFya2VkID0gImtleXdvcmQiCiAgICAgIHJldHVybiBjb250KHB1c2hsZXgoImZvcm0iLCB0eXBlID09ICJjbGFzcyIgPyB0eXBlIDogdmFsdWUpLCBjbGFzc05hbWUsIHBvcGxleCkKICAgIH0KICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIHsKICAgICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gImRlY2xhcmUiKSB7CiAgICAgICAgY3gubWFya2VkID0gImtleXdvcmQiCiAgICAgICAgcmV0dXJuIGNvbnQoc3RhdGVtZW50KQogICAgICB9IGVsc2UgaWYgKGlzVFMgJiYgKHZhbHVlID09ICJtb2R1bGUiIHx8IHZhbHVlID09ICJlbnVtIiB8fCB2YWx1ZSA9PSAidHlwZSIpICYmIGN4LnN0cmVhbS5tYXRjaCgvXlxzKlx3LywgZmFsc2UpKSB7CiAgICAgICAgY3gubWFya2VkID0gImtleXdvcmQiCiAgICAgICAgaWYgKHZhbHVlID09ICJlbnVtIikgcmV0dXJuIGNvbnQoZW51bWRlZik7CiAgICAgICAgZWxzZSBpZiAodmFsdWUgPT0gInR5cGUiKSByZXR1cm4gY29udCh0eXBlbmFtZSwgZXhwZWN0KCJvcGVyYXRvciIpLCB0eXBlZXhwciwgZXhwZWN0KCI7IikpOwogICAgICAgIGVsc2UgcmV0dXJuIGNvbnQocHVzaGxleCgiZm9ybSIpLCBwYXR0ZXJuLCBleHBlY3QoInsiKSwgcHVzaGxleCgifSIpLCBibG9jaywgcG9wbGV4LCBwb3BsZXgpCiAgICAgIH0gZWxzZSBpZiAoaXNUUyAmJiB2YWx1ZSA9PSAibmFtZXNwYWNlIikgewogICAgICAgIGN4Lm1hcmtlZCA9ICJrZXl3b3JkIgogICAgICAgIHJldHVybiBjb250KHB1c2hsZXgoImZvcm0iKSwgZXhwcmVzc2lvbiwgc3RhdGVtZW50LCBwb3BsZXgpCiAgICAgIH0gZWxzZSBpZiAoaXNUUyAmJiB2YWx1ZSA9PSAiYWJzdHJhY3QiKSB7CiAgICAgICAgY3gubWFya2VkID0gImtleXdvcmQiCiAgICAgICAgcmV0dXJuIGNvbnQoc3RhdGVtZW50KQogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBjb250KHB1c2hsZXgoInN0YXQiKSwgbWF5YmVsYWJlbCk7CiAgICAgIH0KICAgIH0KICAgIGlmICh0eXBlID09ICJzd2l0Y2giKSByZXR1cm4gY29udChwdXNobGV4KCJmb3JtIiksIHBhcmVuRXhwciwgZXhwZWN0KCJ7IiksIHB1c2hsZXgoIn0iLCAic3dpdGNoIiksIHB1c2hibG9ja2NvbnRleHQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2ssIHBvcGxleCwgcG9wbGV4LCBwb3Bjb250ZXh0KTsKICAgIGlmICh0eXBlID09ICJjYXNlIikgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgZXhwZWN0KCI6IikpOwogICAgaWYgKHR5cGUgPT0gImRlZmF1bHQiKSByZXR1cm4gY29udChleHBlY3QoIjoiKSk7CiAgICBpZiAodHlwZSA9PSAiY2F0Y2giKSByZXR1cm4gY29udChwdXNobGV4KCJmb3JtIiksIHB1c2hjb250ZXh0LCBtYXliZUNhdGNoQmluZGluZywgc3RhdGVtZW50LCBwb3BsZXgsIHBvcGNvbnRleHQpOwogICAgaWYgKHR5cGUgPT0gImV4cG9ydCIpIHJldHVybiBjb250KHB1c2hsZXgoInN0YXQiKSwgYWZ0ZXJFeHBvcnQsIHBvcGxleCk7CiAgICBpZiAodHlwZSA9PSAiaW1wb3J0IikgcmV0dXJuIGNvbnQocHVzaGxleCgic3RhdCIpLCBhZnRlckltcG9ydCwgcG9wbGV4KTsKICAgIGlmICh0eXBlID09ICJhc3luYyIpIHJldHVybiBjb250KHN0YXRlbWVudCkKICAgIGlmICh2YWx1ZSA9PSAiQCIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIHN0YXRlbWVudCkKICAgIHJldHVybiBwYXNzKHB1c2hsZXgoInN0YXQiKSwgZXhwcmVzc2lvbiwgZXhwZWN0KCI7IiksIHBvcGxleCk7CiAgfQogIGZ1bmN0aW9uIG1heWJlQ2F0Y2hCaW5kaW5nKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICIoIikgcmV0dXJuIGNvbnQoZnVuYXJnLCBleHBlY3QoIikiKSkKICB9CiAgZnVuY3Rpb24gZXhwcmVzc2lvbih0eXBlLCB2YWx1ZSkgewogICAgcmV0dXJuIGV4cHJlc3Npb25Jbm5lcih0eXBlLCB2YWx1ZSwgZmFsc2UpOwogIH0KICBmdW5jdGlvbiBleHByZXNzaW9uTm9Db21tYSh0eXBlLCB2YWx1ZSkgewogICAgcmV0dXJuIGV4cHJlc3Npb25Jbm5lcih0eXBlLCB2YWx1ZSwgdHJ1ZSk7CiAgfQogIGZ1bmN0aW9uIHBhcmVuRXhwcih0eXBlKSB7CiAgICBpZiAodHlwZSAhPSAiKCIpIHJldHVybiBwYXNzKCkKICAgIHJldHVybiBjb250KHB1c2hsZXgoIikiKSwgZXhwcmVzc2lvbiwgZXhwZWN0KCIpIiksIHBvcGxleCkKICB9CiAgZnVuY3Rpb24gZXhwcmVzc2lvbklubmVyKHR5cGUsIHZhbHVlLCBub0NvbW1hKSB7CiAgICBpZiAoY3guc3RhdGUuZmF0QXJyb3dBdCA9PSBjeC5zdHJlYW0uc3RhcnQpIHsKICAgICAgdmFyIGJvZHkgPSBub0NvbW1hID8gYXJyb3dCb2R5Tm9Db21tYSA6IGFycm93Qm9keTsKICAgICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udChwdXNoY29udGV4dCwgcHVzaGxleCgiKSIpLCBjb21tYXNlcChmdW5hcmcsICIpIiksIHBvcGxleCwgZXhwZWN0KCI9PiIpLCBib2R5LCBwb3Bjb250ZXh0KTsKICAgICAgZWxzZSBpZiAodHlwZSA9PSAidmFyaWFibGUiKSByZXR1cm4gcGFzcyhwdXNoY29udGV4dCwgcGF0dGVybiwgZXhwZWN0KCI9PiIpLCBib2R5LCBwb3Bjb250ZXh0KTsKICAgIH0KCiAgICB2YXIgbWF5YmVvcCA9IG5vQ29tbWEgPyBtYXliZW9wZXJhdG9yTm9Db21tYSA6IG1heWJlb3BlcmF0b3JDb21tYTsKICAgIGlmIChhdG9taWNUeXBlcy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkgcmV0dXJuIGNvbnQobWF5YmVvcCk7CiAgICBpZiAodHlwZSA9PSAiZnVuY3Rpb24iKSByZXR1cm4gY29udChmdW5jdGlvbmRlZiwgbWF5YmVvcCk7CiAgICBpZiAodHlwZSA9PSAiY2xhc3MiIHx8IChpc1RTICYmIHZhbHVlID09ICJpbnRlcmZhY2UiKSkgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KHB1c2hsZXgoImZvcm0iKSwgY2xhc3NFeHByZXNzaW9uLCBwb3BsZXgpOyB9CiAgICBpZiAodHlwZSA9PSAia2V5d29yZCBjIiB8fCB0eXBlID09ICJhc3luYyIpIHJldHVybiBjb250KG5vQ29tbWEgPyBleHByZXNzaW9uTm9Db21tYSA6IGV4cHJlc3Npb24pOwogICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udChwdXNobGV4KCIpIiksIG1heWJlZXhwcmVzc2lvbiwgZXhwZWN0KCIpIiksIHBvcGxleCwgbWF5YmVvcCk7CiAgICBpZiAodHlwZSA9PSAib3BlcmF0b3IiIHx8IHR5cGUgPT0gInNwcmVhZCIpIHJldHVybiBjb250KG5vQ29tbWEgPyBleHByZXNzaW9uTm9Db21tYSA6IGV4cHJlc3Npb24pOwogICAgaWYgKHR5cGUgPT0gIlsiKSByZXR1cm4gY29udChwdXNobGV4KCJdIiksIGFycmF5TGl0ZXJhbCwgcG9wbGV4LCBtYXliZW9wKTsKICAgIGlmICh0eXBlID09ICJ7IikgcmV0dXJuIGNvbnRDb21tYXNlcChvYmpwcm9wLCAifSIsIG51bGwsIG1heWJlb3ApOwogICAgaWYgKHR5cGUgPT0gInF1YXNpIikgcmV0dXJuIHBhc3MocXVhc2ksIG1heWJlb3ApOwogICAgaWYgKHR5cGUgPT0gIm5ldyIpIHJldHVybiBjb250KG1heWJlVGFyZ2V0KG5vQ29tbWEpKTsKICAgIGlmICh0eXBlID09ICJpbXBvcnQiKSByZXR1cm4gY29udChleHByZXNzaW9uKTsKICAgIHJldHVybiBjb250KCk7CiAgfQogIGZ1bmN0aW9uIG1heWJlZXhwcmVzc2lvbih0eXBlKSB7CiAgICBpZiAodHlwZS5tYXRjaCgvWztcfVwpXF0sXS8pKSByZXR1cm4gcGFzcygpOwogICAgcmV0dXJuIHBhc3MoZXhwcmVzc2lvbik7CiAgfQoKICBmdW5jdGlvbiBtYXliZW9wZXJhdG9yQ29tbWEodHlwZSwgdmFsdWUpIHsKICAgIGlmICh0eXBlID09ICIsIikgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbik7CiAgICByZXR1cm4gbWF5YmVvcGVyYXRvck5vQ29tbWEodHlwZSwgdmFsdWUsIGZhbHNlKTsKICB9CiAgZnVuY3Rpb24gbWF5YmVvcGVyYXRvck5vQ29tbWEodHlwZSwgdmFsdWUsIG5vQ29tbWEpIHsKICAgIHZhciBtZSA9IG5vQ29tbWEgPT0gZmFsc2UgPyBtYXliZW9wZXJhdG9yQ29tbWEgOiBtYXliZW9wZXJhdG9yTm9Db21tYTsKICAgIHZhciBleHByID0gbm9Db21tYSA9PSBmYWxzZSA/IGV4cHJlc3Npb24gOiBleHByZXNzaW9uTm9Db21tYTsKICAgIGlmICh0eXBlID09ICI9PiIpIHJldHVybiBjb250KHB1c2hjb250ZXh0LCBub0NvbW1hID8gYXJyb3dCb2R5Tm9Db21tYSA6IGFycm93Qm9keSwgcG9wY29udGV4dCk7CiAgICBpZiAodHlwZSA9PSAib3BlcmF0b3IiKSB7CiAgICAgIGlmICgvXCtcK3wtLS8udGVzdCh2YWx1ZSkgfHwgaXNUUyAmJiB2YWx1ZSA9PSAiISIpIHJldHVybiBjb250KG1lKTsKICAgICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gIjwiICYmIGN4LnN0cmVhbS5tYXRjaCgvXihbXj5dfDwuKj8+KSo+XHMqXCgvLCBmYWxzZSkpCiAgICAgICAgcmV0dXJuIGNvbnQocHVzaGxleCgiPiIpLCBjb21tYXNlcCh0eXBlZXhwciwgIj4iKSwgcG9wbGV4LCBtZSk7CiAgICAgIGlmICh2YWx1ZSA9PSAiPyIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGV4cGVjdCgiOiIpLCBleHByKTsKICAgICAgcmV0dXJuIGNvbnQoZXhwcik7CiAgICB9CiAgICBpZiAodHlwZSA9PSAicXVhc2kiKSB7IHJldHVybiBwYXNzKHF1YXNpLCBtZSk7IH0KICAgIGlmICh0eXBlID09ICI7IikgcmV0dXJuOwogICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udENvbW1hc2VwKGV4cHJlc3Npb25Ob0NvbW1hLCAiKSIsICJjYWxsIiwgbWUpOwogICAgaWYgKHR5cGUgPT0gIi4iKSByZXR1cm4gY29udChwcm9wZXJ0eSwgbWUpOwogICAgaWYgKHR5cGUgPT0gIlsiKSByZXR1cm4gY29udChwdXNobGV4KCJdIiksIG1heWJlZXhwcmVzc2lvbiwgZXhwZWN0KCJdIiksIHBvcGxleCwgbWUpOwogICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gImFzIikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KHR5cGVleHByLCBtZSkgfQogICAgaWYgKHR5cGUgPT0gInJlZ2V4cCIpIHsKICAgICAgY3guc3RhdGUubGFzdFR5cGUgPSBjeC5tYXJrZWQgPSAib3BlcmF0b3IiCiAgICAgIGN4LnN0cmVhbS5iYWNrVXAoY3guc3RyZWFtLnBvcyAtIGN4LnN0cmVhbS5zdGFydCAtIDEpCiAgICAgIHJldHVybiBjb250KGV4cHIpCiAgICB9CiAgfQogIGZ1bmN0aW9uIHF1YXNpKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSAhPSAicXVhc2kiKSByZXR1cm4gcGFzcygpOwogICAgaWYgKHZhbHVlLnNsaWNlKHZhbHVlLmxlbmd0aCAtIDIpICE9ICIkeyIpIHJldHVybiBjb250KHF1YXNpKTsKICAgIHJldHVybiBjb250KGV4cHJlc3Npb24sIGNvbnRpbnVlUXVhc2kpOwogIH0KICBmdW5jdGlvbiBjb250aW51ZVF1YXNpKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICJ9IikgewogICAgICBjeC5tYXJrZWQgPSAic3RyaW5nLTIiOwogICAgICBjeC5zdGF0ZS50b2tlbml6ZSA9IHRva2VuUXVhc2k7CiAgICAgIHJldHVybiBjb250KHF1YXNpKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gYXJyb3dCb2R5KHR5cGUpIHsKICAgIGZpbmRGYXRBcnJvdyhjeC5zdHJlYW0sIGN4LnN0YXRlKTsKICAgIHJldHVybiBwYXNzKHR5cGUgPT0gInsiID8gc3RhdGVtZW50IDogZXhwcmVzc2lvbik7CiAgfQogIGZ1bmN0aW9uIGFycm93Qm9keU5vQ29tbWEodHlwZSkgewogICAgZmluZEZhdEFycm93KGN4LnN0cmVhbSwgY3guc3RhdGUpOwogICAgcmV0dXJuIHBhc3ModHlwZSA9PSAieyIgPyBzdGF0ZW1lbnQgOiBleHByZXNzaW9uTm9Db21tYSk7CiAgfQogIGZ1bmN0aW9uIG1heWJlVGFyZ2V0KG5vQ29tbWEpIHsKICAgIHJldHVybiBmdW5jdGlvbih0eXBlKSB7CiAgICAgIGlmICh0eXBlID09ICIuIikgcmV0dXJuIGNvbnQobm9Db21tYSA/IHRhcmdldE5vQ29tbWEgOiB0YXJnZXQpOwogICAgICBlbHNlIGlmICh0eXBlID09ICJ2YXJpYWJsZSIgJiYgaXNUUykgcmV0dXJuIGNvbnQobWF5YmVUeXBlQXJncywgbm9Db21tYSA/IG1heWJlb3BlcmF0b3JOb0NvbW1hIDogbWF5YmVvcGVyYXRvckNvbW1hKQogICAgICBlbHNlIHJldHVybiBwYXNzKG5vQ29tbWEgPyBleHByZXNzaW9uTm9Db21tYSA6IGV4cHJlc3Npb24pOwogICAgfTsKICB9CiAgZnVuY3Rpb24gdGFyZ2V0KF8sIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gInRhcmdldCIpIHsgY3gubWFya2VkID0gImtleXdvcmQiOyByZXR1cm4gY29udChtYXliZW9wZXJhdG9yQ29tbWEpOyB9CiAgfQogIGZ1bmN0aW9uIHRhcmdldE5vQ29tbWEoXywgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAidGFyZ2V0IikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KG1heWJlb3BlcmF0b3JOb0NvbW1hKTsgfQogIH0KICBmdW5jdGlvbiBtYXliZWxhYmVsKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICI6IikgcmV0dXJuIGNvbnQocG9wbGV4LCBzdGF0ZW1lbnQpOwogICAgcmV0dXJuIHBhc3MobWF5YmVvcGVyYXRvckNvbW1hLCBleHBlY3QoIjsiKSwgcG9wbGV4KTsKICB9CiAgZnVuY3Rpb24gcHJvcGVydHkodHlwZSkgewogICAgaWYgKHR5cGUgPT0gInZhcmlhYmxlIikge2N4Lm1hcmtlZCA9ICJwcm9wZXJ0eSI7IHJldHVybiBjb250KCk7fQogIH0KICBmdW5jdGlvbiBvYmpwcm9wKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSA9PSAiYXN5bmMiKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJwcm9wZXJ0eSI7CiAgICAgIHJldHVybiBjb250KG9ianByb3ApOwogICAgfSBlbHNlIGlmICh0eXBlID09ICJ2YXJpYWJsZSIgfHwgY3guc3R5bGUgPT0gImtleXdvcmQiKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJwcm9wZXJ0eSI7CiAgICAgIGlmICh2YWx1ZSA9PSAiZ2V0IiB8fCB2YWx1ZSA9PSAic2V0IikgcmV0dXJuIGNvbnQoZ2V0dGVyU2V0dGVyKTsKICAgICAgdmFyIG0gLy8gV29yayBhcm91bmQgZmF0LWFycm93LWRldGVjdGlvbiBjb21wbGljYXRpb24gZm9yIGRldGVjdGluZyB0eXBlc2NyaXB0IHR5cGVkIGFycm93IHBhcmFtcwogICAgICBpZiAoaXNUUyAmJiBjeC5zdGF0ZS5mYXRBcnJvd0F0ID09IGN4LnN0cmVhbS5zdGFydCAmJiAobSA9IGN4LnN0cmVhbS5tYXRjaCgvXlxzKjpccyovLCBmYWxzZSkpKQogICAgICAgIGN4LnN0YXRlLmZhdEFycm93QXQgPSBjeC5zdHJlYW0ucG9zICsgbVswXS5sZW5ndGgKICAgICAgcmV0dXJuIGNvbnQoYWZ0ZXJwcm9wKTsKICAgIH0gZWxzZSBpZiAodHlwZSA9PSAibnVtYmVyIiB8fCB0eXBlID09ICJzdHJpbmciKSB7CiAgICAgIGN4Lm1hcmtlZCA9IGpzb25sZE1vZGUgPyAicHJvcGVydHkiIDogKGN4LnN0eWxlICsgIiBwcm9wZXJ0eSIpOwogICAgICByZXR1cm4gY29udChhZnRlcnByb3ApOwogICAgfSBlbHNlIGlmICh0eXBlID09ICJqc29ubGQta2V5d29yZCIpIHsKICAgICAgcmV0dXJuIGNvbnQoYWZ0ZXJwcm9wKTsKICAgIH0gZWxzZSBpZiAoaXNUUyAmJiBpc01vZGlmaWVyKHZhbHVlKSkgewogICAgICBjeC5tYXJrZWQgPSAia2V5d29yZCIKICAgICAgcmV0dXJuIGNvbnQob2JqcHJvcCkKICAgIH0gZWxzZSBpZiAodHlwZSA9PSAiWyIpIHsKICAgICAgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbiwgbWF5YmV0eXBlLCBleHBlY3QoIl0iKSwgYWZ0ZXJwcm9wKTsKICAgIH0gZWxzZSBpZiAodHlwZSA9PSAic3ByZWFkIikgewogICAgICByZXR1cm4gY29udChleHByZXNzaW9uTm9Db21tYSwgYWZ0ZXJwcm9wKTsKICAgIH0gZWxzZSBpZiAodmFsdWUgPT0gIioiKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsKICAgICAgcmV0dXJuIGNvbnQob2JqcHJvcCk7CiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gIjoiKSB7CiAgICAgIHJldHVybiBwYXNzKGFmdGVycHJvcCkKICAgIH0KICB9CiAgZnVuY3Rpb24gZ2V0dGVyU2V0dGVyKHR5cGUpIHsKICAgIGlmICh0eXBlICE9ICJ2YXJpYWJsZSIpIHJldHVybiBwYXNzKGFmdGVycHJvcCk7CiAgICBjeC5tYXJrZWQgPSAicHJvcGVydHkiOwogICAgcmV0dXJuIGNvbnQoZnVuY3Rpb25kZWYpOwogIH0KICBmdW5jdGlvbiBhZnRlcnByb3AodHlwZSkgewogICAgaWYgKHR5cGUgPT0gIjoiKSByZXR1cm4gY29udChleHByZXNzaW9uTm9Db21tYSk7CiAgICBpZiAodHlwZSA9PSAiKCIpIHJldHVybiBwYXNzKGZ1bmN0aW9uZGVmKTsKICB9CiAgZnVuY3Rpb24gY29tbWFzZXAod2hhdCwgZW5kLCBzZXApIHsKICAgIGZ1bmN0aW9uIHByb2NlZWQodHlwZSwgdmFsdWUpIHsKICAgICAgaWYgKHNlcCA/IHNlcC5pbmRleE9mKHR5cGUpID4gLTEgOiB0eXBlID09ICIsIikgewogICAgICAgIHZhciBsZXggPSBjeC5zdGF0ZS5sZXhpY2FsOwogICAgICAgIGlmIChsZXguaW5mbyA9PSAiY2FsbCIpIGxleC5wb3MgPSAobGV4LnBvcyB8fCAwKSArIDE7CiAgICAgICAgcmV0dXJuIGNvbnQoZnVuY3Rpb24odHlwZSwgdmFsdWUpIHsKICAgICAgICAgIGlmICh0eXBlID09IGVuZCB8fCB2YWx1ZSA9PSBlbmQpIHJldHVybiBwYXNzKCkKICAgICAgICAgIHJldHVybiBwYXNzKHdoYXQpCiAgICAgICAgfSwgcHJvY2VlZCk7CiAgICAgIH0KICAgICAgaWYgKHR5cGUgPT0gZW5kIHx8IHZhbHVlID09IGVuZCkgcmV0dXJuIGNvbnQoKTsKICAgICAgaWYgKHNlcCAmJiBzZXAuaW5kZXhPZigiOyIpID4gLTEpIHJldHVybiBwYXNzKHdoYXQpCiAgICAgIHJldHVybiBjb250KGV4cGVjdChlbmQpKTsKICAgIH0KICAgIHJldHVybiBmdW5jdGlvbih0eXBlLCB2YWx1ZSkgewogICAgICBpZiAodHlwZSA9PSBlbmQgfHwgdmFsdWUgPT0gZW5kKSByZXR1cm4gY29udCgpOwogICAgICByZXR1cm4gcGFzcyh3aGF0LCBwcm9jZWVkKTsKICAgIH07CiAgfQogIGZ1bmN0aW9uIGNvbnRDb21tYXNlcCh3aGF0LCBlbmQsIGluZm8pIHsKICAgIGZvciAodmFyIGkgPSAzOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKQogICAgICBjeC5jYy5wdXNoKGFyZ3VtZW50c1tpXSk7CiAgICByZXR1cm4gY29udChwdXNobGV4KGVuZCwgaW5mbyksIGNvbW1hc2VwKHdoYXQsIGVuZCksIHBvcGxleCk7CiAgfQogIGZ1bmN0aW9uIGJsb2NrKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICJ9IikgcmV0dXJuIGNvbnQoKTsKICAgIHJldHVybiBwYXNzKHN0YXRlbWVudCwgYmxvY2spOwogIH0KICBmdW5jdGlvbiBtYXliZXR5cGUodHlwZSwgdmFsdWUpIHsKICAgIGlmIChpc1RTKSB7CiAgICAgIGlmICh0eXBlID09ICI6IikgcmV0dXJuIGNvbnQodHlwZWV4cHIpOwogICAgICBpZiAodmFsdWUgPT0gIj8iKSByZXR1cm4gY29udChtYXliZXR5cGUpOwogICAgfQogIH0KICBmdW5jdGlvbiBtYXliZXR5cGVPckluKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAoaXNUUyAmJiAodHlwZSA9PSAiOiIgfHwgdmFsdWUgPT0gImluIikpIHJldHVybiBjb250KHR5cGVleHByKQogIH0KICBmdW5jdGlvbiBtYXliZXJldHR5cGUodHlwZSkgewogICAgaWYgKGlzVFMgJiYgdHlwZSA9PSAiOiIpIHsKICAgICAgaWYgKGN4LnN0cmVhbS5tYXRjaCgvXlxzKlx3K1xzK2lzXGIvLCBmYWxzZSkpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGlzS1csIHR5cGVleHByKQogICAgICBlbHNlIHJldHVybiBjb250KHR5cGVleHByKQogICAgfQogIH0KICBmdW5jdGlvbiBpc0tXKF8sIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gImlzIikgewogICAgICBjeC5tYXJrZWQgPSAia2V5d29yZCIKICAgICAgcmV0dXJuIGNvbnQoKQogICAgfQogIH0KICBmdW5jdGlvbiB0eXBlZXhwcih0eXBlLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlID09ICJrZXlvZiIgfHwgdmFsdWUgPT0gInR5cGVvZiIgfHwgdmFsdWUgPT0gImluZmVyIikgewogICAgICBjeC5tYXJrZWQgPSAia2V5d29yZCIKICAgICAgcmV0dXJuIGNvbnQodmFsdWUgPT0gInR5cGVvZiIgPyBleHByZXNzaW9uTm9Db21tYSA6IHR5cGVleHByKQogICAgfQogICAgaWYgKHR5cGUgPT0gInZhcmlhYmxlIiB8fCB2YWx1ZSA9PSAidm9pZCIpIHsKICAgICAgY3gubWFya2VkID0gInR5cGUiCiAgICAgIHJldHVybiBjb250KGFmdGVyVHlwZSkKICAgIH0KICAgIGlmICh2YWx1ZSA9PSAifCIgfHwgdmFsdWUgPT0gIiYiKSByZXR1cm4gY29udCh0eXBlZXhwcikKICAgIGlmICh0eXBlID09ICJzdHJpbmciIHx8IHR5cGUgPT0gIm51bWJlciIgfHwgdHlwZSA9PSAiYXRvbSIpIHJldHVybiBjb250KGFmdGVyVHlwZSk7CiAgICBpZiAodHlwZSA9PSAiWyIpIHJldHVybiBjb250KHB1c2hsZXgoIl0iKSwgY29tbWFzZXAodHlwZWV4cHIsICJdIiwgIiwiKSwgcG9wbGV4LCBhZnRlclR5cGUpCiAgICBpZiAodHlwZSA9PSAieyIpIHJldHVybiBjb250KHB1c2hsZXgoIn0iKSwgY29tbWFzZXAodHlwZXByb3AsICJ9IiwgIiw7IiksIHBvcGxleCwgYWZ0ZXJUeXBlKQogICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udChjb21tYXNlcCh0eXBlYXJnLCAiKSIpLCBtYXliZVJldHVyblR5cGUsIGFmdGVyVHlwZSkKICAgIGlmICh0eXBlID09ICI8IikgcmV0dXJuIGNvbnQoY29tbWFzZXAodHlwZWV4cHIsICI+IiksIHR5cGVleHByKQogIH0KICBmdW5jdGlvbiBtYXliZVJldHVyblR5cGUodHlwZSkgewogICAgaWYgKHR5cGUgPT0gIj0+IikgcmV0dXJuIGNvbnQodHlwZWV4cHIpCiAgfQogIGZ1bmN0aW9uIHR5cGVwcm9wKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSA9PSAidmFyaWFibGUiIHx8IGN4LnN0eWxlID09ICJrZXl3b3JkIikgewogICAgICBjeC5tYXJrZWQgPSAicHJvcGVydHkiCiAgICAgIHJldHVybiBjb250KHR5cGVwcm9wKQogICAgfSBlbHNlIGlmICh2YWx1ZSA9PSAiPyIgfHwgdHlwZSA9PSAibnVtYmVyIiB8fCB0eXBlID09ICJzdHJpbmciKSB7CiAgICAgIHJldHVybiBjb250KHR5cGVwcm9wKQogICAgfSBlbHNlIGlmICh0eXBlID09ICI6IikgewogICAgICByZXR1cm4gY29udCh0eXBlZXhwcikKICAgIH0gZWxzZSBpZiAodHlwZSA9PSAiWyIpIHsKICAgICAgcmV0dXJuIGNvbnQoZXhwZWN0KCJ2YXJpYWJsZSIpLCBtYXliZXR5cGVPckluLCBleHBlY3QoIl0iKSwgdHlwZXByb3ApCiAgICB9IGVsc2UgaWYgKHR5cGUgPT0gIigiKSB7CiAgICAgIHJldHVybiBwYXNzKGZ1bmN0aW9uZGVjbCwgdHlwZXByb3ApCiAgICB9CiAgfQogIGZ1bmN0aW9uIHR5cGVhcmcodHlwZSwgdmFsdWUpIHsKICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIgJiYgY3guc3RyZWFtLm1hdGNoKC9eXHMqWz86XS8sIGZhbHNlKSB8fCB2YWx1ZSA9PSAiPyIpIHJldHVybiBjb250KHR5cGVhcmcpCiAgICBpZiAodHlwZSA9PSAiOiIpIHJldHVybiBjb250KHR5cGVleHByKQogICAgaWYgKHR5cGUgPT0gInNwcmVhZCIpIHJldHVybiBjb250KHR5cGVhcmcpCiAgICByZXR1cm4gcGFzcyh0eXBlZXhwcikKICB9CiAgZnVuY3Rpb24gYWZ0ZXJUeXBlKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gIjwiKSByZXR1cm4gY29udChwdXNobGV4KCI+IiksIGNvbW1hc2VwKHR5cGVleHByLCAiPiIpLCBwb3BsZXgsIGFmdGVyVHlwZSkKICAgIGlmICh2YWx1ZSA9PSAifCIgfHwgdHlwZSA9PSAiLiIgfHwgdmFsdWUgPT0gIiYiKSByZXR1cm4gY29udCh0eXBlZXhwcikKICAgIGlmICh0eXBlID09ICJbIikgcmV0dXJuIGNvbnQodHlwZWV4cHIsIGV4cGVjdCgiXSIpLCBhZnRlclR5cGUpCiAgICBpZiAodmFsdWUgPT0gImV4dGVuZHMiIHx8IHZhbHVlID09ICJpbXBsZW1lbnRzIikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KHR5cGVleHByKSB9CiAgICBpZiAodmFsdWUgPT0gIj8iKSByZXR1cm4gY29udCh0eXBlZXhwciwgZXhwZWN0KCI6IiksIHR5cGVleHByKQogIH0KICBmdW5jdGlvbiBtYXliZVR5cGVBcmdzKF8sIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gIjwiKSByZXR1cm4gY29udChwdXNobGV4KCI+IiksIGNvbW1hc2VwKHR5cGVleHByLCAiPiIpLCBwb3BsZXgsIGFmdGVyVHlwZSkKICB9CiAgZnVuY3Rpb24gdHlwZXBhcmFtKCkgewogICAgcmV0dXJuIHBhc3ModHlwZWV4cHIsIG1heWJlVHlwZURlZmF1bHQpCiAgfQogIGZ1bmN0aW9uIG1heWJlVHlwZURlZmF1bHQoXywgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiPSIpIHJldHVybiBjb250KHR5cGVleHByKQogIH0KICBmdW5jdGlvbiB2YXJkZWYoXywgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiZW51bSIpIHtjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGVudW1kZWYpfQogICAgcmV0dXJuIHBhc3MocGF0dGVybiwgbWF5YmV0eXBlLCBtYXliZUFzc2lnbiwgdmFyZGVmQ29udCk7CiAgfQogIGZ1bmN0aW9uIHBhdHRlcm4odHlwZSwgdmFsdWUpIHsKICAgIGlmIChpc1RTICYmIGlzTW9kaWZpZXIodmFsdWUpKSB7IGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsgcmV0dXJuIGNvbnQocGF0dGVybikgfQogICAgaWYgKHR5cGUgPT0gInZhcmlhYmxlIikgeyByZWdpc3Rlcih2YWx1ZSk7IHJldHVybiBjb250KCk7IH0KICAgIGlmICh0eXBlID09ICJzcHJlYWQiKSByZXR1cm4gY29udChwYXR0ZXJuKTsKICAgIGlmICh0eXBlID09ICJbIikgcmV0dXJuIGNvbnRDb21tYXNlcChlbHRwYXR0ZXJuLCAiXSIpOwogICAgaWYgKHR5cGUgPT0gInsiKSByZXR1cm4gY29udENvbW1hc2VwKHByb3BwYXR0ZXJuLCAifSIpOwogIH0KICBmdW5jdGlvbiBwcm9wcGF0dGVybih0eXBlLCB2YWx1ZSkgewogICAgaWYgKHR5cGUgPT0gInZhcmlhYmxlIiAmJiAhY3guc3RyZWFtLm1hdGNoKC9eXHMqOi8sIGZhbHNlKSkgewogICAgICByZWdpc3Rlcih2YWx1ZSk7CiAgICAgIHJldHVybiBjb250KG1heWJlQXNzaWduKTsKICAgIH0KICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIGN4Lm1hcmtlZCA9ICJwcm9wZXJ0eSI7CiAgICBpZiAodHlwZSA9PSAic3ByZWFkIikgcmV0dXJuIGNvbnQocGF0dGVybik7CiAgICBpZiAodHlwZSA9PSAifSIpIHJldHVybiBwYXNzKCk7CiAgICBpZiAodHlwZSA9PSAiWyIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGV4cGVjdCgnXScpLCBleHBlY3QoJzonKSwgcHJvcHBhdHRlcm4pOwogICAgcmV0dXJuIGNvbnQoZXhwZWN0KCI6IiksIHBhdHRlcm4sIG1heWJlQXNzaWduKTsKICB9CiAgZnVuY3Rpb24gZWx0cGF0dGVybigpIHsKICAgIHJldHVybiBwYXNzKHBhdHRlcm4sIG1heWJlQXNzaWduKQogIH0KICBmdW5jdGlvbiBtYXliZUFzc2lnbihfdHlwZSwgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiPSIpIHJldHVybiBjb250KGV4cHJlc3Npb25Ob0NvbW1hKTsKICB9CiAgZnVuY3Rpb24gdmFyZGVmQ29udCh0eXBlKSB7CiAgICBpZiAodHlwZSA9PSAiLCIpIHJldHVybiBjb250KHZhcmRlZik7CiAgfQogIGZ1bmN0aW9uIG1heWJlZWxzZSh0eXBlLCB2YWx1ZSkgewogICAgaWYgKHR5cGUgPT0gImtleXdvcmQgYiIgJiYgdmFsdWUgPT0gImVsc2UiKSByZXR1cm4gY29udChwdXNobGV4KCJmb3JtIiwgImVsc2UiKSwgc3RhdGVtZW50LCBwb3BsZXgpOwogIH0KICBmdW5jdGlvbiBmb3JzcGVjKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gImF3YWl0IikgcmV0dXJuIGNvbnQoZm9yc3BlYyk7CiAgICBpZiAodHlwZSA9PSAiKCIpIHJldHVybiBjb250KHB1c2hsZXgoIikiKSwgZm9yc3BlYzEsIHBvcGxleCk7CiAgfQogIGZ1bmN0aW9uIGZvcnNwZWMxKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICJ2YXIiKSByZXR1cm4gY29udCh2YXJkZWYsIGZvcnNwZWMyKTsKICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIHJldHVybiBjb250KGZvcnNwZWMyKTsKICAgIHJldHVybiBwYXNzKGZvcnNwZWMyKQogIH0KICBmdW5jdGlvbiBmb3JzcGVjMih0eXBlLCB2YWx1ZSkgewogICAgaWYgKHR5cGUgPT0gIikiKSByZXR1cm4gY29udCgpCiAgICBpZiAodHlwZSA9PSAiOyIpIHJldHVybiBjb250KGZvcnNwZWMyKQogICAgaWYgKHZhbHVlID09ICJpbiIgfHwgdmFsdWUgPT0gIm9mIikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGV4cHJlc3Npb24sIGZvcnNwZWMyKSB9CiAgICByZXR1cm4gcGFzcyhleHByZXNzaW9uLCBmb3JzcGVjMikKICB9CiAgZnVuY3Rpb24gZnVuY3Rpb25kZWYodHlwZSwgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiKiIpIHtjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGZ1bmN0aW9uZGVmKTt9CiAgICBpZiAodHlwZSA9PSAidmFyaWFibGUiKSB7cmVnaXN0ZXIodmFsdWUpOyByZXR1cm4gY29udChmdW5jdGlvbmRlZik7fQogICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udChwdXNoY29udGV4dCwgcHVzaGxleCgiKSIpLCBjb21tYXNlcChmdW5hcmcsICIpIiksIHBvcGxleCwgbWF5YmVyZXR0eXBlLCBzdGF0ZW1lbnQsIHBvcGNvbnRleHQpOwogICAgaWYgKGlzVFMgJiYgdmFsdWUgPT0gIjwiKSByZXR1cm4gY29udChwdXNobGV4KCI+IiksIGNvbW1hc2VwKHR5cGVwYXJhbSwgIj4iKSwgcG9wbGV4LCBmdW5jdGlvbmRlZikKICB9CiAgZnVuY3Rpb24gZnVuY3Rpb25kZWNsKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodmFsdWUgPT0gIioiKSB7Y3gubWFya2VkID0gImtleXdvcmQiOyByZXR1cm4gY29udChmdW5jdGlvbmRlY2wpO30KICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIHtyZWdpc3Rlcih2YWx1ZSk7IHJldHVybiBjb250KGZ1bmN0aW9uZGVjbCk7fQogICAgaWYgKHR5cGUgPT0gIigiKSByZXR1cm4gY29udChwdXNoY29udGV4dCwgcHVzaGxleCgiKSIpLCBjb21tYXNlcChmdW5hcmcsICIpIiksIHBvcGxleCwgbWF5YmVyZXR0eXBlLCBwb3Bjb250ZXh0KTsKICAgIGlmIChpc1RTICYmIHZhbHVlID09ICI8IikgcmV0dXJuIGNvbnQocHVzaGxleCgiPiIpLCBjb21tYXNlcCh0eXBlcGFyYW0sICI+IiksIHBvcGxleCwgZnVuY3Rpb25kZWNsKQogIH0KICBmdW5jdGlvbiB0eXBlbmFtZSh0eXBlLCB2YWx1ZSkgewogICAgaWYgKHR5cGUgPT0gImtleXdvcmQiIHx8IHR5cGUgPT0gInZhcmlhYmxlIikgewogICAgICBjeC5tYXJrZWQgPSAidHlwZSIKICAgICAgcmV0dXJuIGNvbnQodHlwZW5hbWUpCiAgICB9IGVsc2UgaWYgKHZhbHVlID09ICI8IikgewogICAgICByZXR1cm4gY29udChwdXNobGV4KCI+IiksIGNvbW1hc2VwKHR5cGVwYXJhbSwgIj4iKSwgcG9wbGV4KQogICAgfQogIH0KICBmdW5jdGlvbiBmdW5hcmcodHlwZSwgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiQCIpIGNvbnQoZXhwcmVzc2lvbiwgZnVuYXJnKQogICAgaWYgKHR5cGUgPT0gInNwcmVhZCIpIHJldHVybiBjb250KGZ1bmFyZyk7CiAgICBpZiAoaXNUUyAmJiBpc01vZGlmaWVyKHZhbHVlKSkgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGZ1bmFyZyk7IH0KICAgIGlmIChpc1RTICYmIHR5cGUgPT0gInRoaXMiKSByZXR1cm4gY29udChtYXliZXR5cGUsIG1heWJlQXNzaWduKQogICAgcmV0dXJuIHBhc3MocGF0dGVybiwgbWF5YmV0eXBlLCBtYXliZUFzc2lnbik7CiAgfQogIGZ1bmN0aW9uIGNsYXNzRXhwcmVzc2lvbih0eXBlLCB2YWx1ZSkgewogICAgLy8gQ2xhc3MgZXhwcmVzc2lvbnMgbWF5IGhhdmUgYW4gb3B0aW9uYWwgbmFtZS4KICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIHJldHVybiBjbGFzc05hbWUodHlwZSwgdmFsdWUpOwogICAgcmV0dXJuIGNsYXNzTmFtZUFmdGVyKHR5cGUsIHZhbHVlKTsKICB9CiAgZnVuY3Rpb24gY2xhc3NOYW1lKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSA9PSAidmFyaWFibGUiKSB7cmVnaXN0ZXIodmFsdWUpOyByZXR1cm4gY29udChjbGFzc05hbWVBZnRlcik7fQogIH0KICBmdW5jdGlvbiBjbGFzc05hbWVBZnRlcih0eXBlLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlID09ICI8IikgcmV0dXJuIGNvbnQocHVzaGxleCgiPiIpLCBjb21tYXNlcCh0eXBlcGFyYW0sICI+IiksIHBvcGxleCwgY2xhc3NOYW1lQWZ0ZXIpCiAgICBpZiAodmFsdWUgPT0gImV4dGVuZHMiIHx8IHZhbHVlID09ICJpbXBsZW1lbnRzIiB8fCAoaXNUUyAmJiB0eXBlID09ICIsIikpIHsKICAgICAgaWYgKHZhbHVlID09ICJpbXBsZW1lbnRzIikgY3gubWFya2VkID0gImtleXdvcmQiOwogICAgICByZXR1cm4gY29udChpc1RTID8gdHlwZWV4cHIgOiBleHByZXNzaW9uLCBjbGFzc05hbWVBZnRlcik7CiAgICB9CiAgICBpZiAodHlwZSA9PSAieyIpIHJldHVybiBjb250KHB1c2hsZXgoIn0iKSwgY2xhc3NCb2R5LCBwb3BsZXgpOwogIH0KICBmdW5jdGlvbiBjbGFzc0JvZHkodHlwZSwgdmFsdWUpIHsKICAgIGlmICh0eXBlID09ICJhc3luYyIgfHwKICAgICAgICAodHlwZSA9PSAidmFyaWFibGUiICYmCiAgICAgICAgICh2YWx1ZSA9PSAic3RhdGljIiB8fCB2YWx1ZSA9PSAiZ2V0IiB8fCB2YWx1ZSA9PSAic2V0IiB8fCAoaXNUUyAmJiBpc01vZGlmaWVyKHZhbHVlKSkpICYmCiAgICAgICAgIGN4LnN0cmVhbS5tYXRjaCgvXlxzK1tcdyRceGExLVx1ZmZmZl0vLCBmYWxzZSkpKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsKICAgICAgcmV0dXJuIGNvbnQoY2xhc3NCb2R5KTsKICAgIH0KICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIgfHwgY3guc3R5bGUgPT0gImtleXdvcmQiKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJwcm9wZXJ0eSI7CiAgICAgIHJldHVybiBjb250KGlzVFMgPyBjbGFzc2ZpZWxkIDogZnVuY3Rpb25kZWYsIGNsYXNzQm9keSk7CiAgICB9CiAgICBpZiAodHlwZSA9PSAibnVtYmVyIiB8fCB0eXBlID09ICJzdHJpbmciKSByZXR1cm4gY29udChpc1RTID8gY2xhc3NmaWVsZCA6IGZ1bmN0aW9uZGVmLCBjbGFzc0JvZHkpOwogICAgaWYgKHR5cGUgPT0gIlsiKQogICAgICByZXR1cm4gY29udChleHByZXNzaW9uLCBtYXliZXR5cGUsIGV4cGVjdCgiXSIpLCBpc1RTID8gY2xhc3NmaWVsZCA6IGZ1bmN0aW9uZGVmLCBjbGFzc0JvZHkpCiAgICBpZiAodmFsdWUgPT0gIioiKSB7CiAgICAgIGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsKICAgICAgcmV0dXJuIGNvbnQoY2xhc3NCb2R5KTsKICAgIH0KICAgIGlmIChpc1RTICYmIHR5cGUgPT0gIigiKSByZXR1cm4gcGFzcyhmdW5jdGlvbmRlY2wsIGNsYXNzQm9keSkKICAgIGlmICh0eXBlID09ICI7IiB8fCB0eXBlID09ICIsIikgcmV0dXJuIGNvbnQoY2xhc3NCb2R5KTsKICAgIGlmICh0eXBlID09ICJ9IikgcmV0dXJuIGNvbnQoKTsKICAgIGlmICh2YWx1ZSA9PSAiQCIpIHJldHVybiBjb250KGV4cHJlc3Npb24sIGNsYXNzQm9keSkKICB9CiAgZnVuY3Rpb24gY2xhc3NmaWVsZCh0eXBlLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlID09ICI/IikgcmV0dXJuIGNvbnQoY2xhc3NmaWVsZCkKICAgIGlmICh0eXBlID09ICI6IikgcmV0dXJuIGNvbnQodHlwZWV4cHIsIG1heWJlQXNzaWduKQogICAgaWYgKHZhbHVlID09ICI9IikgcmV0dXJuIGNvbnQoZXhwcmVzc2lvbk5vQ29tbWEpCiAgICB2YXIgY29udGV4dCA9IGN4LnN0YXRlLmxleGljYWwucHJldiwgaXNJbnRlcmZhY2UgPSBjb250ZXh0ICYmIGNvbnRleHQuaW5mbyA9PSAiaW50ZXJmYWNlIgogICAgcmV0dXJuIHBhc3MoaXNJbnRlcmZhY2UgPyBmdW5jdGlvbmRlY2wgOiBmdW5jdGlvbmRlZikKICB9CiAgZnVuY3Rpb24gYWZ0ZXJFeHBvcnQodHlwZSwgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiKiIpIHsgY3gubWFya2VkID0gImtleXdvcmQiOyByZXR1cm4gY29udChtYXliZUZyb20sIGV4cGVjdCgiOyIpKTsgfQogICAgaWYgKHZhbHVlID09ICJkZWZhdWx0IikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGV4cHJlc3Npb24sIGV4cGVjdCgiOyIpKTsgfQogICAgaWYgKHR5cGUgPT0gInsiKSByZXR1cm4gY29udChjb21tYXNlcChleHBvcnRGaWVsZCwgIn0iKSwgbWF5YmVGcm9tLCBleHBlY3QoIjsiKSk7CiAgICByZXR1cm4gcGFzcyhzdGF0ZW1lbnQpOwogIH0KICBmdW5jdGlvbiBleHBvcnRGaWVsZCh0eXBlLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlID09ICJhcyIpIHsgY3gubWFya2VkID0gImtleXdvcmQiOyByZXR1cm4gY29udChleHBlY3QoInZhcmlhYmxlIikpOyB9CiAgICBpZiAodHlwZSA9PSAidmFyaWFibGUiKSByZXR1cm4gcGFzcyhleHByZXNzaW9uTm9Db21tYSwgZXhwb3J0RmllbGQpOwogIH0KICBmdW5jdGlvbiBhZnRlckltcG9ydCh0eXBlKSB7CiAgICBpZiAodHlwZSA9PSAic3RyaW5nIikgcmV0dXJuIGNvbnQoKTsKICAgIGlmICh0eXBlID09ICIoIikgcmV0dXJuIHBhc3MoZXhwcmVzc2lvbik7CiAgICByZXR1cm4gcGFzcyhpbXBvcnRTcGVjLCBtYXliZU1vcmVJbXBvcnRzLCBtYXliZUZyb20pOwogIH0KICBmdW5jdGlvbiBpbXBvcnRTcGVjKHR5cGUsIHZhbHVlKSB7CiAgICBpZiAodHlwZSA9PSAieyIpIHJldHVybiBjb250Q29tbWFzZXAoaW1wb3J0U3BlYywgIn0iKTsKICAgIGlmICh0eXBlID09ICJ2YXJpYWJsZSIpIHJlZ2lzdGVyKHZhbHVlKTsKICAgIGlmICh2YWx1ZSA9PSAiKiIpIGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsKICAgIHJldHVybiBjb250KG1heWJlQXMpOwogIH0KICBmdW5jdGlvbiBtYXliZU1vcmVJbXBvcnRzKHR5cGUpIHsKICAgIGlmICh0eXBlID09ICIsIikgcmV0dXJuIGNvbnQoaW1wb3J0U3BlYywgbWF5YmVNb3JlSW1wb3J0cykKICB9CiAgZnVuY3Rpb24gbWF5YmVBcyhfdHlwZSwgdmFsdWUpIHsKICAgIGlmICh2YWx1ZSA9PSAiYXMiKSB7IGN4Lm1hcmtlZCA9ICJrZXl3b3JkIjsgcmV0dXJuIGNvbnQoaW1wb3J0U3BlYyk7IH0KICB9CiAgZnVuY3Rpb24gbWF5YmVGcm9tKF90eXBlLCB2YWx1ZSkgewogICAgaWYgKHZhbHVlID09ICJmcm9tIikgeyBjeC5tYXJrZWQgPSAia2V5d29yZCI7IHJldHVybiBjb250KGV4cHJlc3Npb24pOyB9CiAgfQogIGZ1bmN0aW9uIGFycmF5TGl0ZXJhbCh0eXBlKSB7CiAgICBpZiAodHlwZSA9PSAiXSIpIHJldHVybiBjb250KCk7CiAgICByZXR1cm4gcGFzcyhjb21tYXNlcChleHByZXNzaW9uTm9Db21tYSwgIl0iKSk7CiAgfQogIGZ1bmN0aW9uIGVudW1kZWYoKSB7CiAgICByZXR1cm4gcGFzcyhwdXNobGV4KCJmb3JtIiksIHBhdHRlcm4sIGV4cGVjdCgieyIpLCBwdXNobGV4KCJ9IiksIGNvbW1hc2VwKGVudW1tZW1iZXIsICJ9IiksIHBvcGxleCwgcG9wbGV4KQogIH0KICBmdW5jdGlvbiBlbnVtbWVtYmVyKCkgewogICAgcmV0dXJuIHBhc3MocGF0dGVybiwgbWF5YmVBc3NpZ24pOwogIH0KCiAgZnVuY3Rpb24gaXNDb250aW51ZWRTdGF0ZW1lbnQoc3RhdGUsIHRleHRBZnRlcikgewogICAgcmV0dXJuIHN0YXRlLmxhc3RUeXBlID09ICJvcGVyYXRvciIgfHwgc3RhdGUubGFzdFR5cGUgPT0gIiwiIHx8CiAgICAgIGlzT3BlcmF0b3JDaGFyLnRlc3QodGV4dEFmdGVyLmNoYXJBdCgwKSkgfHwKICAgICAgL1ssLl0vLnRlc3QodGV4dEFmdGVyLmNoYXJBdCgwKSk7CiAgfQoKICBmdW5jdGlvbiBleHByZXNzaW9uQWxsb3dlZChzdHJlYW0sIHN0YXRlLCBiYWNrVXApIHsKICAgIHJldHVybiBzdGF0ZS50b2tlbml6ZSA9PSB0b2tlbkJhc2UgJiYKICAgICAgL14oPzpvcGVyYXRvcnxzb2Z8a2V5d29yZCBbYmNkXXxjYXNlfG5ld3xleHBvcnR8ZGVmYXVsdHxzcHJlYWR8W1xbe31cKCw7Ol18PT4pJC8udGVzdChzdGF0ZS5sYXN0VHlwZSkgfHwKICAgICAgKHN0YXRlLmxhc3RUeXBlID09ICJxdWFzaSIgJiYgL1x7XHMqJC8udGVzdChzdHJlYW0uc3RyaW5nLnNsaWNlKDAsIHN0cmVhbS5wb3MgLSAoYmFja1VwIHx8IDApKSkpCiAgfQoKICAvLyBJbnRlcmZhY2UKCiAgcmV0dXJuIHsKICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uKGJhc2Vjb2x1bW4pIHsKICAgICAgdmFyIHN0YXRlID0gewogICAgICAgIHRva2VuaXplOiB0b2tlbkJhc2UsCiAgICAgICAgbGFzdFR5cGU6ICJzb2YiLAogICAgICAgIGNjOiBbXSwKICAgICAgICBsZXhpY2FsOiBuZXcgSlNMZXhpY2FsKChiYXNlY29sdW1uIHx8IDApIC0gaW5kZW50VW5pdCwgMCwgImJsb2NrIiwgZmFsc2UpLAogICAgICAgIGxvY2FsVmFyczogcGFyc2VyQ29uZmlnLmxvY2FsVmFycywKICAgICAgICBjb250ZXh0OiBwYXJzZXJDb25maWcubG9jYWxWYXJzICYmIG5ldyBDb250ZXh0KG51bGwsIG51bGwsIGZhbHNlKSwKICAgICAgICBpbmRlbnRlZDogYmFzZWNvbHVtbiB8fCAwCiAgICAgIH07CiAgICAgIGlmIChwYXJzZXJDb25maWcuZ2xvYmFsVmFycyAmJiB0eXBlb2YgcGFyc2VyQ29uZmlnLmdsb2JhbFZhcnMgPT0gIm9iamVjdCIpCiAgICAgICAgc3RhdGUuZ2xvYmFsVmFycyA9IHBhcnNlckNvbmZpZy5nbG9iYWxWYXJzOwogICAgICByZXR1cm4gc3RhdGU7CiAgICB9LAoKICAgIHRva2VuOiBmdW5jdGlvbihzdHJlYW0sIHN0YXRlKSB7CiAgICAgIGlmIChzdHJlYW0uc29sKCkpIHsKICAgICAgICBpZiAoIXN0YXRlLmxleGljYWwuaGFzT3duUHJvcGVydHkoImFsaWduIikpCiAgICAgICAgICBzdGF0ZS5sZXhpY2FsLmFsaWduID0gZmFsc2U7CiAgICAgICAgc3RhdGUuaW5kZW50ZWQgPSBzdHJlYW0uaW5kZW50YXRpb24oKTsKICAgICAgICBmaW5kRmF0QXJyb3coc3RyZWFtLCBzdGF0ZSk7CiAgICAgIH0KICAgICAgaWYgKHN0YXRlLnRva2VuaXplICE9IHRva2VuQ29tbWVudCAmJiBzdHJlYW0uZWF0U3BhY2UoKSkgcmV0dXJuIG51bGw7CiAgICAgIHZhciBzdHlsZSA9IHN0YXRlLnRva2VuaXplKHN0cmVhbSwgc3RhdGUpOwogICAgICBpZiAodHlwZSA9PSAiY29tbWVudCIpIHJldHVybiBzdHlsZTsKICAgICAgc3RhdGUubGFzdFR5cGUgPSB0eXBlID09ICJvcGVyYXRvciIgJiYgKGNvbnRlbnQgPT0gIisrIiB8fCBjb250ZW50ID09ICItLSIpID8gImluY2RlYyIgOiB0eXBlOwogICAgICByZXR1cm4gcGFyc2VKUyhzdGF0ZSwgc3R5bGUsIHR5cGUsIGNvbnRlbnQsIHN0cmVhbSk7CiAgICB9LAoKICAgIGluZGVudDogZnVuY3Rpb24oc3RhdGUsIHRleHRBZnRlcikgewogICAgICBpZiAoc3RhdGUudG9rZW5pemUgPT0gdG9rZW5Db21tZW50KSByZXR1cm4gQ29kZU1pcnJvci5QYXNzOwogICAgICBpZiAoc3RhdGUudG9rZW5pemUgIT0gdG9rZW5CYXNlKSByZXR1cm4gMDsKICAgICAgdmFyIGZpcnN0Q2hhciA9IHRleHRBZnRlciAmJiB0ZXh0QWZ0ZXIuY2hhckF0KDApLCBsZXhpY2FsID0gc3RhdGUubGV4aWNhbCwgdG9wCiAgICAgIC8vIEtsdWRnZSB0byBwcmV2ZW50ICdtYXliZWxzZScgZnJvbSBibG9ja2luZyBsZXhpY2FsIHNjb3BlIHBvcHMKICAgICAgaWYgKCEvXlxzKmVsc2VcYi8udGVzdCh0ZXh0QWZ0ZXIpKSBmb3IgKHZhciBpID0gc3RhdGUuY2MubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsKICAgICAgICB2YXIgYyA9IHN0YXRlLmNjW2ldOwogICAgICAgIGlmIChjID09IHBvcGxleCkgbGV4aWNhbCA9IGxleGljYWwucHJldjsKICAgICAgICBlbHNlIGlmIChjICE9IG1heWJlZWxzZSkgYnJlYWs7CiAgICAgIH0KICAgICAgd2hpbGUgKChsZXhpY2FsLnR5cGUgPT0gInN0YXQiIHx8IGxleGljYWwudHlwZSA9PSAiZm9ybSIpICYmCiAgICAgICAgICAgICAoZmlyc3RDaGFyID09ICJ9IiB8fCAoKHRvcCA9IHN0YXRlLmNjW3N0YXRlLmNjLmxlbmd0aCAtIDFdKSAmJgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0b3AgPT0gbWF5YmVvcGVyYXRvckNvbW1hIHx8IHRvcCA9PSBtYXliZW9wZXJhdG9yTm9Db21tYSkgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhL15bLFwuPStcLSo6P1tcKF0vLnRlc3QodGV4dEFmdGVyKSkpKQogICAgICAgIGxleGljYWwgPSBsZXhpY2FsLnByZXY7CiAgICAgIGlmIChzdGF0ZW1lbnRJbmRlbnQgJiYgbGV4aWNhbC50eXBlID09ICIpIiAmJiBsZXhpY2FsLnByZXYudHlwZSA9PSAic3RhdCIpCiAgICAgICAgbGV4aWNhbCA9IGxleGljYWwucHJldjsKICAgICAgdmFyIHR5cGUgPSBsZXhpY2FsLnR5cGUsIGNsb3NpbmcgPSBmaXJzdENoYXIgPT0gdHlwZTsKCiAgICAgIGlmICh0eXBlID09ICJ2YXJkZWYiKSByZXR1cm4gbGV4aWNhbC5pbmRlbnRlZCArIChzdGF0ZS5sYXN0VHlwZSA9PSAib3BlcmF0b3IiIHx8IHN0YXRlLmxhc3RUeXBlID09ICIsIiA/IGxleGljYWwuaW5mby5sZW5ndGggKyAxIDogMCk7CiAgICAgIGVsc2UgaWYgKHR5cGUgPT0gImZvcm0iICYmIGZpcnN0Q2hhciA9PSAieyIpIHJldHVybiBsZXhpY2FsLmluZGVudGVkOwogICAgICBlbHNlIGlmICh0eXBlID09ICJmb3JtIikgcmV0dXJuIGxleGljYWwuaW5kZW50ZWQgKyBpbmRlbnRVbml0OwogICAgICBlbHNlIGlmICh0eXBlID09ICJzdGF0IikKICAgICAgICByZXR1cm4gbGV4aWNhbC5pbmRlbnRlZCArIChpc0NvbnRpbnVlZFN0YXRlbWVudChzdGF0ZSwgdGV4dEFmdGVyKSA/IHN0YXRlbWVudEluZGVudCB8fCBpbmRlbnRVbml0IDogMCk7CiAgICAgIGVsc2UgaWYgKGxleGljYWwuaW5mbyA9PSAic3dpdGNoIiAmJiAhY2xvc2luZyAmJiBwYXJzZXJDb25maWcuZG91YmxlSW5kZW50U3dpdGNoICE9IGZhbHNlKQogICAgICAgIHJldHVybiBsZXhpY2FsLmluZGVudGVkICsgKC9eKD86Y2FzZXxkZWZhdWx0KVxiLy50ZXN0KHRleHRBZnRlcikgPyBpbmRlbnRVbml0IDogMiAqIGluZGVudFVuaXQpOwogICAgICBlbHNlIGlmIChsZXhpY2FsLmFsaWduKSByZXR1cm4gbGV4aWNhbC5jb2x1bW4gKyAoY2xvc2luZyA/IDAgOiAxKTsKICAgICAgZWxzZSByZXR1cm4gbGV4aWNhbC5pbmRlbnRlZCArIChjbG9zaW5nID8gMCA6IGluZGVudFVuaXQpOwogICAgfSwKCiAgICBlbGVjdHJpY0lucHV0OiAvXlxzKig/OmNhc2UgLio/OnxkZWZhdWx0Onxce3xcfSkkLywKICAgIGJsb2NrQ29tbWVudFN0YXJ0OiBqc29uTW9kZSA/IG51bGwgOiAiLyoiLAogICAgYmxvY2tDb21tZW50RW5kOiBqc29uTW9kZSA/IG51bGwgOiAiKi8iLAogICAgYmxvY2tDb21tZW50Q29udGludWU6IGpzb25Nb2RlID8gbnVsbCA6ICIgKiAiLAogICAgbGluZUNvbW1lbnQ6IGpzb25Nb2RlID8gbnVsbCA6ICIvLyIsCiAgICBmb2xkOiAiYnJhY2UiLAogICAgY2xvc2VCcmFja2V0czogIigpW117fScnXCJcImBgIiwKCiAgICBoZWxwZXJUeXBlOiBqc29uTW9kZSA/ICJqc29uIiA6ICJqYXZhc2NyaXB0IiwKICAgIGpzb25sZE1vZGU6IGpzb25sZE1vZGUsCiAgICBqc29uTW9kZToganNvbk1vZGUsCgogICAgZXhwcmVzc2lvbkFsbG93ZWQ6IGV4cHJlc3Npb25BbGxvd2VkLAoKICAgIHNraXBFeHByZXNzaW9uOiBmdW5jdGlvbihzdGF0ZSkgewogICAgICB2YXIgdG9wID0gc3RhdGUuY2Nbc3RhdGUuY2MubGVuZ3RoIC0gMV0KICAgICAgaWYgKHRvcCA9PSBleHByZXNzaW9uIHx8IHRvcCA9PSBleHByZXNzaW9uTm9Db21tYSkgc3RhdGUuY2MucG9wKCkKICAgIH0KICB9Owp9KTsKCkNvZGVNaXJyb3IucmVnaXN0ZXJIZWxwZXIoIndvcmRDaGFycyIsICJqYXZhc2NyaXB0IiwgL1tcdyRdLyk7CgpDb2RlTWlycm9yLmRlZmluZU1JTUUoInRleHQvamF2YXNjcmlwdCIsICJqYXZhc2NyaXB0Iik7CkNvZGVNaXJyb3IuZGVmaW5lTUlNRSgidGV4dC9lY21hc2NyaXB0IiwgImphdmFzY3JpcHQiKTsKQ29kZU1pcnJvci5kZWZpbmVNSU1FKCJhcHBsaWNhdGlvbi9qYXZhc2NyaXB0IiwgImphdmFzY3JpcHQiKTsKQ29kZU1pcnJvci5kZWZpbmVNSU1FKCJhcHBsaWNhdGlvbi94LWphdmFzY3JpcHQiLCAiamF2YXNjcmlwdCIpOwpDb2RlTWlycm9yLmRlZmluZU1JTUUoImFwcGxpY2F0aW9uL2VjbWFzY3JpcHQiLCAiamF2YXNjcmlwdCIpOwpDb2RlTWlycm9yLmRlZmluZU1JTUUoImFwcGxpY2F0aW9uL2pzb24iLCB7bmFtZTogImphdmFzY3JpcHQiLCBqc29uOiB0cnVlfSk7CkNvZGVNaXJyb3IuZGVmaW5lTUlNRSgiYXBwbGljYXRpb24veC1qc29uIiwge25hbWU6ICJqYXZhc2NyaXB0IiwganNvbjogdHJ1ZX0pOwpDb2RlTWlycm9yLmRlZmluZU1JTUUoImFwcGxpY2F0aW9uL2xkK2pzb24iLCB7bmFtZTogImphdmFzY3JpcHQiLCBqc29ubGQ6IHRydWV9KTsKQ29kZU1pcnJvci5kZWZpbmVNSU1FKCJ0ZXh0L3R5cGVzY3JpcHQiLCB7IG5hbWU6ICJqYXZhc2NyaXB0IiwgdHlwZXNjcmlwdDogdHJ1ZSB9KTsKQ29kZU1pcnJvci5kZWZpbmVNSU1FKCJhcHBsaWNhdGlvbi90eXBlc2NyaXB0IiwgeyBuYW1lOiAiamF2YXNjcmlwdCIsIHR5cGVzY3JpcHQ6IHRydWUgfSk7Cgp9KTsK","codemirror/xml.js":"","codemirror/css.js":"","codemirror/htmlmixed.js":"Ly8gQ29kZU1pcnJvciwgY29weXJpZ2h0IChjKSBieSBNYXJpam4gSGF2ZXJiZWtlIGFuZCBvdGhlcnMKLy8gRGlzdHJpYnV0ZWQgdW5kZXIgYW4gTUlUIGxpY2Vuc2U6IGh0dHBzOi8vY29kZW1pcnJvci5uZXQvTElDRU5TRQoKKGZ1bmN0aW9uKG1vZCkgewogIGlmICh0eXBlb2YgZXhwb3J0cyA9PSAib2JqZWN0IiAmJiB0eXBlb2YgbW9kdWxlID09ICJvYmplY3QiKSAvLyBDb21tb25KUwogICAgbW9kKHJlcXVpcmUoIi4uLy4uL2xpYi9jb2RlbWlycm9yIiksIHJlcXVpcmUoIi4uL3htbC94bWwiKSwgcmVxdWlyZSgiLi4vamF2YXNjcmlwdC9qYXZhc2NyaXB0IiksIHJlcXVpcmUoIi4uL2Nzcy9jc3MiKSk7CiAgZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PSAiZnVuY3Rpb24iICYmIGRlZmluZS5hbWQpIC8vIEFNRAogICAgZGVmaW5lKFsiLi4vLi4vbGliL2NvZGVtaXJyb3IiLCAiLi4veG1sL3htbCIsICIuLi9qYXZhc2NyaXB0L2phdmFzY3JpcHQiLCAiLi4vY3NzL2NzcyJdLCBtb2QpOwogIGVsc2UgLy8gUGxhaW4gYnJvd3NlciBlbnYKICAgIG1vZChDb2RlTWlycm9yKTsKfSkoZnVuY3Rpb24oQ29kZU1pcnJvcikgewogICJ1c2Ugc3RyaWN0IjsKCiAgdmFyIGRlZmF1bHRUYWdzID0gewogICAgc2NyaXB0OiBbCiAgICAgIFsibGFuZyIsIC8oamF2YXNjcmlwdHxiYWJlbCkvaSwgImphdmFzY3JpcHQiXSwKICAgICAgWyJ0eXBlIiwgL14oPzp0ZXh0fGFwcGxpY2F0aW9uKVwvKD86eC0pPyg/OmphdmF8ZWNtYSlzY3JpcHQkfF5tb2R1bGUkfF4kL2ksICJqYXZhc2NyaXB0Il0sCiAgICAgIFsidHlwZSIsIC8uLywgInRleHQvcGxhaW4iXSwKICAgICAgW251bGwsIG51bGwsICJqYXZhc2NyaXB0Il0KICAgIF0sCiAgICBzdHlsZTogIFsKICAgICAgWyJsYW5nIiwgL15jc3MkL2ksICJjc3MiXSwKICAgICAgWyJ0eXBlIiwgL14odGV4dFwvKT8oeC0pPyhzdHlsZXNoZWV0fGNzcykkL2ksICJjc3MiXSwKICAgICAgWyJ0eXBlIiwgLy4vLCAidGV4dC9wbGFpbiJdLAogICAgICBbbnVsbCwgbnVsbCwgImNzcyJdCiAgICBdCiAgfTsKCiAgZnVuY3Rpb24gbWF5YmVCYWNrdXAoc3RyZWFtLCBwYXQsIHN0eWxlKSB7CiAgICB2YXIgY3VyID0gc3RyZWFtLmN1cnJlbnQoKSwgY2xvc2UgPSBjdXIuc2VhcmNoKHBhdCk7CiAgICBpZiAoY2xvc2UgPiAtMSkgewogICAgICBzdHJlYW0uYmFja1VwKGN1ci5sZW5ndGggLSBjbG9zZSk7CiAgICB9IGVsc2UgaWYgKGN1ci5tYXRjaCgvPFwvPyQvKSkgewogICAgICBzdHJlYW0uYmFja1VwKGN1ci5sZW5ndGgpOwogICAgICBpZiAoIXN0cmVhbS5tYXRjaChwYXQsIGZhbHNlKSkgc3RyZWFtLm1hdGNoKGN1cik7CiAgICB9CiAgICByZXR1cm4gc3R5bGU7CiAgfQoKICB2YXIgYXR0clJlZ2V4cENhY2hlID0ge307CiAgZnVuY3Rpb24gZ2V0QXR0clJlZ2V4cChhdHRyKSB7CiAgICB2YXIgcmVnZXhwID0gYXR0clJlZ2V4cENhY2hlW2F0dHJdOwogICAgaWYgKHJlZ2V4cCkgcmV0dXJuIHJlZ2V4cDsKICAgIHJldHVybiBhdHRyUmVnZXhwQ2FjaGVbYXR0cl0gPSBuZXcgUmVnRXhwKCJcXHMrIiArIGF0dHIgKyAiXFxzKj1cXHMqKCd8XCIpPyhbXidcIl0rKSgnfFwiKT9cXHMqIik7CiAgfQoKICBmdW5jdGlvbiBnZXRBdHRyVmFsdWUodGV4dCwgYXR0cikgewogICAgdmFyIG1hdGNoID0gdGV4dC5tYXRjaChnZXRBdHRyUmVnZXhwKGF0dHIpKQogICAgcmV0dXJuIG1hdGNoID8gL15ccyooLio/KVxzKiQvLmV4ZWMobWF0Y2hbMl0pWzFdIDogIiIKICB9CgogIGZ1bmN0aW9uIGdldFRhZ1JlZ2V4cCh0YWdOYW1lLCBhbmNob3JlZCkgewogICAgcmV0dXJuIG5ldyBSZWdFeHAoKGFuY2hvcmVkID8gIl4iIDogIiIpICsgIjxcL1xzKiIgKyB0YWdOYW1lICsgIlxzKj4iLCAiaSIpOwogIH0KCiAgZnVuY3Rpb24gYWRkVGFncyhmcm9tLCB0bykgewogICAgZm9yICh2YXIgdGFnIGluIGZyb20pIHsKICAgICAgdmFyIGRlc3QgPSB0b1t0YWddIHx8ICh0b1t0YWddID0gW10pOwogICAgICB2YXIgc291cmNlID0gZnJvbVt0YWddOwogICAgICBmb3IgKHZhciBpID0gc291cmNlLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKQogICAgICAgIGRlc3QudW5zaGlmdChzb3VyY2VbaV0pCiAgICB9CiAgfQoKICBmdW5jdGlvbiBmaW5kTWF0Y2hpbmdNb2RlKHRhZ0luZm8sIHRhZ1RleHQpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFnSW5mby5sZW5ndGg7IGkrKykgewogICAgICB2YXIgc3BlYyA9IHRhZ0luZm9baV07CiAgICAgIGlmICghc3BlY1swXSB8fCBzcGVjWzFdLnRlc3QoZ2V0QXR0clZhbHVlKHRhZ1RleHQsIHNwZWNbMF0pKSkgcmV0dXJuIHNwZWNbMl07CiAgICB9CiAgfQoKICBDb2RlTWlycm9yLmRlZmluZU1vZGUoImh0bWxtaXhlZCIsIGZ1bmN0aW9uIChjb25maWcsIHBhcnNlckNvbmZpZykgewogICAgdmFyIGh0bWxNb2RlID0gQ29kZU1pcnJvci5nZXRNb2RlKGNvbmZpZywgewogICAgICBuYW1lOiAieG1sIiwKICAgICAgaHRtbE1vZGU6IHRydWUsCiAgICAgIG11bHRpbGluZVRhZ0luZGVudEZhY3RvcjogcGFyc2VyQ29uZmlnLm11bHRpbGluZVRhZ0luZGVudEZhY3RvciwKICAgICAgbXVsdGlsaW5lVGFnSW5kZW50UGFzdFRhZzogcGFyc2VyQ29uZmlnLm11bHRpbGluZVRhZ0luZGVudFBhc3RUYWcKICAgIH0pOwoKICAgIHZhciB0YWdzID0ge307CiAgICB2YXIgY29uZmlnVGFncyA9IHBhcnNlckNvbmZpZyAmJiBwYXJzZXJDb25maWcudGFncywgY29uZmlnU2NyaXB0ID0gcGFyc2VyQ29uZmlnICYmIHBhcnNlckNvbmZpZy5zY3JpcHRUeXBlczsKICAgIGFkZFRhZ3MoZGVmYXVsdFRhZ3MsIHRhZ3MpOwogICAgaWYgKGNvbmZpZ1RhZ3MpIGFkZFRhZ3MoY29uZmlnVGFncywgdGFncyk7CiAgICBpZiAoY29uZmlnU2NyaXB0KSBmb3IgKHZhciBpID0gY29uZmlnU2NyaXB0Lmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKQogICAgICB0YWdzLnNjcmlwdC51bnNoaWZ0KFsidHlwZSIsIGNvbmZpZ1NjcmlwdFtpXS5tYXRjaGVzLCBjb25maWdTY3JpcHRbaV0ubW9kZV0pCgogICAgZnVuY3Rpb24gaHRtbChzdHJlYW0sIHN0YXRlKSB7CiAgICAgIHZhciBzdHlsZSA9IGh0bWxNb2RlLnRva2VuKHN0cmVhbSwgc3RhdGUuaHRtbFN0YXRlKSwgdGFnID0gL1xidGFnXGIvLnRlc3Qoc3R5bGUpLCB0YWdOYW1lCiAgICAgIGlmICh0YWcgJiYgIS9bPD5cc1wvXS8udGVzdChzdHJlYW0uY3VycmVudCgpKSAmJgogICAgICAgICAgKHRhZ05hbWUgPSBzdGF0ZS5odG1sU3RhdGUudGFnTmFtZSAmJiBzdGF0ZS5odG1sU3RhdGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSAmJgogICAgICAgICAgdGFncy5oYXNPd25Qcm9wZXJ0eSh0YWdOYW1lKSkgewogICAgICAgIHN0YXRlLmluVGFnID0gdGFnTmFtZSArICIgIgogICAgICB9IGVsc2UgaWYgKHN0YXRlLmluVGFnICYmIHRhZyAmJiAvPiQvLnRlc3Qoc3RyZWFtLmN1cnJlbnQoKSkpIHsKICAgICAgICB2YXIgaW5UYWcgPSAvXihbXFNdKykgKC4qKS8uZXhlYyhzdGF0ZS5pblRhZykKICAgICAgICBzdGF0ZS5pblRhZyA9IG51bGwKICAgICAgICB2YXIgbW9kZVNwZWMgPSBzdHJlYW0uY3VycmVudCgpID09ICI+IiAmJiBmaW5kTWF0Y2hpbmdNb2RlKHRhZ3NbaW5UYWdbMV1dLCBpblRhZ1syXSkKICAgICAgICB2YXIgbW9kZSA9IENvZGVNaXJyb3IuZ2V0TW9kZShjb25maWcsIG1vZGVTcGVjKQogICAgICAgIHZhciBlbmRUYWdBID0gZ2V0VGFnUmVnZXhwKGluVGFnWzFdLCB0cnVlKSwgZW5kVGFnID0gZ2V0VGFnUmVnZXhwKGluVGFnWzFdLCBmYWxzZSk7CiAgICAgICAgc3RhdGUudG9rZW4gPSBmdW5jdGlvbiAoc3RyZWFtLCBzdGF0ZSkgewogICAgICAgICAgaWYgKHN0cmVhbS5tYXRjaChlbmRUYWdBLCBmYWxzZSkpIHsKICAgICAgICAgICAgc3RhdGUudG9rZW4gPSBodG1sOwogICAgICAgICAgICBzdGF0ZS5sb2NhbFN0YXRlID0gc3RhdGUubG9jYWxNb2RlID0gbnVsbDsKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbWF5YmVCYWNrdXAoc3RyZWFtLCBlbmRUYWcsIHN0YXRlLmxvY2FsTW9kZS50b2tlbihzdHJlYW0sIHN0YXRlLmxvY2FsU3RhdGUpKTsKICAgICAgICB9OwogICAgICAgIHN0YXRlLmxvY2FsTW9kZSA9IG1vZGU7CiAgICAgICAgc3RhdGUubG9jYWxTdGF0ZSA9IENvZGVNaXJyb3Iuc3RhcnRTdGF0ZShtb2RlLCBodG1sTW9kZS5pbmRlbnQoc3RhdGUuaHRtbFN0YXRlLCAiIiwgIiIpKTsKICAgICAgfSBlbHNlIGlmIChzdGF0ZS5pblRhZykgewogICAgICAgIHN0YXRlLmluVGFnICs9IHN0cmVhbS5jdXJyZW50KCkKICAgICAgICBpZiAoc3RyZWFtLmVvbCgpKSBzdGF0ZS5pblRhZyArPSAiICIKICAgICAgfQogICAgICByZXR1cm4gc3R5bGU7CiAgICB9OwoKICAgIHJldHVybiB7CiAgICAgIHN0YXJ0U3RhdGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgc3RhdGUgPSBDb2RlTWlycm9yLnN0YXJ0U3RhdGUoaHRtbE1vZGUpOwogICAgICAgIHJldHVybiB7dG9rZW46IGh0bWwsIGluVGFnOiBudWxsLCBsb2NhbE1vZGU6IG51bGwsIGxvY2FsU3RhdGU6IG51bGwsIGh0bWxTdGF0ZTogc3RhdGV9OwogICAgICB9LAoKICAgICAgY29weVN0YXRlOiBmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgICB2YXIgbG9jYWw7CiAgICAgICAgaWYgKHN0YXRlLmxvY2FsU3RhdGUpIHsKICAgICAgICAgIGxvY2FsID0gQ29kZU1pcnJvci5jb3B5U3RhdGUoc3RhdGUubG9jYWxNb2RlLCBzdGF0ZS5sb2NhbFN0YXRlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHt0b2tlbjogc3RhdGUudG9rZW4sIGluVGFnOiBzdGF0ZS5pblRhZywKICAgICAgICAgICAgICAgIGxvY2FsTW9kZTogc3RhdGUubG9jYWxNb2RlLCBsb2NhbFN0YXRlOiBsb2NhbCwKICAgICAgICAgICAgICAgIGh0bWxTdGF0ZTogQ29kZU1pcnJvci5jb3B5U3RhdGUoaHRtbE1vZGUsIHN0YXRlLmh0bWxTdGF0ZSl9OwogICAgICB9LAoKICAgICAgdG9rZW46IGZ1bmN0aW9uIChzdHJlYW0sIHN0YXRlKSB7CiAgICAgICAgcmV0dXJuIHN0YXRlLnRva2VuKHN0cmVhbSwgc3RhdGUpOwogICAgICB9LAoKICAgICAgaW5kZW50OiBmdW5jdGlvbiAoc3RhdGUsIHRleHRBZnRlciwgbGluZSkgewogICAgICAgIGlmICghc3RhdGUubG9jYWxNb2RlIHx8IC9eXHMqPFwvLy50ZXN0KHRleHRBZnRlcikpCiAgICAgICAgICByZXR1cm4gaHRtbE1vZGUuaW5kZW50KHN0YXRlLmh0bWxTdGF0ZSwgdGV4dEFmdGVyLCBsaW5lKTsKICAgICAgICBlbHNlIGlmIChzdGF0ZS5sb2NhbE1vZGUuaW5kZW50KQogICAgICAgICAgcmV0dXJuIHN0YXRlLmxvY2FsTW9kZS5pbmRlbnQoc3RhdGUubG9jYWxTdGF0ZSwgdGV4dEFmdGVyLCBsaW5lKTsKICAgICAgICBlbHNlCiAgICAgICAgICByZXR1cm4gQ29kZU1pcnJvci5QYXNzOwogICAgICB9LAoKICAgICAgaW5uZXJNb2RlOiBmdW5jdGlvbiAoc3RhdGUpIHsKICAgICAgICByZXR1cm4ge3N0YXRlOiBzdGF0ZS5sb2NhbFN0YXRlIHx8IHN0YXRlLmh0bWxTdGF0ZSwgbW9kZTogc3RhdGUubG9jYWxNb2RlIHx8IGh0bWxNb2RlfTsKICAgICAgfQogICAgfTsKICB9LCAieG1sIiwgImphdmFzY3JpcHQiLCAiY3NzIik7CgogIENvZGVNaXJyb3IuZGVmaW5lTUlNRSgidGV4dC9odG1sIiwgImh0bWxtaXhlZCIpOwp9KTsK","codemirror/$$BALE-VERSION$$":"0.1","codemirror/$$VERSION$$":"0.0","codemirror/$$MANDATORY$$":false,"codemirror/$$LOAD_BALE$$":true,"codemirror/$$FILEMANIFEST$$":["codemirror/LICENSE-codemirror.md","codemirror/codemirror.css","codemirror/codemirror.js","codemirror/codemirror-extensions.js","codemirror/markdown.js","codemirror/scheme.js","codemirror/matchbrackets.js","codemirror/javascript.js","codemirror/xml.js","codemirror/css.js","codemirror/htmlmixed.js","codemirror/$$BALE-VERSION$$","codemirror/$$VERSION$$","codemirror/$$MANDATORY$$","codemirror/$$LOAD_BALE$$"]}