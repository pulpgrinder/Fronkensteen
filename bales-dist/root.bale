{"root/LICENSE-root.md":"","root/LICENSE-Fronkensteen.md":"VGhlIE1JVCBMaWNlbnNlCgpUaGUgYmFzZSBGcm9ua2Vuc3RlZW4gc3lzdGVtIGlzIGNvcHlyaWdodCAyMDE4LTIwMjAgYnkgQW50aG9ueSBXLiBIdXJzaC4KClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCgpUaGlyZC1wYXJ0eSBjb21wb25lbnRzIGluY2x1ZGVkIHdpdGggRnJvbmtlbnN0ZWVuIGFyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlaXIgb3duIGxpY2Vuc2VzLiBQbGVhc2Ugc2VlIGJlbG93Lgo=","root/root.css":"Ym9keSB7CiAgZm9udC1mYW1pbHk6c2Fucy1zZXJpZjsKICBiYWNrZ3JvdW5kLWNvbG9yOiNiYmI7Cn0KCi5ub3NlbGVjdCB7CiAgLXdlYmtpdC10b3VjaC1jYWxsb3V0OiBub25lOwogIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7CiAgLWtodG1sLXVzZXItc2VsZWN0OiBub25lOwogIC1tb3otdXNlci1zZWxlY3Q6IG5vbmU7CiAgLW1zLXVzZXItc2VsZWN0OiBub25lOwogIHVzZXItc2VsZWN0OiBub25lOwp9CgpoZWFkZXIgewogIGZvbnQtc2l6ZToxNTAlOwp9Cgpmb290ZXJ7CiAgZm9udC1zaXplOiA1MCU7Cn0KI2Zyb25rZW5zdGVlbi13cmFwcGVyewogIHBvc2l0aW9uOmZpeGVkOwogIHRvcDowOwogIGJvdHRvbTowOwogIGxlZnQ6MDsKICByaWdodDowOwp9CgojZnJvbmtlbnN0ZWVuLWNvdmVyc2hlZXR7CiAgcG9zaXRpb246Zml4ZWQ7CiAgdG9wOjA7CiAgYm90dG9tOjA7CiAgbGVmdDowOwogIHJpZ2h0OjA7CiAgYmFja2dyb3VuZC1jb2xvcjojYmJiOwp9CgojZnJvbmtlbnN0ZWVuLWNvbnRlbnR7CiAgei1pbmRleDoyOwogIG1hcmdpbjphdXRvOwogIHdpZHRoOjYwZW07CiAgcGFkZGluZzoyZW07Cn0KCgojZnJvbmtlbnN0ZWVuLWNvZGUtZWRpdG9yewogIGRpc3BsYXk6bm9uZTsKICB6LWluZGV4OjM7Cn0KI2Zyb25rZW5zdGVlbi1kb2N1bWVudGF0aW9uewogIGRpc3BsYXk6bm9uZTsKICB6LWluZGV4OjQ7Cn0KCi5mcm9ua2Vuc3RlZW4tZmlsZS11cGxvYWRlcnsKICB2aXNpYmxpdHk6aGlkZGVuOwogIHotaW5kZXg6MDsKfQoKI2Zyb25rZW5zdGVlbi1tYXJrdXAtdmlld2VyewogIG1hcmdpbjphdXRvOwogIHdpZHRoOjYwZW07CiAgcGFkZGluZzoyZW07Cn0KCi5mcm9ua2Vuc3RlZW4tbWFya3VwLWNvbnRlbnR7Cgp9Cg==","root/stubs.scm":"OyhkZWZpbmUgKHByb2Nlc3MtbGF0ZXggZWxlbWVudCkKOyAgKGNvbnNvbGUtZXJyb3IgIkxhVGV4IGhhbmRsZXIgKGthdGV4IG9yIG1hdGhqYXgtbGF0ZXgpIGJhbGUgaGFzIG5vdCBiZWVuIGxvYWRlZCwgb3IgcHJvZHVjZWQgYW4gZXJyb3IuIikKOykK","root/fronkensteenlogo.png":"iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABmJLR0QA/wD/AP+gvaeTAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AMYEiQYbir4egAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAUXUlEQVR42u1deXwUVbb+bldVL+lOB5AlyI5AWNIERCEI4rw3jPpT1FFncJR5T0QEgfGN7AFUApiFTcAAA8rixrgAYQ0EUGQJkAR5JCEJi2wi+2aW7k5vVXf+6IBJujvppTpd3enz++WfJH276p7vnPOdc8+9FwhLWMISlrCEJSwNUYhEnysVgCkE51sJICEMgNol/6NdubquDz9KXD0drfLgtPInGKQ4J5dOebbfCQBxYQC4mKOUDRkx7XQDZISQkDN/Siku/3ySThnSvwBALyk8k0wqQGQ5Lq7fU0NI+7hBIal8ACCEoHWX7uTFUWPiWI6Lk4IBSmGmCcOyutaduuQvyypC+d2ykCdeaq0WYx/vjusXz8bZrNYTgYxikjA1hiXlGy8YNRUVlgbDviMbaTF2YBdcOvNzQHUghRCQn5R+qEEpHwDKS8owKvlTCiC/IQPgVNL6HbFtY7o3yBy8o64XmZ+RrQOQ19AAQFiOi4sbNPhGx16Phyzpc4sUdu5Onn/z7YCRwoDMPMOy/Vo91CV7eVYRyn8rQ0MXdZQWYwfG4tqF0/G8zZbTEEhg9rYbtn76UgPCYpfGTbV4ugnJARAf6iEgf8HOn/qWl+jDWq8id2+VYt72I33rmxTWtwcoTEnf1b1dj35ElLhPZAAjAxgWkMns6TTP//4TZEIpxdVzxXTSM48VA4itj+9k65H09ez75DOR7XWPEVDBC18lA1EoQS1mCKcKwR/ZB3rzOuidm6CXLoDevQ0wLMiDbSBr3RakWUswg5+FrGcfwGwGBOkDghCCVp1iyePPvxh5ZOf2OJvVWgA/F4lIvSif5XQPduyUv/xQsWekT6kEzGbYMjZCKDgGfu8OCBfPg3AsIFcAdXkRswkQBLB/GwF22FuQxfYGTBVBQQrHDYrF1XP+J4X1EgKatmxGVx+7CqPe6IHyVagYEg+h4P9BVEq7m/dFTBWQ9XoU8lmLIeuqA3ibtElhMy2ebux/UlgfJDB/4oot1Kg3eOo2IJwuAtFofFd+JaCEU4UwDYmHefpYQKmSNim8WYp527P9Tgr9DYC81E27de1iuhHJrDyrNeAz0lHxRDfQO7cAKs1uAnuRqCuZu/kHHYBEf3lrfwGAsBwX98ehr8W11w0gROZHnAkCqF5v9xJKFcByAG+z/85scqFgCnrrBioej4Fw9iSk2lJCCMFDvQeSNl26z2Q5TucPEPgDVYRhWV2bzl3z0/afgL7Eu0of0URC30EFwnGuZgcgBPKEZLDDRoKwXLW/UUIgHMsB/9Mh8Ht3Qsj6AYhQO0JBr4dq22HIunSvm1QGSDRRWox7oieunD0pOin0yxs3bdmCfppzASaT1fsHqwMApFVbqLZlA1SoW3FyOeiVX2Ge/BaEvKOVNYMqIDDoodqTB1nb9pBqm2SkVoUh0XLRSaE/fHP+xBWbqS/Kr1PMZii/3WN33e5YrcUC0qwFVOt/BPvy3wFr9aVnotbA9MpgSLdHFigrNWJeRo7opFBsAOQtyNivaxfT1a8zyY4aD6KO9Phz1FAOedJSsK+OdCwMWcwwDf2jV+PWGynsFENmfvHdNQApYqFVLAAQluPi/vuvf4trHdPHv6TPbAL7zEves3dTBRRJaZD17lfde1AK4UwxLKuXSNYLEEKge+KFp1p37pYgFikkoiif5XStOsXkLzt4QrTlXZccwFQB9WUbaFmZz+Mb+7QBLS91IIUR2edAmjSVLBA0jbUYNyAGl8+e7ScIQm7ASeADLZrQtcevw6AXr8xqB4AShJPfT91AAWijoD56CdTo+1KycLoIphcGOGQHsh69oFy/V9JlY02k8spzLRXXADwaaADkp249rGvXtbu4xR65HNa0FHt+T+4NTUAitfYYbhOBZDIMzFNGgd+9rXpIsVqgWJUOpt/jkgWAfeXwDJ30TF+f9hj4qrG8uVu+79nG33Hfn6JSw9CGtZecq05Ms2hEHDoDqi+XMAiAjYvfx5ZV/+rl7cqht1ojLMfFPfna63HtuscHr/IBwKiHPHGhA6mk1y/Dmr5O0o9OCPD6zCWIbt8lz1tSSLxSPsvpWnXqkr/0YCH0IdDTRxppYXgoCjX7FEizaKgOngKM0m5di2ykxTuDYnDh1BlSHx6ANm7RNP/jvXkhoXwAoL+VQj4tGRCqA4BevQT+hx2Sf/7ykjK8+eFKr/YYeAOA/AnLNlKP1vYl7wIIuLfGORaHODlsny8H5HLJv0JHXW+yYEeOx3sMGE9J34LtB3q2ielBQq6Xv8IEqNQQcg9W9wJnisG+NhJE4v0DhBBomzQjVuOd6HOFBZsFQbgppgeoJH3/E9c65mFCiAwhJ4RAPnGafRm5qqg1sK5aItmVwhrBDCOTV6Jlhxi3SSFxU/m6Vg+FDulzJdZPPoJ1xULHadXroblOfa4+1icpHNKcXADQUQwPQJu0aJ6/9Me8kFY+0WphWTDL+d/UaljSUoPmXcpLymhS+oEO7pBCdwCQ/+7Sb6m+3IhQFnPKDIdiUNXwYP10MaDWBA2eO/ToiY8ys2MBnPKFBOYtzNjfs01MTxLSGzg1kTANHQxSG9s3GiGL6QFZu47BgQBCoGnUjJwrOFp8++rl465Ioaw20jf4lWFxrbr0IaG+e9fy4VSQyDr6ADgO1i9X2vcjBA+vxez13w96sGNMHsOyfd0lgfZKX+eu+Uv3F3jd0xc0ooyAoS3n2v1XFYMeqiPSXip2Jk2aafGUiz0GzjwAfSC6eX7aD8dCX/mEwPLh5LqtPyhTwt/lzs1Sl+1kzt4kP3lzlq5Dd13on9rAcTB0iHDP+qukhOprFCgPLuOglOLqmVw66bknZwOYhcqVw5oeIHXhjsO69t16hL7yCYFlzhT3rb9KSmj9ODkIX5egfc8/kDadu89kWK6vqxBgahsTE5qVPicWYV2z1PPeQkLsYSB4UsL7YjVX4J3Faylvs77oFAAyhsn8cm5SyCsfMhmsH3pu/b9XWkrB79wUlK+eteUbgirnFVcDgMDz2SxjgZT740WxfrMJ1i9Wet9ZzHKwfr48qFLCSrcHtkaTrYOvT//X0k3qqMjQ1T7D2PN+jW/vKBzaC3rlUlC9uiJCjaz0z+tMA1dwbAhbf3kpbF+vgc8bQiM0sK7+2GGbmaSTHgWLm9duJFR18Q5Pz7DssWVT/hmi1s9WWr84BM66ZqnTDadSleO7N1AAjaui3wEAvM12R6HkpLpt3jfrv3MTtg1fiZdaaTSwLvkwaN7/2MHsagTQVQjAgfQvoAwiZLtH3FhYkhNEs/77XmB1WlCkhJxCicJDexwTImf/fOvarQSlmgkt6792BbbN34o/sL4MfMZGyb+/XCHHucKChJopnisG03j/+q9CJwhwHCxJ4lv//ZTws2WAQinpKeCNNwBAVZP9ugJAws8FRSRUiIDwy3nwO9NFy6Udxs8+AHrpgqTnYE3KXMgYWaZbIQAAcjO/g1wVEQLWL4c1OUGcOG2qADP4WUcQRKjt5WGJpoSUAioFD4EXsh2IrCuCC2DK9ts0NdivcBEunoXp6UdESddkj/SHauNu6B8gDuGE6vVQX7ZJcheRWqvF89EkG0B/dz0ABaClloq8oNa+XAFLyjRxcnWDHvIPFoKWGMANG+kiJZTmOkqlY8p0+jeXOS4hW1fN/qBXUFt/UR6EA9+LMhYz5C+Qte8E8DzYoa/bj6CrmRKuSZNkYejHb1edBqD1CACU0hxz+U0E7dKwQglL8jRABB5D9XrIExfdP5OA6dMfJLqVUy/Bb98guak4X3wqBsBEjwAAAJnrvshWR2mC0/qP50DIOeD7QISAGzYSJKrR74AwGsD+7xhHMsiysK6VVkooV0YgJ8P1Nve6zHsXlfihyk5FqYQleboo5wHT8nLIZy922DnMjZsKanAkfMLRLNCLZyUEABZXL11PcEX4awUAwzCZn74/Oej0z2cfhHA8WxzrHzMJ4J3cb1BhAPfaCMffSywlPLZni8MCkNsA4Hk+m2V4ACR4KkJKFayp00Vxw7S8HPIP5jufO54HM3S4czL45SeSaRY5fuCgwwKQJyEAm1amnecUyqBpEeKzvodQKE72Kp+WVGv3L/vIAJAWD7pICaWwSkhQeuNsrdvEZXWOAHyiUgXJwpAqAtaUGeIc6GCzQj5+eu0ewqgHO3ys0/KwdW3gewXUUZHYt3nLJV8AQAE0/mH9uqAIAfzeHRDOFImQQgiQJy4CLSmt81+5MZOdkkEYjeC3fhfYTMhiAIAMXwAAAAm/nCwmVOILQyRCDUvqDIATwfo1WrDDx8Ct5lhTBdhX33ASH1h7YSiAJ4usmjUDDMNk+goAZG9fB4VK2g0itt1bQc//LIIbsdmPjXP3MAieB/tX52RQOJ4D4eypgMwHp1CgOPsAeJ7P9hUA5MrFXxOUERLuFFVrKq2f892TtG4P7s+vevQZtt9AwAkZhCoCtlVLABkTEACcLzyeUJcbc+uEEACNj+7aItkYYMvYCHrpvO8DWS2QfzDf49NBqUEPbvg452Tw36sBpv4BUJD1Y635v0chAEBC/qHDRJJ360RoYE2dYb8ryEeR9egN5omnvLO40ROcHmBNNBpYP05CfW+2Obp7W635v6cAwG/XfgaRSS8M2LZ+A3r1V98HMpkgf2+e9yeEW8xghw537lg+WwZE1F9zDaUUMjfDjtsA2LdpU646SmJEMEJdaf2+A1M24L8ge7ifD+SRB/uKczKIigrYNn9Tb9OiiYrC5hULckUFAICdVkOJtKx/41egt677PpBRD/n78wGL2adh2H6PA81bOk0JbauX1FtKKLd/zU5RASBjmMy1SXOkZf3z3hPlVlHmmZch69jZd9dr0IMb8Q/njaMFxyCcLqyXqUkb/w4Yls0UFQD2ncOCdKz/m7Wgd+/4rjS9HvIPFgA2cZa9ubfGO7/NRBUB66qP/Z4RUEqh0mjB22xuLYd6Sk2PbL1B4w2lZQG3fmOf1oBB72vWD/a5v0A+J0286+UZBuZpY8HvSHcKNvU5PcD77yr72hpAfeUAAJBZ80z9gFj/VyuB8lIRrL/c3uoliKgQngf7yhtOyaA9JUypj0Omdrkd2j0cuNG+DeuyAqp9VQQs82eKUl3j3p7gl8YNNn4Q0DzaeUr4+TJA5T8yWFkAUvoLAOMvnT4xMJDrQtbPlgEVRhGsXw/5+wv8cnu4nQz+n/OxzSbY0v/tt/nJdbMA5C0HgFqrpl8WlcJcEYANEEoVjLrmgAh9itw/ptqV5C9RKGDooAJx0hMg69gFyowcUYBc7Z0UCkx5tj/OFx4n/vIAxFBmSFBqAtMgYl212OHeX6/EYoZ84nt+Jiq8/Z5iZxlVcT6EIvH33Li7AOQLACiAxoc2b/RfECDEXtmr+aOKgPWj2b7HbEGAPGkpaJnR8Tu8HdvZ8xKAGzbKeWVQqbI3jiqUTj7LeU0S1ZHIg30DiNv68aaKklD809GpsY8N9gubFU4XwbpiQfXyLgXojSv2mOrrd/I8+OM54A/tdZyMPz0H5k/PeRyWzGNfdV6OVqhcNqjwm7+GmcgAa/XqI7VYoJieCuKCRNYmS959txeRyd6mgvuZmldltJ92bcTfp86BxQ9Xq9K7t8Hv2eZ84sQAHMe5bNWSderq8SVKhGVh27Pd8Y7j+4PKXALH6ZZ1UwXou+95TM4opVBGaEAFIceTz3nj88ivZ88myFUcwiId0URFYf2SJI83Q3h1byAAlfG36+FZl5DIlZ4VgHwBAGQMk7lu4cLwrEtI0ia4vwDkMwAEns8WLCWAX3YOk7A2vUoBlW4vAIk1235ZGBJ+vQh+23qAqe+9dQSyPv3BPNLfs4/JFbAumi1KU4q9fmCzX1TZ+AGPlP9GXIvy8pISbX0CIHHHLdvM0t8MYfMLsFSuACYAmAcPGze9NjOGYTKXJ0wKz74ExN0OYFEBwPN8tlwejtdSEE8XgEQBAADsT/9c8juGQp/8KVB4eJ/Xn/cFAOTOjbsJyggmrIUAA8DTBSCxAFC5MPQVVWu1oKF4vHgQpH4ncw97Hf/FSrpTATzx4tjJ8aOT5+HujVKE+k2jgRRKKTSNopC3b49l7ezJ8gtF+bMAJHqf/IokDMvG8zbbojAQ/Kj4qCicOLz/8oyX/nAFwH4AUyt1SAMOgDAQ/Kf4Ji2isHL6FGxaPj8bQBYA0U7u8ptmfgfClPjRyXPDQPBR8QzLjvem1BswADjzCG+nzMOd62EgSEHx9QaAmkB4aZw9NISBEFjF1zsAHIAwdlL86KT5uHOzYQMhUIoPGABqACHtqWEj2g3887Cm3foOJFZnDZQhnMNHRslLVs6Y2ih92bx6V3zAAVBDEjv06DVzROJC2q3vAGI1m0Na8Sdzs+iaxInkQlHeNBnD7BPqOMipIQDgXi6b2CG218wRMz+i3fo+FlJA4BQKnMw9dE/x94o3PuXwoQQAJ0DobfcIjwY3EO4rftZEcqFQOoqXKgAcgNAx9uGZIxIX0q6P9CdWiznIFH+Yrpk1QZKKlzoAnALhzVkLaEyfAcRqMUlY8Uqcys2iqyVq8cEGAAcgPBQbO3NE4iIa8+ggYjWbqFTewa74g3RN4gRyvqhA8ooPNgA4AIHjmNFPD38netz8RQErM9/L4dMm/hOFWXvwy+mTQaP4YAVANSAEauGpluJN0Cg+2AFQTaotPKXMxV0/lZkppWgSHYWV06Zi0/LAFW/CAKgDCC+Nmxo/OjlVtPUGSikeiI7CimmBKdeGAeCtRxg3NX5MSipuX/MOCKGs+JAGQE0gvPyPSfGjU+bj9lX3gEApRdMHo66sTJjaauOyeSGp+AYBAAePMGZC/OiUhS7J4r3izZGM7yp2fLbilIxhxgo8n4OwhA4QAGS/PG4inbN+r7DhFxP9+kwp3fCLic5Zv1foENuLwocGy7AElyR2iO1NXxg1nnaM7X0BwJPhKQlLWMISlrCEJSxhCUuDkP8AlWo/Dun1LcQAAAAASUVORK5CYII=","root/third-party-libs/jquery-3.4.1.min.js":"LyohIGpRdWVyeSB2My40LjEgfCAoYykgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzIHwganF1ZXJ5Lm9yZy9saWNlbnNlICovCiFmdW5jdGlvbihlLHQpeyJ1c2Ugc3RyaWN0Ijsib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmIm9iamVjdCI9PXR5cGVvZiBtb2R1bGUuZXhwb3J0cz9tb2R1bGUuZXhwb3J0cz1lLmRvY3VtZW50P3QoZSwhMCk6ZnVuY3Rpb24oZSl7aWYoIWUuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50Iik7cmV0dXJuIHQoZSl9OnQoZSl9KCJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKEMsZSl7InVzZSBzdHJpY3QiO3ZhciB0PVtdLEU9Qy5kb2N1bWVudCxyPU9iamVjdC5nZXRQcm90b3R5cGVPZixzPXQuc2xpY2UsZz10LmNvbmNhdCx1PXQucHVzaCxpPXQuaW5kZXhPZixuPXt9LG89bi50b1N0cmluZyx2PW4uaGFzT3duUHJvcGVydHksYT12LnRvU3RyaW5nLGw9YS5jYWxsKE9iamVjdCkseT17fSxtPWZ1bmN0aW9uKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYibnVtYmVyIiE9dHlwZW9mIGUubm9kZVR5cGV9LHg9ZnVuY3Rpb24oZSl7cmV0dXJuIG51bGwhPWUmJmU9PT1lLndpbmRvd30sYz17dHlwZTohMCxzcmM6ITAsbm9uY2U6ITAsbm9Nb2R1bGU6ITB9O2Z1bmN0aW9uIGIoZSx0LG4pe3ZhciByLGksbz0obj1ufHxFKS5jcmVhdGVFbGVtZW50KCJzY3JpcHQiKTtpZihvLnRleHQ9ZSx0KWZvcihyIGluIGMpKGk9dFtyXXx8dC5nZXRBdHRyaWJ1dGUmJnQuZ2V0QXR0cmlidXRlKHIpKSYmby5zZXRBdHRyaWJ1dGUocixpKTtuLmhlYWQuYXBwZW5kQ2hpbGQobykucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX1mdW5jdGlvbiB3KGUpe3JldHVybiBudWxsPT1lP2UrIiI6Im9iamVjdCI9PXR5cGVvZiBlfHwiZnVuY3Rpb24iPT10eXBlb2YgZT9uW28uY2FsbChlKV18fCJvYmplY3QiOnR5cGVvZiBlfXZhciBmPSIzLjQuMSIsaz1mdW5jdGlvbihlLHQpe3JldHVybiBuZXcgay5mbi5pbml0KGUsdCl9LHA9L15bXHNcdUZFRkZceEEwXSt8W1xzXHVGRUZGXHhBMF0rJC9nO2Z1bmN0aW9uIGQoZSl7dmFyIHQ9ISFlJiYibGVuZ3RoImluIGUmJmUubGVuZ3RoLG49dyhlKTtyZXR1cm4hbShlKSYmIXgoZSkmJigiYXJyYXkiPT09bnx8MD09PXR8fCJudW1iZXIiPT10eXBlb2YgdCYmMDx0JiZ0LTEgaW4gZSl9ay5mbj1rLnByb3RvdHlwZT17anF1ZXJ5OmYsY29uc3RydWN0b3I6ayxsZW5ndGg6MCx0b0FycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHMuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lP3MuY2FsbCh0aGlzKTplPDA/dGhpc1tlK3RoaXMubGVuZ3RoXTp0aGlzW2VdfSxwdXNoU3RhY2s6ZnVuY3Rpb24oZSl7dmFyIHQ9ay5tZXJnZSh0aGlzLmNvbnN0cnVjdG9yKCksZSk7cmV0dXJuIHQucHJldk9iamVjdD10aGlzLHR9LGVhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIGsuZWFjaCh0aGlzLGUpfSxtYXA6ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGsubWFwKHRoaXMsZnVuY3Rpb24oZSx0KXtyZXR1cm4gbi5jYWxsKGUsdCxlKX0pKX0sc2xpY2U6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2socy5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihlKXt2YXIgdD10aGlzLmxlbmd0aCxuPStlKyhlPDA/dDowKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2soMDw9biYmbjx0P1t0aGlzW25dXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDp1LHNvcnQ6dC5zb3J0LHNwbGljZTp0LnNwbGljZX0say5leHRlbmQ9ay5mbi5leHRlbmQ9ZnVuY3Rpb24oKXt2YXIgZSx0LG4scixpLG8sYT1hcmd1bWVudHNbMF18fHt9LHM9MSx1PWFyZ3VtZW50cy5sZW5ndGgsbD0hMTtmb3IoImJvb2xlYW4iPT10eXBlb2YgYSYmKGw9YSxhPWFyZ3VtZW50c1tzXXx8e30scysrKSwib2JqZWN0Ij09dHlwZW9mIGF8fG0oYSl8fChhPXt9KSxzPT09dSYmKGE9dGhpcyxzLS0pO3M8dTtzKyspaWYobnVsbCE9KGU9YXJndW1lbnRzW3NdKSlmb3IodCBpbiBlKXI9ZVt0XSwiX19wcm90b19fIiE9PXQmJmEhPT1yJiYobCYmciYmKGsuaXNQbGFpbk9iamVjdChyKXx8KGk9QXJyYXkuaXNBcnJheShyKSkpPyhuPWFbdF0sbz1pJiYhQXJyYXkuaXNBcnJheShuKT9bXTppfHxrLmlzUGxhaW5PYmplY3Qobik/bjp7fSxpPSExLGFbdF09ay5leHRlbmQobCxvLHIpKTp2b2lkIDAhPT1yJiYoYVt0XT1yKSk7cmV0dXJuIGF9LGsuZXh0ZW5kKHtleHBhbmRvOiJqUXVlcnkiKyhmK01hdGgucmFuZG9tKCkpLnJlcGxhY2UoL1xEL2csIiIpLGlzUmVhZHk6ITAsZXJyb3I6ZnVuY3Rpb24oZSl7dGhyb3cgbmV3IEVycm9yKGUpfSxub29wOmZ1bmN0aW9uKCl7fSxpc1BsYWluT2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0LG47cmV0dXJuISghZXx8IltvYmplY3QgT2JqZWN0XSIhPT1vLmNhbGwoZSkpJiYoISh0PXIoZSkpfHwiZnVuY3Rpb24iPT10eXBlb2Yobj12LmNhbGwodCwiY29uc3RydWN0b3IiKSYmdC5jb25zdHJ1Y3RvcikmJmEuY2FsbChuKT09PWwpfSxpc0VtcHR5T2JqZWN0OmZ1bmN0aW9uKGUpe3ZhciB0O2Zvcih0IGluIGUpcmV0dXJuITE7cmV0dXJuITB9LGdsb2JhbEV2YWw6ZnVuY3Rpb24oZSx0KXtiKGUse25vbmNlOnQmJnQubm9uY2V9KX0sZWFjaDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MDtpZihkKGUpKXtmb3Iobj1lLmxlbmd0aDtyPG47cisrKWlmKCExPT09dC5jYWxsKGVbcl0scixlW3JdKSlicmVha31lbHNlIGZvcihyIGluIGUpaWYoITE9PT10LmNhbGwoZVtyXSxyLGVbcl0pKWJyZWFrO3JldHVybiBlfSx0cmltOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lPyIiOihlKyIiKS5yZXBsYWNlKHAsIiIpfSxtYWtlQXJyYXk6ZnVuY3Rpb24oZSx0KXt2YXIgbj10fHxbXTtyZXR1cm4gbnVsbCE9ZSYmKGQoT2JqZWN0KGUpKT9rLm1lcmdlKG4sInN0cmluZyI9PXR5cGVvZiBlP1tlXTplKTp1LmNhbGwobixlKSksbn0saW5BcnJheTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PXQ/LTE6aS5jYWxsKHQsZSxuKX0sbWVyZ2U6ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49K3QubGVuZ3RoLHI9MCxpPWUubGVuZ3RoO3I8bjtyKyspZVtpKytdPXRbcl07cmV0dXJuIGUubGVuZ3RoPWksZX0sZ3JlcDpmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPVtdLGk9MCxvPWUubGVuZ3RoLGE9IW47aTxvO2krKykhdChlW2ldLGkpIT09YSYmci5wdXNoKGVbaV0pO3JldHVybiByfSxtYXA6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz0wLGE9W107aWYoZChlKSlmb3Iocj1lLmxlbmd0aDtvPHI7bysrKW51bGwhPShpPXQoZVtvXSxvLG4pKSYmYS5wdXNoKGkpO2Vsc2UgZm9yKG8gaW4gZSludWxsIT0oaT10KGVbb10sbyxuKSkmJmEucHVzaChpKTtyZXR1cm4gZy5hcHBseShbXSxhKX0sZ3VpZDoxLHN1cHBvcnQ6eX0pLCJmdW5jdGlvbiI9PXR5cGVvZiBTeW1ib2wmJihrLmZuW1N5bWJvbC5pdGVyYXRvcl09dFtTeW1ib2wuaXRlcmF0b3JdKSxrLmVhY2goIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sIi5zcGxpdCgiICIpLGZ1bmN0aW9uKGUsdCl7blsiW29iamVjdCAiK3QrIl0iXT10LnRvTG93ZXJDYXNlKCl9KTt2YXIgaD1mdW5jdGlvbihuKXt2YXIgZSxkLGIsbyxpLGgsZixnLHcsdSxsLFQsQyxhLEUsdixzLGMseSxrPSJzaXp6bGUiKzEqbmV3IERhdGUsbT1uLmRvY3VtZW50LFM9MCxyPTAscD11ZSgpLHg9dWUoKSxOPXVlKCksQT11ZSgpLEQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZT09PXQmJihsPSEwKSwwfSxqPXt9Lmhhc093blByb3BlcnR5LHQ9W10scT10LnBvcCxMPXQucHVzaCxIPXQucHVzaCxPPXQuc2xpY2UsUD1mdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihlW25dPT09dClyZXR1cm4gbjtyZXR1cm4tMX0sUj0iY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWQiLE09IltcXHgyMFxcdFxcclxcblxcZl0iLEk9Iig/OlxcXFwufFtcXHctXXxbXlwwLVxceGEwXSkrIixXPSJcXFsiK00rIiooIitJKyIpKD86IitNKyIqKFsqXiR8IX5dPz0pIitNKyIqKD86JygoPzpcXFxcLnxbXlxcXFwnXSkqKSd8XCIoKD86XFxcXC58W15cXFxcXCJdKSopXCJ8KCIrSSsiKSl8KSIrTSsiKlxcXSIsJD0iOigiK0krIikoPzpcXCgoKCcoKD86XFxcXC58W15cXFxcJ10pKiknfFwiKCg/OlxcXFwufFteXFxcXFwiXSkqKVwiKXwoKD86XFxcXC58W15cXFxcKClbXFxdXXwiK1crIikqKXwuKilcXCl8KSIsRj1uZXcgUmVnRXhwKE0rIisiLCJnIiksQj1uZXcgUmVnRXhwKCJeIitNKyIrfCgoPzpefFteXFxcXF0pKD86XFxcXC4pKikiK00rIiskIiwiZyIpLF89bmV3IFJlZ0V4cCgiXiIrTSsiKiwiK00rIioiKSx6PW5ldyBSZWdFeHAoIl4iK00rIiooWz4rfl18IitNKyIpIitNKyIqIiksVT1uZXcgUmVnRXhwKE0rInw+IiksWD1uZXcgUmVnRXhwKCQpLFY9bmV3IFJlZ0V4cCgiXiIrSSsiJCIpLEc9e0lEOm5ldyBSZWdFeHAoIl4jKCIrSSsiKSIpLENMQVNTOm5ldyBSZWdFeHAoIl5cXC4oIitJKyIpIiksVEFHOm5ldyBSZWdFeHAoIl4oIitJKyJ8WypdKSIpLEFUVFI6bmV3IFJlZ0V4cCgiXiIrVyksUFNFVURPOm5ldyBSZWdFeHAoIl4iKyQpLENISUxEOm5ldyBSZWdFeHAoIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcKCIrTSsiKihldmVufG9kZHwoKFsrLV18KShcXGQqKW58KSIrTSsiKig/OihbKy1dfCkiK00rIiooXFxkKyl8KSkiK00rIipcXCl8KSIsImkiKSxib29sOm5ldyBSZWdFeHAoIl4oPzoiK1IrIikkIiwiaSIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKCJeIitNKyIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXCgiK00rIiooKD86LVxcZCk/XFxkKikiK00rIipcXCl8KSg/PVteLV18JCkiLCJpIil9LFk9L0hUTUwkL2ksUT0vXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLEo9L15oXGQkL2ksSz0vXltee10rXHtccypcW25hdGl2ZSBcdy8sWj0vXig/OiMoW1x3LV0rKXwoXHcrKXxcLihbXHctXSspKSQvLGVlPS9bK35dLyx0ZT1uZXcgUmVnRXhwKCJcXFxcKFtcXGRhLWZdezEsNn0iK00rIj98KCIrTSsiKXwuKSIsImlnIiksbmU9ZnVuY3Rpb24oZSx0LG4pe3ZhciByPSIweCIrdC02NTUzNjtyZXR1cm4gciE9cnx8bj90OnI8MD9TdHJpbmcuZnJvbUNoYXJDb2RlKHIrNjU1MzYpOlN0cmluZy5mcm9tQ2hhckNvZGUocj4+MTB8NTUyOTYsMTAyMyZyfDU2MzIwKX0scmU9LyhbXDAtXHgxZlx4N2ZdfF4tP1xkKXxeLSR8W15cMC1ceDFmXHg3Zi1cdUZGRkZcdy1dL2csaWU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdD8iXDAiPT09ZT8iXHVmZmZkIjplLnNsaWNlKDAsLTEpKyJcXCIrZS5jaGFyQ29kZUF0KGUubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KSsiICI6IlxcIitlfSxvZT1mdW5jdGlvbigpe1QoKX0sYWU9YmUoZnVuY3Rpb24oZSl7cmV0dXJuITA9PT1lLmRpc2FibGVkJiYiZmllbGRzZXQiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfSx7ZGlyOiJwYXJlbnROb2RlIixuZXh0OiJsZWdlbmQifSk7dHJ5e0guYXBwbHkodD1PLmNhbGwobS5jaGlsZE5vZGVzKSxtLmNoaWxkTm9kZXMpLHRbbS5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZSl7SD17YXBwbHk6dC5sZW5ndGg/ZnVuY3Rpb24oZSx0KXtMLmFwcGx5KGUsTy5jYWxsKHQpKX06ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmxlbmd0aCxyPTA7d2hpbGUoZVtuKytdPXRbcisrXSk7ZS5sZW5ndGg9bi0xfX19ZnVuY3Rpb24gc2UodCxlLG4scil7dmFyIGksbyxhLHMsdSxsLGMsZj1lJiZlLm93bmVyRG9jdW1lbnQscD1lP2Uubm9kZVR5cGU6OTtpZihuPW58fFtdLCJzdHJpbmciIT10eXBlb2YgdHx8IXR8fDEhPT1wJiY5IT09cCYmMTEhPT1wKXJldHVybiBuO2lmKCFyJiYoKGU/ZS5vd25lckRvY3VtZW50fHxlOm0pIT09QyYmVChlKSxlPWV8fEMsRSkpe2lmKDExIT09cCYmKHU9Wi5leGVjKHQpKSlpZihpPXVbMV0pe2lmKDk9PT1wKXtpZighKGE9ZS5nZXRFbGVtZW50QnlJZChpKSkpcmV0dXJuIG47aWYoYS5pZD09PWkpcmV0dXJuIG4ucHVzaChhKSxufWVsc2UgaWYoZiYmKGE9Zi5nZXRFbGVtZW50QnlJZChpKSkmJnkoZSxhKSYmYS5pZD09PWkpcmV0dXJuIG4ucHVzaChhKSxufWVsc2V7aWYodVsyXSlyZXR1cm4gSC5hcHBseShuLGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUodCkpLG47aWYoKGk9dVszXSkmJmQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBILmFwcGx5KG4sZS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGkpKSxufWlmKGQucXNhJiYhQVt0KyIgIl0mJighdnx8IXYudGVzdCh0KSkmJigxIT09cHx8Im9iamVjdCIhPT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpKXtpZihjPXQsZj1lLDE9PT1wJiZVLnRlc3QodCkpeyhzPWUuZ2V0QXR0cmlidXRlKCJpZCIpKT9zPXMucmVwbGFjZShyZSxpZSk6ZS5zZXRBdHRyaWJ1dGUoImlkIixzPWspLG89KGw9aCh0KSkubGVuZ3RoO3doaWxlKG8tLSlsW29dPSIjIitzKyIgIit4ZShsW29dKTtjPWwuam9pbigiLCIpLGY9ZWUudGVzdCh0KSYmeWUoZS5wYXJlbnROb2RlKXx8ZX10cnl7cmV0dXJuIEguYXBwbHkobixmLnF1ZXJ5U2VsZWN0b3JBbGwoYykpLG59Y2F0Y2goZSl7QSh0LCEwKX1maW5hbGx5e3M9PT1rJiZlLnJlbW92ZUF0dHJpYnV0ZSgiaWQiKX19fXJldHVybiBnKHQucmVwbGFjZShCLCIkMSIpLGUsbixyKX1mdW5jdGlvbiB1ZSgpe3ZhciByPVtdO3JldHVybiBmdW5jdGlvbiBlKHQsbil7cmV0dXJuIHIucHVzaCh0KyIgIik+Yi5jYWNoZUxlbmd0aCYmZGVsZXRlIGVbci5zaGlmdCgpXSxlW3QrIiAiXT1ufX1mdW5jdGlvbiBsZShlKXtyZXR1cm4gZVtrXT0hMCxlfWZ1bmN0aW9uIGNlKGUpe3ZhciB0PUMuY3JlYXRlRWxlbWVudCgiZmllbGRzZXQiKTt0cnl7cmV0dXJuISFlKHQpfWNhdGNoKGUpe3JldHVybiExfWZpbmFsbHl7dC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodCksdD1udWxsfX1mdW5jdGlvbiBmZShlLHQpe3ZhciBuPWUuc3BsaXQoInwiKSxyPW4ubGVuZ3RoO3doaWxlKHItLSliLmF0dHJIYW5kbGVbbltyXV09dH1mdW5jdGlvbiBwZShlLHQpe3ZhciBuPXQmJmUscj1uJiYxPT09ZS5ub2RlVHlwZSYmMT09PXQubm9kZVR5cGUmJmUuc291cmNlSW5kZXgtdC5zb3VyY2VJbmRleDtpZihyKXJldHVybiByO2lmKG4pd2hpbGUobj1uLm5leHRTaWJsaW5nKWlmKG49PT10KXJldHVybi0xO3JldHVybiBlPzE6LTF9ZnVuY3Rpb24gZGUodCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiJpbnB1dCI9PT1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmUudHlwZT09PXR9fWZ1bmN0aW9uIGhlKG4pe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuKCJpbnB1dCI9PT10fHwiYnV0dG9uIj09PXQpJiZlLnR5cGU9PT1ufX1mdW5jdGlvbiBnZSh0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuImZvcm0iaW4gZT9lLnBhcmVudE5vZGUmJiExPT09ZS5kaXNhYmxlZD8ibGFiZWwiaW4gZT8ibGFiZWwiaW4gZS5wYXJlbnROb2RlP2UucGFyZW50Tm9kZS5kaXNhYmxlZD09PXQ6ZS5kaXNhYmxlZD09PXQ6ZS5pc0Rpc2FibGVkPT09dHx8ZS5pc0Rpc2FibGVkIT09IXQmJmFlKGUpPT09dDplLmRpc2FibGVkPT09dDoibGFiZWwiaW4gZSYmZS5kaXNhYmxlZD09PXR9fWZ1bmN0aW9uIHZlKGEpe3JldHVybiBsZShmdW5jdGlvbihvKXtyZXR1cm4gbz0rbyxsZShmdW5jdGlvbihlLHQpe3ZhciBuLHI9YShbXSxlLmxlbmd0aCxvKSxpPXIubGVuZ3RoO3doaWxlKGktLSllW249cltpXV0mJihlW25dPSEodFtuXT1lW25dKSl9KX0pfWZ1bmN0aW9uIHllKGUpe3JldHVybiBlJiYidW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0RWxlbWVudHNCeVRhZ05hbWUmJmV9Zm9yKGUgaW4gZD1zZS5zdXBwb3J0PXt9LGk9c2UuaXNYTUw9ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5uYW1lc3BhY2VVUkksbj0oZS5vd25lckRvY3VtZW50fHxlKS5kb2N1bWVudEVsZW1lbnQ7cmV0dXJuIVkudGVzdCh0fHxuJiZuLm5vZGVOYW1lfHwiSFRNTCIpfSxUPXNlLnNldERvY3VtZW50PWZ1bmN0aW9uKGUpe3ZhciB0LG4scj1lP2Uub3duZXJEb2N1bWVudHx8ZTptO3JldHVybiByIT09QyYmOT09PXIubm9kZVR5cGUmJnIuZG9jdW1lbnRFbGVtZW50JiYoYT0oQz1yKS5kb2N1bWVudEVsZW1lbnQsRT0haShDKSxtIT09QyYmKG49Qy5kZWZhdWx0VmlldykmJm4udG9wIT09biYmKG4uYWRkRXZlbnRMaXN0ZW5lcj9uLmFkZEV2ZW50TGlzdGVuZXIoInVubG9hZCIsb2UsITEpOm4uYXR0YWNoRXZlbnQmJm4uYXR0YWNoRXZlbnQoIm9udW5sb2FkIixvZSkpLGQuYXR0cmlidXRlcz1jZShmdW5jdGlvbihlKXtyZXR1cm4gZS5jbGFzc05hbWU9ImkiLCFlLmdldEF0dHJpYnV0ZSgiY2xhc3NOYW1lIil9KSxkLmdldEVsZW1lbnRzQnlUYWdOYW1lPWNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmFwcGVuZENoaWxkKEMuY3JlYXRlQ29tbWVudCgiIikpLCFlLmdldEVsZW1lbnRzQnlUYWdOYW1lKCIqIikubGVuZ3RofSksZC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lPUsudGVzdChDLmdldEVsZW1lbnRzQnlDbGFzc05hbWUpLGQuZ2V0QnlJZD1jZShmdW5jdGlvbihlKXtyZXR1cm4gYS5hcHBlbmRDaGlsZChlKS5pZD1rLCFDLmdldEVsZW1lbnRzQnlOYW1lfHwhQy5nZXRFbGVtZW50c0J5TmFtZShrKS5sZW5ndGh9KSxkLmdldEJ5SWQ/KGIuZmlsdGVyLklEPWZ1bmN0aW9uKGUpe3ZhciB0PWUucmVwbGFjZSh0ZSxuZSk7cmV0dXJuIGZ1bmN0aW9uKGUpe3JldHVybiBlLmdldEF0dHJpYnV0ZSgiaWQiKT09PXR9fSxiLmZpbmQuSUQ9ZnVuY3Rpb24oZSx0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudEJ5SWQmJkUpe3ZhciBuPXQuZ2V0RWxlbWVudEJ5SWQoZSk7cmV0dXJuIG4/W25dOltdfX0pOihiLmZpbHRlci5JRD1mdW5jdGlvbihlKXt2YXIgbj1lLnJlcGxhY2UodGUsbmUpO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD0idW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlTm9kZSYmZS5nZXRBdHRyaWJ1dGVOb2RlKCJpZCIpO3JldHVybiB0JiZ0LnZhbHVlPT09bn19LGIuZmluZC5JRD1mdW5jdGlvbihlLHQpe2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgdC5nZXRFbGVtZW50QnlJZCYmRSl7dmFyIG4scixpLG89dC5nZXRFbGVtZW50QnlJZChlKTtpZihvKXtpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoImlkIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb107aT10LmdldEVsZW1lbnRzQnlOYW1lKGUpLHI9MDt3aGlsZShvPWlbcisrXSlpZigobj1vLmdldEF0dHJpYnV0ZU5vZGUoImlkIikpJiZuLnZhbHVlPT09ZSlyZXR1cm5bb119cmV0dXJuW119fSksYi5maW5kLlRBRz1kLmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKGUsdCl7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiB0LmdldEVsZW1lbnRzQnlUYWdOYW1lP3QuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk6ZC5xc2E/dC5xdWVyeVNlbGVjdG9yQWxsKGUpOnZvaWQgMH06ZnVuY3Rpb24oZSx0KXt2YXIgbixyPVtdLGk9MCxvPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk7aWYoIioiPT09ZSl7d2hpbGUobj1vW2krK10pMT09PW4ubm9kZVR5cGUmJnIucHVzaChuKTtyZXR1cm4gcn1yZXR1cm4gb30sYi5maW5kLkNMQVNTPWQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmZnVuY3Rpb24oZSx0KXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmRSlyZXR1cm4gdC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKGUpfSxzPVtdLHY9W10sKGQucXNhPUsudGVzdChDLnF1ZXJ5U2VsZWN0b3JBbGwpKSYmKGNlKGZ1bmN0aW9uKGUpe2EuYXBwZW5kQ2hpbGQoZSkuaW5uZXJIVE1MPSI8YSBpZD0nIitrKyInPjwvYT48c2VsZWN0IGlkPSciK2srIi1cclxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PiIsZS5xdWVyeVNlbGVjdG9yQWxsKCJbbXNhbGxvd2NhcHR1cmVePScnXSIpLmxlbmd0aCYmdi5wdXNoKCJbKl4kXT0iK00rIiooPzonJ3xcIlwiKSIpLGUucXVlcnlTZWxlY3RvckFsbCgiW3NlbGVjdGVkXSIpLmxlbmd0aHx8di5wdXNoKCJcXFsiK00rIiooPzp2YWx1ZXwiK1IrIikiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIltpZH49IitrKyItXSIpLmxlbmd0aHx8di5wdXNoKCJ+PSIpLGUucXVlcnlTZWxlY3RvckFsbCgiOmNoZWNrZWQiKS5sZW5ndGh8fHYucHVzaCgiOmNoZWNrZWQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoImEjIitrKyIrKiIpLmxlbmd0aHx8di5wdXNoKCIuIy4rWyt+XSIpfSksY2UoZnVuY3Rpb24oZSl7ZS5pbm5lckhUTUw9IjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PiI7dmFyIHQ9Qy5jcmVhdGVFbGVtZW50KCJpbnB1dCIpO3Quc2V0QXR0cmlidXRlKCJ0eXBlIiwiaGlkZGVuIiksZS5hcHBlbmRDaGlsZCh0KS5zZXRBdHRyaWJ1dGUoIm5hbWUiLCJEIiksZS5xdWVyeVNlbGVjdG9yQWxsKCJbbmFtZT1kXSIpLmxlbmd0aCYmdi5wdXNoKCJuYW1lIitNKyIqWypeJHwhfl0/PSIpLDIhPT1lLnF1ZXJ5U2VsZWN0b3JBbGwoIjplbmFibGVkIikubGVuZ3RoJiZ2LnB1c2goIjplbmFibGVkIiwiOmRpc2FibGVkIiksYS5hcHBlbmRDaGlsZChlKS5kaXNhYmxlZD0hMCwyIT09ZS5xdWVyeVNlbGVjdG9yQWxsKCI6ZGlzYWJsZWQiKS5sZW5ndGgmJnYucHVzaCgiOmVuYWJsZWQiLCI6ZGlzYWJsZWQiKSxlLnF1ZXJ5U2VsZWN0b3JBbGwoIiosOngiKSx2LnB1c2goIiwuKjoiKX0pKSwoZC5tYXRjaGVzU2VsZWN0b3I9Sy50ZXN0KGM9YS5tYXRjaGVzfHxhLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8YS5tb3pNYXRjaGVzU2VsZWN0b3J8fGEub01hdGNoZXNTZWxlY3Rvcnx8YS5tc01hdGNoZXNTZWxlY3RvcikpJiZjZShmdW5jdGlvbihlKXtkLmRpc2Nvbm5lY3RlZE1hdGNoPWMuY2FsbChlLCIqIiksYy5jYWxsKGUsIltzIT0nJ106eCIpLHMucHVzaCgiIT0iLCQpfSksdj12Lmxlbmd0aCYmbmV3IFJlZ0V4cCh2LmpvaW4oInwiKSkscz1zLmxlbmd0aCYmbmV3IFJlZ0V4cChzLmpvaW4oInwiKSksdD1LLnRlc3QoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikseT10fHxLLnRlc3QoYS5jb250YWlucyk/ZnVuY3Rpb24oZSx0KXt2YXIgbj05PT09ZS5ub2RlVHlwZT9lLmRvY3VtZW50RWxlbWVudDplLHI9dCYmdC5wYXJlbnROb2RlO3JldHVybiBlPT09cnx8ISghcnx8MSE9PXIubm9kZVR5cGV8fCEobi5jb250YWlucz9uLmNvbnRhaW5zKHIpOmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24mJjE2JmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24ocikpKX06ZnVuY3Rpb24oZSx0KXtpZih0KXdoaWxlKHQ9dC5wYXJlbnROb2RlKWlmKHQ9PT1lKXJldHVybiEwO3JldHVybiExfSxEPXQ/ZnVuY3Rpb24oZSx0KXtpZihlPT09dClyZXR1cm4gbD0hMCwwO3ZhciBuPSFlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uLSF0LmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uO3JldHVybiBufHwoMSYobj0oZS5vd25lckRvY3VtZW50fHxlKT09PSh0Lm93bmVyRG9jdW1lbnR8fHQpP2UuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCk6MSl8fCFkLnNvcnREZXRhY2hlZCYmdC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihlKT09PW4/ZT09PUN8fGUub3duZXJEb2N1bWVudD09PW0mJnkobSxlKT8tMTp0PT09Q3x8dC5vd25lckRvY3VtZW50PT09bSYmeShtLHQpPzE6dT9QKHUsZSktUCh1LHQpOjA6NCZuPy0xOjEpfTpmdW5jdGlvbihlLHQpe2lmKGU9PT10KXJldHVybiBsPSEwLDA7dmFyIG4scj0wLGk9ZS5wYXJlbnROb2RlLG89dC5wYXJlbnROb2RlLGE9W2VdLHM9W3RdO2lmKCFpfHwhbylyZXR1cm4gZT09PUM/LTE6dD09PUM/MTppPy0xOm8/MTp1P1AodSxlKS1QKHUsdCk6MDtpZihpPT09bylyZXR1cm4gcGUoZSx0KTtuPWU7d2hpbGUobj1uLnBhcmVudE5vZGUpYS51bnNoaWZ0KG4pO249dDt3aGlsZShuPW4ucGFyZW50Tm9kZSlzLnVuc2hpZnQobik7d2hpbGUoYVtyXT09PXNbcl0pcisrO3JldHVybiByP3BlKGFbcl0sc1tyXSk6YVtyXT09PW0/LTE6c1tyXT09PW0/MTowfSksQ30sc2UubWF0Y2hlcz1mdW5jdGlvbihlLHQpe3JldHVybiBzZShlLG51bGwsbnVsbCx0KX0sc2UubWF0Y2hlc1NlbGVjdG9yPWZ1bmN0aW9uKGUsdCl7aWYoKGUub3duZXJEb2N1bWVudHx8ZSkhPT1DJiZUKGUpLGQubWF0Y2hlc1NlbGVjdG9yJiZFJiYhQVt0KyIgIl0mJighc3x8IXMudGVzdCh0KSkmJighdnx8IXYudGVzdCh0KSkpdHJ5e3ZhciBuPWMuY2FsbChlLHQpO2lmKG58fGQuZGlzY29ubmVjdGVkTWF0Y2h8fGUuZG9jdW1lbnQmJjExIT09ZS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gbn1jYXRjaChlKXtBKHQsITApfXJldHVybiAwPHNlKHQsQyxudWxsLFtlXSkubGVuZ3RofSxzZS5jb250YWlucz1mdW5jdGlvbihlLHQpe3JldHVybihlLm93bmVyRG9jdW1lbnR8fGUpIT09QyYmVChlKSx5KGUsdCl9LHNlLmF0dHI9ZnVuY3Rpb24oZSx0KXsoZS5vd25lckRvY3VtZW50fHxlKSE9PUMmJlQoZSk7dmFyIG49Yi5hdHRySGFuZGxlW3QudG9Mb3dlckNhc2UoKV0scj1uJiZqLmNhbGwoYi5hdHRySGFuZGxlLHQudG9Mb3dlckNhc2UoKSk/bihlLHQsIUUpOnZvaWQgMDtyZXR1cm4gdm9pZCAwIT09cj9yOmQuYXR0cmlidXRlc3x8IUU/ZS5nZXRBdHRyaWJ1dGUodCk6KHI9ZS5nZXRBdHRyaWJ1dGVOb2RlKHQpKSYmci5zcGVjaWZpZWQ/ci52YWx1ZTpudWxsfSxzZS5lc2NhcGU9ZnVuY3Rpb24oZSl7cmV0dXJuKGUrIiIpLnJlcGxhY2UocmUsaWUpfSxzZS5lcnJvcj1mdW5jdGlvbihlKXt0aHJvdyBuZXcgRXJyb3IoIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246ICIrZSl9LHNlLnVuaXF1ZVNvcnQ9ZnVuY3Rpb24oZSl7dmFyIHQsbj1bXSxyPTAsaT0wO2lmKGw9IWQuZGV0ZWN0RHVwbGljYXRlcyx1PSFkLnNvcnRTdGFibGUmJmUuc2xpY2UoMCksZS5zb3J0KEQpLGwpe3doaWxlKHQ9ZVtpKytdKXQ9PT1lW2ldJiYocj1uLnB1c2goaSkpO3doaWxlKHItLSllLnNwbGljZShuW3JdLDEpfXJldHVybiB1PW51bGwsZX0sbz1zZS5nZXRUZXh0PWZ1bmN0aW9uKGUpe3ZhciB0LG49IiIscj0wLGk9ZS5ub2RlVHlwZTtpZihpKXtpZigxPT09aXx8OT09PWl8fDExPT09aSl7aWYoInN0cmluZyI9PXR5cGVvZiBlLnRleHRDb250ZW50KXJldHVybiBlLnRleHRDb250ZW50O2ZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyluKz1vKGUpfWVsc2UgaWYoMz09PWl8fDQ9PT1pKXJldHVybiBlLm5vZGVWYWx1ZX1lbHNlIHdoaWxlKHQ9ZVtyKytdKW4rPW8odCk7cmV0dXJuIG59LChiPXNlLnNlbGVjdG9ycz17Y2FjaGVMZW5ndGg6NTAsY3JlYXRlUHNldWRvOmxlLG1hdGNoOkcsYXR0ckhhbmRsZTp7fSxmaW5kOnt9LHJlbGF0aXZlOnsiPiI6e2RpcjoicGFyZW50Tm9kZSIsZmlyc3Q6ITB9LCIgIjp7ZGlyOiJwYXJlbnROb2RlIn0sIisiOntkaXI6InByZXZpb3VzU2libGluZyIsZmlyc3Q6ITB9LCJ+Ijp7ZGlyOiJwcmV2aW91c1NpYmxpbmcifX0scHJlRmlsdGVyOntBVFRSOmZ1bmN0aW9uKGUpe3JldHVybiBlWzFdPWVbMV0ucmVwbGFjZSh0ZSxuZSksZVszXT0oZVszXXx8ZVs0XXx8ZVs1XXx8IiIpLnJlcGxhY2UodGUsbmUpLCJ+PSI9PT1lWzJdJiYoZVszXT0iICIrZVszXSsiICIpLGUuc2xpY2UoMCw0KX0sQ0hJTEQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGVbMV09ZVsxXS50b0xvd2VyQ2FzZSgpLCJudGgiPT09ZVsxXS5zbGljZSgwLDMpPyhlWzNdfHxzZS5lcnJvcihlWzBdKSxlWzRdPSsoZVs0XT9lWzVdKyhlWzZdfHwxKToyKigiZXZlbiI9PT1lWzNdfHwib2RkIj09PWVbM10pKSxlWzVdPSsoZVs3XStlWzhdfHwib2RkIj09PWVbM10pKTplWzNdJiZzZS5lcnJvcihlWzBdKSxlfSxQU0VVRE86ZnVuY3Rpb24oZSl7dmFyIHQsbj0hZVs2XSYmZVsyXTtyZXR1cm4gRy5DSElMRC50ZXN0KGVbMF0pP251bGw6KGVbM10/ZVsyXT1lWzRdfHxlWzVdfHwiIjpuJiZYLnRlc3QobikmJih0PWgobiwhMCkpJiYodD1uLmluZGV4T2YoIikiLG4ubGVuZ3RoLXQpLW4ubGVuZ3RoKSYmKGVbMF09ZVswXS5zbGljZSgwLHQpLGVbMl09bi5zbGljZSgwLHQpKSxlLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5yZXBsYWNlKHRlLG5lKS50b0xvd2VyQ2FzZSgpO3JldHVybiIqIj09PWU/ZnVuY3Rpb24oKXtyZXR1cm4hMH06ZnVuY3Rpb24oZSl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXR9fSxDTEFTUzpmdW5jdGlvbihlKXt2YXIgdD1wW2UrIiAiXTtyZXR1cm4gdHx8KHQ9bmV3IFJlZ0V4cCgiKF58IitNKyIpIitlKyIoIitNKyJ8JCkiKSkmJnAoZSxmdW5jdGlvbihlKXtyZXR1cm4gdC50ZXN0KCJzdHJpbmciPT10eXBlb2YgZS5jbGFzc05hbWUmJmUuY2xhc3NOYW1lfHwidW5kZWZpbmVkIiE9dHlwZW9mIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpfSl9LEFUVFI6ZnVuY3Rpb24obixyLGkpe3JldHVybiBmdW5jdGlvbihlKXt2YXIgdD1zZS5hdHRyKGUsbik7cmV0dXJuIG51bGw9PXQ/IiE9Ij09PXI6IXJ8fCh0Kz0iIiwiPSI9PT1yP3Q9PT1pOiIhPSI9PT1yP3QhPT1pOiJePSI9PT1yP2kmJjA9PT10LmluZGV4T2YoaSk6Iio9Ij09PXI/aSYmLTE8dC5pbmRleE9mKGkpOiIkPSI9PT1yP2kmJnQuc2xpY2UoLWkubGVuZ3RoKT09PWk6In49Ij09PXI/LTE8KCIgIit0LnJlcGxhY2UoRiwiICIpKyIgIikuaW5kZXhPZihpKToifD0iPT09ciYmKHQ9PT1pfHx0LnNsaWNlKDAsaS5sZW5ndGgrMSk9PT1pKyItIikpfX0sQ0hJTEQ6ZnVuY3Rpb24oaCxlLHQsZyx2KXt2YXIgeT0ibnRoIiE9PWguc2xpY2UoMCwzKSxtPSJsYXN0IiE9PWguc2xpY2UoLTQpLHg9Im9mLXR5cGUiPT09ZTtyZXR1cm4gMT09PWcmJjA9PT12P2Z1bmN0aW9uKGUpe3JldHVybiEhZS5wYXJlbnROb2RlfTpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9eSE9PW0/Im5leHRTaWJsaW5nIjoicHJldmlvdXNTaWJsaW5nIixjPWUucGFyZW50Tm9kZSxmPXgmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxwPSFuJiYheCxkPSExO2lmKGMpe2lmKHkpe3doaWxlKGwpe2E9ZTt3aGlsZShhPWFbbF0paWYoeD9hLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1mOjE9PT1hLm5vZGVUeXBlKXJldHVybiExO3U9bD0ib25seSI9PT1oJiYhdSYmIm5leHRTaWJsaW5nIn1yZXR1cm4hMH1pZih1PVttP2MuZmlyc3RDaGlsZDpjLmxhc3RDaGlsZF0sbSYmcCl7ZD0ocz0ocj0oaT0obz0oYT1jKVtrXXx8KGFba109e30pKVthLnVuaXF1ZUlEXXx8KG9bYS51bmlxdWVJRF09e30pKVtoXXx8W10pWzBdPT09UyYmclsxXSkmJnJbMl0sYT1zJiZjLmNoaWxkTm9kZXNbc107d2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoMT09PWEubm9kZVR5cGUmJisrZCYmYT09PWUpe2lbaF09W1MscyxkXTticmVha319ZWxzZSBpZihwJiYoZD1zPShyPShpPShvPShhPWUpW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdfHxbXSlbMF09PT1TJiZyWzFdKSwhMT09PWQpd2hpbGUoYT0rK3MmJmEmJmFbbF18fChkPXM9MCl8fHUucG9wKCkpaWYoKHg/YS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09ZjoxPT09YS5ub2RlVHlwZSkmJisrZCYmKHAmJigoaT0obz1hW2tdfHwoYVtrXT17fSkpW2EudW5pcXVlSURdfHwob1thLnVuaXF1ZUlEXT17fSkpW2hdPVtTLGRdKSxhPT09ZSkpYnJlYWs7cmV0dXJuKGQtPXYpPT09Z3x8ZCVnPT0wJiYwPD1kL2d9fX0sUFNFVURPOmZ1bmN0aW9uKGUsbyl7dmFyIHQsYT1iLnBzZXVkb3NbZV18fGIuc2V0RmlsdGVyc1tlLnRvTG93ZXJDYXNlKCldfHxzZS5lcnJvcigidW5zdXBwb3J0ZWQgcHNldWRvOiAiK2UpO3JldHVybiBhW2tdP2Eobyk6MTxhLmxlbmd0aD8odD1bZSxlLCIiLG9dLGIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eShlLnRvTG93ZXJDYXNlKCkpP2xlKGZ1bmN0aW9uKGUsdCl7dmFyIG4scj1hKGUsbyksaT1yLmxlbmd0aDt3aGlsZShpLS0pZVtuPVAoZSxyW2ldKV09ISh0W25dPXJbaV0pfSk6ZnVuY3Rpb24oZSl7cmV0dXJuIGEoZSwwLHQpfSk6YX19LHBzZXVkb3M6e25vdDpsZShmdW5jdGlvbihlKXt2YXIgcj1bXSxpPVtdLHM9ZihlLnJlcGxhY2UoQiwiJDEiKSk7cmV0dXJuIHNba10/bGUoZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbz1zKGUsbnVsbCxyLFtdKSxhPWUubGVuZ3RoO3doaWxlKGEtLSkoaT1vW2FdKSYmKGVbYV09ISh0W2FdPWkpKX0pOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gclswXT1lLHMocixudWxsLG4saSksclswXT1udWxsLCFpLnBvcCgpfX0pLGhhczpsZShmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIDA8c2UodCxlKS5sZW5ndGh9fSksY29udGFpbnM6bGUoZnVuY3Rpb24odCl7cmV0dXJuIHQ9dC5yZXBsYWNlKHRlLG5lKSxmdW5jdGlvbihlKXtyZXR1cm4tMTwoZS50ZXh0Q29udGVudHx8byhlKSkuaW5kZXhPZih0KX19KSxsYW5nOmxlKGZ1bmN0aW9uKG4pe3JldHVybiBWLnRlc3Qobnx8IiIpfHxzZS5lcnJvcigidW5zdXBwb3J0ZWQgbGFuZzogIituKSxuPW4ucmVwbGFjZSh0ZSxuZSkudG9Mb3dlckNhc2UoKSxmdW5jdGlvbihlKXt2YXIgdDtkb3tpZih0PUU/ZS5sYW5nOmUuZ2V0QXR0cmlidXRlKCJ4bWw6bGFuZyIpfHxlLmdldEF0dHJpYnV0ZSgibGFuZyIpKXJldHVybih0PXQudG9Mb3dlckNhc2UoKSk9PT1ufHwwPT09dC5pbmRleE9mKG4rIi0iKX13aGlsZSgoZT1lLnBhcmVudE5vZGUpJiYxPT09ZS5ub2RlVHlwZSk7cmV0dXJuITF9fSksdGFyZ2V0OmZ1bmN0aW9uKGUpe3ZhciB0PW4ubG9jYXRpb24mJm4ubG9jYXRpb24uaGFzaDtyZXR1cm4gdCYmdC5zbGljZSgxKT09PWUuaWR9LHJvb3Q6ZnVuY3Rpb24oZSl7cmV0dXJuIGU9PT1hfSxmb2N1czpmdW5jdGlvbihlKXtyZXR1cm4gZT09PUMuYWN0aXZlRWxlbWVudCYmKCFDLmhhc0ZvY3VzfHxDLmhhc0ZvY3VzKCkpJiYhIShlLnR5cGV8fGUuaHJlZnx8fmUudGFiSW5kZXgpfSxlbmFibGVkOmdlKCExKSxkaXNhYmxlZDpnZSghMCksY2hlY2tlZDpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiEhZS5jaGVja2VkfHwib3B0aW9uIj09PXQmJiEhZS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZSYmZS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlKXtmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpaWYoZS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIWIucHNldWRvcy5lbXB0eShlKX0saGVhZGVyOmZ1bmN0aW9uKGUpe3JldHVybiBKLnRlc3QoZS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGUpe3JldHVybiBRLnRlc3QoZS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlKXt2YXIgdD1lLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuImlucHV0Ij09PXQmJiJidXR0b24iPT09ZS50eXBlfHwiYnV0dG9uIj09PXR9LHRleHQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuImlucHV0Ij09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSYmInRleHQiPT09ZS50eXBlJiYobnVsbD09KHQ9ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSl8fCJ0ZXh0Ij09PXQudG9Mb3dlckNhc2UoKSl9LGZpcnN0OnZlKGZ1bmN0aW9uKCl7cmV0dXJuWzBdfSksbGFzdDp2ZShmdW5jdGlvbihlLHQpe3JldHVyblt0LTFdfSksZXE6dmUoZnVuY3Rpb24oZSx0LG4pe3JldHVybltuPDA/bit0Om5dfSksZXZlbjp2ZShmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0wO248dDtuKz0yKWUucHVzaChuKTtyZXR1cm4gZX0pLG9kZDp2ZShmdW5jdGlvbihlLHQpe2Zvcih2YXIgbj0xO248dDtuKz0yKWUucHVzaChuKTtyZXR1cm4gZX0pLGx0OnZlKGZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9bjwwP24rdDp0PG4/dDpuOzA8PS0tcjspZS5wdXNoKHIpO3JldHVybiBlfSksZ3Q6dmUoZnVuY3Rpb24oZSx0LG4pe2Zvcih2YXIgcj1uPDA/bit0Om47KytyPHQ7KWUucHVzaChyKTtyZXR1cm4gZX0pfX0pLnBzZXVkb3MubnRoPWIucHNldWRvcy5lcSx7cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pYi5wc2V1ZG9zW2VdPWRlKGUpO2ZvcihlIGlue3N1Ym1pdDohMCxyZXNldDohMH0pYi5wc2V1ZG9zW2VdPWhlKGUpO2Z1bmN0aW9uIG1lKCl7fWZ1bmN0aW9uIHhlKGUpe2Zvcih2YXIgdD0wLG49ZS5sZW5ndGgscj0iIjt0PG47dCsrKXIrPWVbdF0udmFsdWU7cmV0dXJuIHJ9ZnVuY3Rpb24gYmUocyxlLHQpe3ZhciB1PWUuZGlyLGw9ZS5uZXh0LGM9bHx8dSxmPXQmJiJwYXJlbnROb2RlIj09PWMscD1yKys7cmV0dXJuIGUuZmlyc3Q/ZnVuY3Rpb24oZSx0LG4pe3doaWxlKGU9ZVt1XSlpZigxPT09ZS5ub2RlVHlwZXx8ZilyZXR1cm4gcyhlLHQsbik7cmV0dXJuITF9OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpLG8sYT1bUyxwXTtpZihuKXt3aGlsZShlPWVbdV0paWYoKDE9PT1lLm5vZGVUeXBlfHxmKSYmcyhlLHQsbikpcmV0dXJuITB9ZWxzZSB3aGlsZShlPWVbdV0paWYoMT09PWUubm9kZVR5cGV8fGYpaWYoaT0obz1lW2tdfHwoZVtrXT17fSkpW2UudW5pcXVlSURdfHwob1tlLnVuaXF1ZUlEXT17fSksbCYmbD09PWUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSllPWVbdV18fGU7ZWxzZXtpZigocj1pW2NdKSYmclswXT09PVMmJnJbMV09PT1wKXJldHVybiBhWzJdPXJbMl07aWYoKGlbY109YSlbMl09cyhlLHQsbikpcmV0dXJuITB9cmV0dXJuITF9fWZ1bmN0aW9uIHdlKGkpe3JldHVybiAxPGkubGVuZ3RoP2Z1bmN0aW9uKGUsdCxuKXt2YXIgcj1pLmxlbmd0aDt3aGlsZShyLS0paWYoIWlbcl0oZSx0LG4pKXJldHVybiExO3JldHVybiEwfTppWzBdfWZ1bmN0aW9uIFRlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGE9W10scz0wLHU9ZS5sZW5ndGgsbD1udWxsIT10O3M8dTtzKyspKG89ZVtzXSkmJihuJiYhbihvLHIsaSl8fChhLnB1c2gobyksbCYmdC5wdXNoKHMpKSk7cmV0dXJuIGF9ZnVuY3Rpb24gQ2UoZCxoLGcsdix5LGUpe3JldHVybiB2JiYhdltrXSYmKHY9Q2UodikpLHkmJiF5W2tdJiYoeT1DZSh5LGUpKSxsZShmdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscz1bXSx1PVtdLGw9dC5sZW5ndGgsYz1lfHxmdW5jdGlvbihlLHQsbil7Zm9yKHZhciByPTAsaT10Lmxlbmd0aDtyPGk7cisrKXNlKGUsdFtyXSxuKTtyZXR1cm4gbn0oaHx8IioiLG4ubm9kZVR5cGU/W25dOm4sW10pLGY9IWR8fCFlJiZoP2M6VGUoYyxzLGQsbixyKSxwPWc/eXx8KGU/ZDpsfHx2KT9bXTp0OmY7aWYoZyYmZyhmLHAsbixyKSx2KXtpPVRlKHAsdSksdihpLFtdLG4sciksbz1pLmxlbmd0aDt3aGlsZShvLS0pKGE9aVtvXSkmJihwW3Vbb11dPSEoZlt1W29dXT1hKSl9aWYoZSl7aWYoeXx8ZCl7aWYoeSl7aT1bXSxvPXAubGVuZ3RoO3doaWxlKG8tLSkoYT1wW29dKSYmaS5wdXNoKGZbb109YSk7eShudWxsLHA9W10saSxyKX1vPXAubGVuZ3RoO3doaWxlKG8tLSkoYT1wW29dKSYmLTE8KGk9eT9QKGUsYSk6c1tvXSkmJihlW2ldPSEodFtpXT1hKSl9fWVsc2UgcD1UZShwPT09dD9wLnNwbGljZShsLHAubGVuZ3RoKTpwKSx5P3kobnVsbCx0LHAscik6SC5hcHBseSh0LHApfSl9ZnVuY3Rpb24gRWUoZSl7Zm9yKHZhciBpLHQsbixyPWUubGVuZ3RoLG89Yi5yZWxhdGl2ZVtlWzBdLnR5cGVdLGE9b3x8Yi5yZWxhdGl2ZVsiICJdLHM9bz8xOjAsdT1iZShmdW5jdGlvbihlKXtyZXR1cm4gZT09PWl9LGEsITApLGw9YmUoZnVuY3Rpb24oZSl7cmV0dXJuLTE8UChpLGUpfSxhLCEwKSxjPVtmdW5jdGlvbihlLHQsbil7dmFyIHI9IW8mJihufHx0IT09dyl8fCgoaT10KS5ub2RlVHlwZT91KGUsdCxuKTpsKGUsdCxuKSk7cmV0dXJuIGk9bnVsbCxyfV07czxyO3MrKylpZih0PWIucmVsYXRpdmVbZVtzXS50eXBlXSljPVtiZSh3ZShjKSx0KV07ZWxzZXtpZigodD1iLmZpbHRlcltlW3NdLnR5cGVdLmFwcGx5KG51bGwsZVtzXS5tYXRjaGVzKSlba10pe2ZvcihuPSsrcztuPHI7bisrKWlmKGIucmVsYXRpdmVbZVtuXS50eXBlXSlicmVhaztyZXR1cm4gQ2UoMTxzJiZ3ZShjKSwxPHMmJnhlKGUuc2xpY2UoMCxzLTEpLmNvbmNhdCh7dmFsdWU6IiAiPT09ZVtzLTJdLnR5cGU/IioiOiIifSkpLnJlcGxhY2UoQiwiJDEiKSx0LHM8biYmRWUoZS5zbGljZShzLG4pKSxuPHImJkVlKGU9ZS5zbGljZShuKSksbjxyJiZ4ZShlKSl9Yy5wdXNoKHQpfXJldHVybiB3ZShjKX1yZXR1cm4gbWUucHJvdG90eXBlPWIuZmlsdGVycz1iLnBzZXVkb3MsYi5zZXRGaWx0ZXJzPW5ldyBtZSxoPXNlLnRva2VuaXplPWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzLHUsbD14W2UrIiAiXTtpZihsKXJldHVybiB0PzA6bC5zbGljZSgwKTthPWUscz1bXSx1PWIucHJlRmlsdGVyO3doaWxlKGEpe2ZvcihvIGluIG4mJiEocj1fLmV4ZWMoYSkpfHwociYmKGE9YS5zbGljZShyWzBdLmxlbmd0aCl8fGEpLHMucHVzaChpPVtdKSksbj0hMSwocj16LmV4ZWMoYSkpJiYobj1yLnNoaWZ0KCksaS5wdXNoKHt2YWx1ZTpuLHR5cGU6clswXS5yZXBsYWNlKEIsIiAiKX0pLGE9YS5zbGljZShuLmxlbmd0aCkpLGIuZmlsdGVyKSEocj1HW29dLmV4ZWMoYSkpfHx1W29dJiYhKHI9dVtvXShyKSl8fChuPXIuc2hpZnQoKSxpLnB1c2goe3ZhbHVlOm4sdHlwZTpvLG1hdGNoZXM6cn0pLGE9YS5zbGljZShuLmxlbmd0aCkpO2lmKCFuKWJyZWFrfXJldHVybiB0P2EubGVuZ3RoOmE/c2UuZXJyb3IoZSk6eChlLHMpLnNsaWNlKDApfSxmPXNlLmNvbXBpbGU9ZnVuY3Rpb24oZSx0KXt2YXIgbix2LHksbSx4LHIsaT1bXSxvPVtdLGE9TltlKyIgIl07aWYoIWEpe3R8fCh0PWgoZSkpLG49dC5sZW5ndGg7d2hpbGUobi0tKShhPUVlKHRbbl0pKVtrXT9pLnB1c2goYSk6by5wdXNoKGEpOyhhPU4oZSwodj1vLG09MDwoeT1pKS5sZW5ndGgseD0wPHYubGVuZ3RoLHI9ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdT0wLGw9IjAiLGM9ZSYmW10sZj1bXSxwPXcsZD1lfHx4JiZiLmZpbmQuVEFHKCIqIixpKSxoPVMrPW51bGw9PXA/MTpNYXRoLnJhbmRvbSgpfHwuMSxnPWQubGVuZ3RoO2ZvcihpJiYodz10PT09Q3x8dHx8aSk7bCE9PWcmJm51bGwhPShvPWRbbF0pO2wrKyl7aWYoeCYmbyl7YT0wLHR8fG8ub3duZXJEb2N1bWVudD09PUN8fChUKG8pLG49IUUpO3doaWxlKHM9dlthKytdKWlmKHMobyx0fHxDLG4pKXtyLnB1c2gobyk7YnJlYWt9aSYmKFM9aCl9bSYmKChvPSFzJiZvKSYmdS0tLGUmJmMucHVzaChvKSl9aWYodSs9bCxtJiZsIT09dSl7YT0wO3doaWxlKHM9eVthKytdKXMoYyxmLHQsbik7aWYoZSl7aWYoMDx1KXdoaWxlKGwtLSljW2xdfHxmW2xdfHwoZltsXT1xLmNhbGwocikpO2Y9VGUoZil9SC5hcHBseShyLGYpLGkmJiFlJiYwPGYubGVuZ3RoJiYxPHUreS5sZW5ndGgmJnNlLnVuaXF1ZVNvcnQocil9cmV0dXJuIGkmJihTPWgsdz1wKSxjfSxtP2xlKHIpOnIpKSkuc2VsZWN0b3I9ZX1yZXR1cm4gYX0sZz1zZS5zZWxlY3Q9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPSJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLGM9IXImJmgoZT1sLnNlbGVjdG9yfHxlKTtpZihuPW58fFtdLDE9PT1jLmxlbmd0aCl7aWYoMjwobz1jWzBdPWNbMF0uc2xpY2UoMCkpLmxlbmd0aCYmIklEIj09PShhPW9bMF0pLnR5cGUmJjk9PT10Lm5vZGVUeXBlJiZFJiZiLnJlbGF0aXZlW29bMV0udHlwZV0pe2lmKCEodD0oYi5maW5kLklEKGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSx0KXx8W10pWzBdKSlyZXR1cm4gbjtsJiYodD10LnBhcmVudE5vZGUpLGU9ZS5zbGljZShvLnNoaWZ0KCkudmFsdWUubGVuZ3RoKX1pPUcubmVlZHNDb250ZXh0LnRlc3QoZSk/MDpvLmxlbmd0aDt3aGlsZShpLS0pe2lmKGE9b1tpXSxiLnJlbGF0aXZlW3M9YS50eXBlXSlicmVhaztpZigodT1iLmZpbmRbc10pJiYocj11KGEubWF0Y2hlc1swXS5yZXBsYWNlKHRlLG5lKSxlZS50ZXN0KG9bMF0udHlwZSkmJnllKHQucGFyZW50Tm9kZSl8fHQpKSl7aWYoby5zcGxpY2UoaSwxKSwhKGU9ci5sZW5ndGgmJnhlKG8pKSlyZXR1cm4gSC5hcHBseShuLHIpLG47YnJlYWt9fX1yZXR1cm4obHx8ZihlLGMpKShyLHQsIUUsbiwhdHx8ZWUudGVzdChlKSYmeWUodC5wYXJlbnROb2RlKXx8dCksbn0sZC5zb3J0U3RhYmxlPWsuc3BsaXQoIiIpLnNvcnQoRCkuam9pbigiIik9PT1rLGQuZGV0ZWN0RHVwbGljYXRlcz0hIWwsVCgpLGQuc29ydERldGFjaGVkPWNlKGZ1bmN0aW9uKGUpe3JldHVybiAxJmUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oQy5jcmVhdGVFbGVtZW50KCJmaWVsZHNldCIpKX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGEgaHJlZj0nIyc+PC9hPiIsIiMiPT09ZS5maXJzdENoaWxkLmdldEF0dHJpYnV0ZSgiaHJlZiIpfSl8fGZlKCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoIixmdW5jdGlvbihlLHQsbil7aWYoIW4pcmV0dXJuIGUuZ2V0QXR0cmlidXRlKHQsInR5cGUiPT09dC50b0xvd2VyQ2FzZSgpPzE6Mil9KSxkLmF0dHJpYnV0ZXMmJmNlKGZ1bmN0aW9uKGUpe3JldHVybiBlLmlubmVySFRNTD0iPGlucHV0Lz4iLGUuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoInZhbHVlIiwiIiksIiI9PT1lLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpfSl8fGZlKCJ2YWx1ZSIsZnVuY3Rpb24oZSx0LG4pe2lmKCFuJiYiaW5wdXQiPT09ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKXJldHVybiBlLmRlZmF1bHRWYWx1ZX0pLGNlKGZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1lLmdldEF0dHJpYnV0ZSgiZGlzYWJsZWQiKX0pfHxmZShSLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtpZighbilyZXR1cm4hMD09PWVbdF0/dC50b0xvd2VyQ2FzZSgpOihyPWUuZ2V0QXR0cmlidXRlTm9kZSh0KSkmJnIuc3BlY2lmaWVkP3IudmFsdWU6bnVsbH0pLHNlfShDKTtrLmZpbmQ9aCxrLmV4cHI9aC5zZWxlY3RvcnMsay5leHByWyI6Il09ay5leHByLnBzZXVkb3Msay51bmlxdWVTb3J0PWsudW5pcXVlPWgudW5pcXVlU29ydCxrLnRleHQ9aC5nZXRUZXh0LGsuaXNYTUxEb2M9aC5pc1hNTCxrLmNvbnRhaW5zPWguY29udGFpbnMsay5lc2NhcGVTZWxlY3Rvcj1oLmVzY2FwZTt2YXIgVD1mdW5jdGlvbihlLHQsbil7dmFyIHI9W10saT12b2lkIDAhPT1uO3doaWxlKChlPWVbdF0pJiY5IT09ZS5ub2RlVHlwZSlpZigxPT09ZS5ub2RlVHlwZSl7aWYoaSYmayhlKS5pcyhuKSlicmVhaztyLnB1c2goZSl9cmV0dXJuIHJ9LFM9ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49W107ZTtlPWUubmV4dFNpYmxpbmcpMT09PWUubm9kZVR5cGUmJmUhPT10JiZuLnB1c2goZSk7cmV0dXJuIG59LE49ay5leHByLm1hdGNoLm5lZWRzQ29udGV4dDtmdW5jdGlvbiBBKGUsdCl7cmV0dXJuIGUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKT09PXQudG9Mb3dlckNhc2UoKX12YXIgRD0vXjwoW2Etel1bXlwvXDA+Olx4MjBcdFxyXG5cZl0qKVtceDIwXHRcclxuXGZdKlwvPz4oPzo8XC9cMT58KSQvaTtmdW5jdGlvbiBqKGUsbixyKXtyZXR1cm4gbShuKT9rLmdyZXAoZSxmdW5jdGlvbihlLHQpe3JldHVybiEhbi5jYWxsKGUsdCxlKSE9PXJ9KTpuLm5vZGVUeXBlP2suZ3JlcChlLGZ1bmN0aW9uKGUpe3JldHVybiBlPT09biE9PXJ9KToic3RyaW5nIiE9dHlwZW9mIG4/ay5ncmVwKGUsZnVuY3Rpb24oZSl7cmV0dXJuLTE8aS5jYWxsKG4sZSkhPT1yfSk6ay5maWx0ZXIobixlLHIpfWsuZmlsdGVyPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10WzBdO3JldHVybiBuJiYoZT0iOm5vdCgiK2UrIikiKSwxPT09dC5sZW5ndGgmJjE9PT1yLm5vZGVUeXBlP2suZmluZC5tYXRjaGVzU2VsZWN0b3IocixlKT9bcl06W106ay5maW5kLm1hdGNoZXMoZSxrLmdyZXAodCxmdW5jdGlvbihlKXtyZXR1cm4gMT09PWUubm9kZVR5cGV9KSl9LGsuZm4uZXh0ZW5kKHtmaW5kOmZ1bmN0aW9uKGUpe3ZhciB0LG4scj10aGlzLmxlbmd0aCxpPXRoaXM7aWYoInN0cmluZyIhPXR5cGVvZiBlKXJldHVybiB0aGlzLnB1c2hTdGFjayhrKGUpLmZpbHRlcihmdW5jdGlvbigpe2Zvcih0PTA7dDxyO3QrKylpZihrLmNvbnRhaW5zKGlbdF0sdGhpcykpcmV0dXJuITB9KSk7Zm9yKG49dGhpcy5wdXNoU3RhY2soW10pLHQ9MDt0PHI7dCsrKWsuZmluZChlLGlbdF0sbik7cmV0dXJuIDE8cj9rLnVuaXF1ZVNvcnQobik6bn0sZmlsdGVyOmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsZXx8W10sITEpKX0sbm90OmZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLnB1c2hTdGFjayhqKHRoaXMsZXx8W10sITApKX0saXM6ZnVuY3Rpb24oZSl7cmV0dXJuISFqKHRoaXMsInN0cmluZyI9PXR5cGVvZiBlJiZOLnRlc3QoZSk/ayhlKTplfHxbXSwhMSkubGVuZ3RofX0pO3ZhciBxLEw9L14oPzpccyooPFtcd1xXXSs+KVtePl0qfCMoW1x3LV0rKSkkLzsoay5mbi5pbml0PWZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpO2lmKCFlKXJldHVybiB0aGlzO2lmKG49bnx8cSwic3RyaW5nIj09dHlwZW9mIGUpe2lmKCEocj0iPCI9PT1lWzBdJiYiPiI9PT1lW2UubGVuZ3RoLTFdJiYzPD1lLmxlbmd0aD9bbnVsbCxlLG51bGxdOkwuZXhlYyhlKSl8fCFyWzFdJiZ0KXJldHVybiF0fHx0LmpxdWVyeT8odHx8bikuZmluZChlKTp0aGlzLmNvbnN0cnVjdG9yKHQpLmZpbmQoZSk7aWYoclsxXSl7aWYodD10IGluc3RhbmNlb2Ygaz90WzBdOnQsay5tZXJnZSh0aGlzLGsucGFyc2VIVE1MKHJbMV0sdCYmdC5ub2RlVHlwZT90Lm93bmVyRG9jdW1lbnR8fHQ6RSwhMCkpLEQudGVzdChyWzFdKSYmay5pc1BsYWluT2JqZWN0KHQpKWZvcihyIGluIHQpbSh0aGlzW3JdKT90aGlzW3JdKHRbcl0pOnRoaXMuYXR0cihyLHRbcl0pO3JldHVybiB0aGlzfXJldHVybihpPUUuZ2V0RWxlbWVudEJ5SWQoclsyXSkpJiYodGhpc1swXT1pLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIGUubm9kZVR5cGU/KHRoaXNbMF09ZSx0aGlzLmxlbmd0aD0xLHRoaXMpOm0oZSk/dm9pZCAwIT09bi5yZWFkeT9uLnJlYWR5KGUpOmUoayk6ay5tYWtlQXJyYXkoZSx0aGlzKX0pLnByb3RvdHlwZT1rLmZuLHE9ayhFKTt2YXIgSD0vXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxPPXtjaGlsZHJlbjohMCxjb250ZW50czohMCxuZXh0OiEwLHByZXY6ITB9O2Z1bmN0aW9uIFAoZSx0KXt3aGlsZSgoZT1lW3RdKSYmMSE9PWUubm9kZVR5cGUpO3JldHVybiBlfWsuZm4uZXh0ZW5kKHtoYXM6ZnVuY3Rpb24oZSl7dmFyIHQ9ayhlLHRoaXMpLG49dC5sZW5ndGg7cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCl7Zm9yKHZhciBlPTA7ZTxuO2UrKylpZihrLmNvbnRhaW5zKHRoaXMsdFtlXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihlLHQpe3ZhciBuLHI9MCxpPXRoaXMubGVuZ3RoLG89W10sYT0ic3RyaW5nIiE9dHlwZW9mIGUmJmsoZSk7aWYoIU4udGVzdChlKSlmb3IoO3I8aTtyKyspZm9yKG49dGhpc1tyXTtuJiZuIT09dDtuPW4ucGFyZW50Tm9kZSlpZihuLm5vZGVUeXBlPDExJiYoYT8tMTxhLmluZGV4KG4pOjE9PT1uLm5vZGVUeXBlJiZrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKG4sZSkpKXtvLnB1c2gobik7YnJlYWt9cmV0dXJuIHRoaXMucHVzaFN0YWNrKDE8by5sZW5ndGg/ay51bmlxdWVTb3J0KG8pOm8pfSxpbmRleDpmdW5jdGlvbihlKXtyZXR1cm4gZT8ic3RyaW5nIj09dHlwZW9mIGU/aS5jYWxsKGsoZSksdGhpc1swXSk6aS5jYWxsKHRoaXMsZS5qcXVlcnk/ZVswXTplKTp0aGlzWzBdJiZ0aGlzWzBdLnBhcmVudE5vZGU/dGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGg6LTF9LGFkZDpmdW5jdGlvbihlLHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayhrLnVuaXF1ZVNvcnQoay5tZXJnZSh0aGlzLmdldCgpLGsoZSx0KSkpKX0sYWRkQmFjazpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5hZGQobnVsbD09ZT90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihlKSl9fSksay5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3JldHVybiB0JiYxMSE9PXQubm9kZVR5cGU/dDpudWxsfSxwYXJlbnRzOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsInBhcmVudE5vZGUiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gVChlLCJwYXJlbnROb2RlIixuKX0sbmV4dDpmdW5jdGlvbihlKXtyZXR1cm4gUChlLCJuZXh0U2libGluZyIpfSxwcmV2OmZ1bmN0aW9uKGUpe3JldHVybiBQKGUsInByZXZpb3VzU2libGluZyIpfSxuZXh0QWxsOmZ1bmN0aW9uKGUpe3JldHVybiBUKGUsIm5leHRTaWJsaW5nIil9LHByZXZBbGw6ZnVuY3Rpb24oZSl7cmV0dXJuIFQoZSwicHJldmlvdXNTaWJsaW5nIil9LG5leHRVbnRpbDpmdW5jdGlvbihlLHQsbil7cmV0dXJuIFQoZSwibmV4dFNpYmxpbmciLG4pfSxwcmV2VW50aWw6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiBUKGUsInByZXZpb3VzU2libGluZyIsbil9LHNpYmxpbmdzOmZ1bmN0aW9uKGUpe3JldHVybiBTKChlLnBhcmVudE5vZGV8fHt9KS5maXJzdENoaWxkLGUpfSxjaGlsZHJlbjpmdW5jdGlvbihlKXtyZXR1cm4gUyhlLmZpcnN0Q2hpbGQpfSxjb250ZW50czpmdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGUuY29udGVudERvY3VtZW50P2UuY29udGVudERvY3VtZW50OihBKGUsInRlbXBsYXRlIikmJihlPWUuY29udGVudHx8ZSksay5tZXJnZShbXSxlLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKHIsaSl7ay5mbltyXT1mdW5jdGlvbihlLHQpe3ZhciBuPWsubWFwKHRoaXMsaSxlKTtyZXR1cm4iVW50aWwiIT09ci5zbGljZSgtNSkmJih0PWUpLHQmJiJzdHJpbmciPT10eXBlb2YgdCYmKG49ay5maWx0ZXIodCxuKSksMTx0aGlzLmxlbmd0aCYmKE9bcl18fGsudW5pcXVlU29ydChuKSxILnRlc3QocikmJm4ucmV2ZXJzZSgpKSx0aGlzLnB1c2hTdGFjayhuKX19KTt2YXIgUj0vW15ceDIwXHRcclxuXGZdKy9nO2Z1bmN0aW9uIE0oZSl7cmV0dXJuIGV9ZnVuY3Rpb24gSShlKXt0aHJvdyBlfWZ1bmN0aW9uIFcoZSx0LG4scil7dmFyIGk7dHJ5e2UmJm0oaT1lLnByb21pc2UpP2kuY2FsbChlKS5kb25lKHQpLmZhaWwobik6ZSYmbShpPWUudGhlbik/aS5jYWxsKGUsdCxuKTp0LmFwcGx5KHZvaWQgMCxbZV0uc2xpY2UocikpfWNhdGNoKGUpe24uYXBwbHkodm9pZCAwLFtlXSl9fWsuQ2FsbGJhY2tzPWZ1bmN0aW9uKHIpe3ZhciBlLG47cj0ic3RyaW5nIj09dHlwZW9mIHI/KGU9cixuPXt9LGsuZWFjaChlLm1hdGNoKFIpfHxbXSxmdW5jdGlvbihlLHQpe25bdF09ITB9KSxuKTprLmV4dGVuZCh7fSxyKTt2YXIgaSx0LG8sYSxzPVtdLHU9W10sbD0tMSxjPWZ1bmN0aW9uKCl7Zm9yKGE9YXx8ci5vbmNlLG89aT0hMDt1Lmxlbmd0aDtsPS0xKXt0PXUuc2hpZnQoKTt3aGlsZSgrK2w8cy5sZW5ndGgpITE9PT1zW2xdLmFwcGx5KHRbMF0sdFsxXSkmJnIuc3RvcE9uRmFsc2UmJihsPXMubGVuZ3RoLHQ9ITEpfXIubWVtb3J5fHwodD0hMSksaT0hMSxhJiYocz10P1tdOiIiKX0sZj17YWRkOmZ1bmN0aW9uKCl7cmV0dXJuIHMmJih0JiYhaSYmKGw9cy5sZW5ndGgtMSx1LnB1c2godCkpLGZ1bmN0aW9uIG4oZSl7ay5lYWNoKGUsZnVuY3Rpb24oZSx0KXttKHQpP3IudW5pcXVlJiZmLmhhcyh0KXx8cy5wdXNoKHQpOnQmJnQubGVuZ3RoJiYic3RyaW5nIiE9PXcodCkmJm4odCl9KX0oYXJndW1lbnRzKSx0JiYhaSYmYygpKSx0aGlzfSxyZW1vdmU6ZnVuY3Rpb24oKXtyZXR1cm4gay5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihlLHQpe3ZhciBuO3doaWxlKC0xPChuPWsuaW5BcnJheSh0LHMsbikpKXMuc3BsaWNlKG4sMSksbjw9bCYmbC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGUpe3JldHVybiBlPy0xPGsuaW5BcnJheShlLHMpOjA8cy5sZW5ndGh9LGVtcHR5OmZ1bmN0aW9uKCl7cmV0dXJuIHMmJihzPVtdKSx0aGlzfSxkaXNhYmxlOmZ1bmN0aW9uKCl7cmV0dXJuIGE9dT1bXSxzPXQ9IiIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hc30sbG9jazpmdW5jdGlvbigpe3JldHVybiBhPXU9W10sdHx8aXx8KHM9dD0iIiksdGhpc30sbG9ja2VkOmZ1bmN0aW9uKCl7cmV0dXJuISFhfSxmaXJlV2l0aDpmdW5jdGlvbihlLHQpe3JldHVybiBhfHwodD1bZSwodD10fHxbXSkuc2xpY2U/dC5zbGljZSgpOnRdLHUucHVzaCh0KSxpfHxjKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gZi5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIW99fTtyZXR1cm4gZn0say5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGUpe3ZhciBvPVtbIm5vdGlmeSIsInByb2dyZXNzIixrLkNhbGxiYWNrcygibWVtb3J5Iiksay5DYWxsYmFja3MoIm1lbW9yeSIpLDJdLFsicmVzb2x2ZSIsImRvbmUiLGsuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLGsuQ2FsbGJhY2tzKCJvbmNlIG1lbW9yeSIpLDAsInJlc29sdmVkIl0sWyJyZWplY3QiLCJmYWlsIixrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSxrLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKSwxLCJyZWplY3RlZCJdXSxpPSJwZW5kaW5nIixhPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBpfSxhbHdheXM6ZnVuY3Rpb24oKXtyZXR1cm4gcy5kb25lKGFyZ3VtZW50cykuZmFpbChhcmd1bWVudHMpLHRoaXN9LCJjYXRjaCI6ZnVuY3Rpb24oZSl7cmV0dXJuIGEudGhlbihudWxsLGUpfSxwaXBlOmZ1bmN0aW9uKCl7dmFyIGk9YXJndW1lbnRzO3JldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uKHIpe2suZWFjaChvLGZ1bmN0aW9uKGUsdCl7dmFyIG49bShpW3RbNF1dKSYmaVt0WzRdXTtzW3RbMV1dKGZ1bmN0aW9uKCl7dmFyIGU9biYmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7ZSYmbShlLnByb21pc2UpP2UucHJvbWlzZSgpLnByb2dyZXNzKHIubm90aWZ5KS5kb25lKHIucmVzb2x2ZSkuZmFpbChyLnJlamVjdCk6clt0WzBdKyJXaXRoIl0odGhpcyxuP1tlXTphcmd1bWVudHMpfSl9KSxpPW51bGx9KS5wcm9taXNlKCl9LHRoZW46ZnVuY3Rpb24odCxuLHIpe3ZhciB1PTA7ZnVuY3Rpb24gbChpLG8sYSxzKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgbj10aGlzLHI9YXJndW1lbnRzLGU9ZnVuY3Rpb24oKXt2YXIgZSx0O2lmKCEoaTx1KSl7aWYoKGU9YS5hcHBseShuLHIpKT09PW8ucHJvbWlzZSgpKXRocm93IG5ldyBUeXBlRXJyb3IoIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvbiIpO3Q9ZSYmKCJvYmplY3QiPT10eXBlb2YgZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGUpJiZlLnRoZW4sbSh0KT9zP3QuY2FsbChlLGwodSxvLE0scyksbCh1LG8sSSxzKSk6KHUrKyx0LmNhbGwoZSxsKHUsbyxNLHMpLGwodSxvLEkscyksbCh1LG8sTSxvLm5vdGlmeVdpdGgpKSk6KGEhPT1NJiYobj12b2lkIDAscj1bZV0pLChzfHxvLnJlc29sdmVXaXRoKShuLHIpKX19LHQ9cz9lOmZ1bmN0aW9uKCl7dHJ5e2UoKX1jYXRjaChlKXtrLkRlZmVycmVkLmV4Y2VwdGlvbkhvb2smJmsuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHQuc3RhY2tUcmFjZSksdTw9aSsxJiYoYSE9PUkmJihuPXZvaWQgMCxyPVtlXSksby5yZWplY3RXaXRoKG4scikpfX07aT90KCk6KGsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYodC5zdGFja1RyYWNlPWsuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCkpLEMuc2V0VGltZW91dCh0KSl9fXJldHVybiBrLkRlZmVycmVkKGZ1bmN0aW9uKGUpe29bMF1bM10uYWRkKGwoMCxlLG0ocik/cjpNLGUubm90aWZ5V2l0aCkpLG9bMV1bM10uYWRkKGwoMCxlLG0odCk/dDpNKSksb1syXVszXS5hZGQobCgwLGUsbShuKT9uOkkpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihlKXtyZXR1cm4gbnVsbCE9ZT9rLmV4dGVuZChlLGEpOmF9fSxzPXt9O3JldHVybiBrLmVhY2gobyxmdW5jdGlvbihlLHQpe3ZhciBuPXRbMl0scj10WzVdO2FbdFsxXV09bi5hZGQsciYmbi5hZGQoZnVuY3Rpb24oKXtpPXJ9LG9bMy1lXVsyXS5kaXNhYmxlLG9bMy1lXVszXS5kaXNhYmxlLG9bMF1bMl0ubG9jayxvWzBdWzNdLmxvY2spLG4uYWRkKHRbM10uZmlyZSksc1t0WzBdXT1mdW5jdGlvbigpe3JldHVybiBzW3RbMF0rIldpdGgiXSh0aGlzPT09cz92b2lkIDA6dGhpcyxhcmd1bWVudHMpLHRoaXN9LHNbdFswXSsiV2l0aCJdPW4uZmlyZVdpdGh9KSxhLnByb21pc2UocyksZSYmZS5jYWxsKHMscyksc30sd2hlbjpmdW5jdGlvbihlKXt2YXIgbj1hcmd1bWVudHMubGVuZ3RoLHQ9bixyPUFycmF5KHQpLGk9cy5jYWxsKGFyZ3VtZW50cyksbz1rLkRlZmVycmVkKCksYT1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7clt0XT10aGlzLGlbdF09MTxhcmd1bWVudHMubGVuZ3RoP3MuY2FsbChhcmd1bWVudHMpOmUsLS1ufHxvLnJlc29sdmVXaXRoKHIsaSl9fTtpZihuPD0xJiYoVyhlLG8uZG9uZShhKHQpKS5yZXNvbHZlLG8ucmVqZWN0LCFuKSwicGVuZGluZyI9PT1vLnN0YXRlKCl8fG0oaVt0XSYmaVt0XS50aGVuKSkpcmV0dXJuIG8udGhlbigpO3doaWxlKHQtLSlXKGlbdF0sYSh0KSxvLnJlamVjdCk7cmV0dXJuIG8ucHJvbWlzZSgpfX0pO3ZhciAkPS9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO2suRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlLHQpe0MuY29uc29sZSYmQy5jb25zb2xlLndhcm4mJmUmJiQudGVzdChlLm5hbWUpJiZDLmNvbnNvbGUud2FybigialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogIitlLm1lc3NhZ2UsZS5zdGFjayx0KX0say5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihlKXtDLnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlfSl9O3ZhciBGPWsuRGVmZXJyZWQoKTtmdW5jdGlvbiBCKCl7RS5yZW1vdmVFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIixCKSxDLnJlbW92ZUV2ZW50TGlzdGVuZXIoImxvYWQiLEIpLGsucmVhZHkoKX1rLmZuLnJlYWR5PWZ1bmN0aW9uKGUpe3JldHVybiBGLnRoZW4oZSlbImNhdGNoIl0oZnVuY3Rpb24oZSl7ay5yZWFkeUV4Y2VwdGlvbihlKX0pLHRoaXN9LGsuZXh0ZW5kKHtpc1JlYWR5OiExLHJlYWR5V2FpdDoxLHJlYWR5OmZ1bmN0aW9uKGUpeyghMD09PWU/LS1rLnJlYWR5V2FpdDprLmlzUmVhZHkpfHwoay5pc1JlYWR5PSEwKSE9PWUmJjA8LS1rLnJlYWR5V2FpdHx8Ri5yZXNvbHZlV2l0aChFLFtrXSl9fSksay5yZWFkeS50aGVuPUYudGhlbiwiY29tcGxldGUiPT09RS5yZWFkeVN0YXRlfHwibG9hZGluZyIhPT1FLnJlYWR5U3RhdGUmJiFFLmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbD9DLnNldFRpbWVvdXQoay5yZWFkeSk6KEUuYWRkRXZlbnRMaXN0ZW5lcigiRE9NQ29udGVudExvYWRlZCIsQiksQy5hZGRFdmVudExpc3RlbmVyKCJsb2FkIixCKSk7dmFyIF89ZnVuY3Rpb24oZSx0LG4scixpLG8sYSl7dmFyIHM9MCx1PWUubGVuZ3RoLGw9bnVsbD09bjtpZigib2JqZWN0Ij09PXcobikpZm9yKHMgaW4gaT0hMCxuKV8oZSx0LHMsbltzXSwhMCxvLGEpO2Vsc2UgaWYodm9pZCAwIT09ciYmKGk9ITAsbShyKXx8KGE9ITApLGwmJihhPyh0LmNhbGwoZSxyKSx0PW51bGwpOihsPXQsdD1mdW5jdGlvbihlLHQsbil7cmV0dXJuIGwuY2FsbChrKGUpLG4pfSkpLHQpKWZvcig7czx1O3MrKyl0KGVbc10sbixhP3I6ci5jYWxsKGVbc10scyx0KGVbc10sbikpKTtyZXR1cm4gaT9lOmw/dC5jYWxsKGUpOnU/dChlWzBdLG4pOm99LHo9L14tbXMtLyxVPS8tKFthLXpdKS9nO2Z1bmN0aW9uIFgoZSx0KXtyZXR1cm4gdC50b1VwcGVyQ2FzZSgpfWZ1bmN0aW9uIFYoZSl7cmV0dXJuIGUucmVwbGFjZSh6LCJtcy0iKS5yZXBsYWNlKFUsWCl9dmFyIEc9ZnVuY3Rpb24oZSl7cmV0dXJuIDE9PT1lLm5vZGVUeXBlfHw5PT09ZS5ub2RlVHlwZXx8IStlLm5vZGVUeXBlfTtmdW5jdGlvbiBZKCl7dGhpcy5leHBhbmRvPWsuZXhwYW5kbytZLnVpZCsrfVkudWlkPTEsWS5wcm90b3R5cGU9e2NhY2hlOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdHx8KHQ9e30sRyhlKSYmKGUubm9kZVR5cGU/ZVt0aGlzLmV4cGFuZG9dPXQ6T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdGhpcy5leHBhbmRvLHt2YWx1ZTp0LGNvbmZpZ3VyYWJsZTohMH0pKSksdH0sc2V0OmZ1bmN0aW9uKGUsdCxuKXt2YXIgcixpPXRoaXMuY2FjaGUoZSk7aWYoInN0cmluZyI9PXR5cGVvZiB0KWlbVih0KV09bjtlbHNlIGZvcihyIGluIHQpaVtWKHIpXT10W3JdO3JldHVybiBpfSxnZXQ6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD90aGlzLmNhY2hlKGUpOmVbdGhpcy5leHBhbmRvXSYmZVt0aGlzLmV4cGFuZG9dW1YodCldfSxhY2Nlc3M6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB2b2lkIDA9PT10fHx0JiYic3RyaW5nIj09dHlwZW9mIHQmJnZvaWQgMD09PW4/dGhpcy5nZXQoZSx0KToodGhpcy5zZXQoZSx0LG4pLHZvaWQgMCE9PW4/bjp0KX0scmVtb3ZlOmZ1bmN0aW9uKGUsdCl7dmFyIG4scj1lW3RoaXMuZXhwYW5kb107aWYodm9pZCAwIT09cil7aWYodm9pZCAwIT09dCl7bj0odD1BcnJheS5pc0FycmF5KHQpP3QubWFwKFYpOih0PVYodCkpaW4gcj9bdF06dC5tYXRjaChSKXx8W10pLmxlbmd0aDt3aGlsZShuLS0pZGVsZXRlIHJbdFtuXV19KHZvaWQgMD09PXR8fGsuaXNFbXB0eU9iamVjdChyKSkmJihlLm5vZGVUeXBlP2VbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIGVbdGhpcy5leHBhbmRvXSl9fSxoYXNEYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PWVbdGhpcy5leHBhbmRvXTtyZXR1cm4gdm9pZCAwIT09dCYmIWsuaXNFbXB0eU9iamVjdCh0KX19O3ZhciBRPW5ldyBZLEo9bmV3IFksSz0vXig/Olx7W1x3XFddKlx9fFxbW1x3XFddKlxdKSQvLFo9L1tBLVpdL2c7ZnVuY3Rpb24gZWUoZSx0LG4pe3ZhciByLGk7aWYodm9pZCAwPT09biYmMT09PWUubm9kZVR5cGUpaWYocj0iZGF0YS0iK3QucmVwbGFjZShaLCItJCYiKS50b0xvd2VyQ2FzZSgpLCJzdHJpbmciPT10eXBlb2Yobj1lLmdldEF0dHJpYnV0ZShyKSkpe3RyeXtuPSJ0cnVlIj09PShpPW4pfHwiZmFsc2UiIT09aSYmKCJudWxsIj09PWk/bnVsbDppPT09K2krIiI/K2k6Sy50ZXN0KGkpP0pTT04ucGFyc2UoaSk6aSl9Y2F0Y2goZSl7fUouc2V0KGUsdCxuKX1lbHNlIG49dm9pZCAwO3JldHVybiBufWsuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGUpe3JldHVybiBKLmhhc0RhdGEoZSl8fFEuaGFzRGF0YShlKX0sZGF0YTpmdW5jdGlvbihlLHQsbil7cmV0dXJuIEouYWNjZXNzKGUsdCxuKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe0oucmVtb3ZlKGUsdCl9LF9kYXRhOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gUS5hY2Nlc3MoZSx0LG4pfSxfcmVtb3ZlRGF0YTpmdW5jdGlvbihlLHQpe1EucmVtb3ZlKGUsdCl9fSksay5mbi5leHRlbmQoe2RhdGE6ZnVuY3Rpb24obixlKXt2YXIgdCxyLGksbz10aGlzWzBdLGE9byYmby5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PW4pe2lmKHRoaXMubGVuZ3RoJiYoaT1KLmdldChvKSwxPT09by5ub2RlVHlwZSYmIVEuZ2V0KG8sImhhc0RhdGFBdHRycyIpKSl7dD1hLmxlbmd0aDt3aGlsZSh0LS0pYVt0XSYmMD09PShyPWFbdF0ubmFtZSkuaW5kZXhPZigiZGF0YS0iKSYmKHI9VihyLnNsaWNlKDUpKSxlZShvLHIsaVtyXSkpO1Euc2V0KG8sImhhc0RhdGFBdHRycyIsITApfXJldHVybiBpfXJldHVybiJvYmplY3QiPT10eXBlb2Ygbj90aGlzLmVhY2goZnVuY3Rpb24oKXtKLnNldCh0aGlzLG4pfSk6Xyh0aGlzLGZ1bmN0aW9uKGUpe3ZhciB0O2lmKG8mJnZvaWQgMD09PWUpcmV0dXJuIHZvaWQgMCE9PSh0PUouZ2V0KG8sbikpP3Q6dm9pZCAwIT09KHQ9ZWUobyxuKSk/dDp2b2lkIDA7dGhpcy5lYWNoKGZ1bmN0aW9uKCl7Si5zZXQodGhpcyxuLGUpfSl9LG51bGwsZSwxPGFyZ3VtZW50cy5sZW5ndGgsbnVsbCwhMCl9LHJlbW92ZURhdGE6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe0oucmVtb3ZlKHRoaXMsZSl9KX19KSxrLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByO2lmKGUpcmV0dXJuIHQ9KHR8fCJmeCIpKyJxdWV1ZSIscj1RLmdldChlLHQpLG4mJighcnx8QXJyYXkuaXNBcnJheShuKT9yPVEuYWNjZXNzKGUsdCxrLm1ha2VBcnJheShuKSk6ci5wdXNoKG4pKSxyfHxbXX0sZGVxdWV1ZTpmdW5jdGlvbihlLHQpe3Q9dHx8ImZ4Ijt2YXIgbj1rLnF1ZXVlKGUsdCkscj1uLmxlbmd0aCxpPW4uc2hpZnQoKSxvPWsuX3F1ZXVlSG9va3MoZSx0KTsiaW5wcm9ncmVzcyI9PT1pJiYoaT1uLnNoaWZ0KCksci0tKSxpJiYoImZ4Ij09PXQmJm4udW5zaGlmdCgiaW5wcm9ncmVzcyIpLGRlbGV0ZSBvLnN0b3AsaS5jYWxsKGUsZnVuY3Rpb24oKXtrLmRlcXVldWUoZSx0KX0sbykpLCFyJiZvJiZvLmVtcHR5LmZpcmUoKX0sX3F1ZXVlSG9va3M6ZnVuY3Rpb24oZSx0KXt2YXIgbj10KyJxdWV1ZUhvb2tzIjtyZXR1cm4gUS5nZXQoZSxuKXx8US5hY2Nlc3MoZSxuLHtlbXB0eTprLkNhbGxiYWNrcygib25jZSBtZW1vcnkiKS5hZGQoZnVuY3Rpb24oKXtRLnJlbW92ZShlLFt0KyJxdWV1ZSIsbl0pfSl9KX19KSxrLmZuLmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24odCxuKXt2YXIgZT0yO3JldHVybiJzdHJpbmciIT10eXBlb2YgdCYmKG49dCx0PSJmeCIsZS0tKSxhcmd1bWVudHMubGVuZ3RoPGU/ay5xdWV1ZSh0aGlzWzBdLHQpOnZvaWQgMD09PW4/dGhpczp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1rLnF1ZXVlKHRoaXMsdCxuKTtrLl9xdWV1ZUhvb2tzKHRoaXMsdCksImZ4Ij09PXQmJiJpbnByb2dyZXNzIiE9PWVbMF0mJmsuZGVxdWV1ZSh0aGlzLHQpfSl9LGRlcXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2suZGVxdWV1ZSh0aGlzLGUpfSl9LGNsZWFyUXVldWU6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucXVldWUoZXx8ImZ4IixbXSl9LHByb21pc2U6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTEsaT1rLkRlZmVycmVkKCksbz10aGlzLGE9dGhpcy5sZW5ndGgscz1mdW5jdGlvbigpey0tcnx8aS5yZXNvbHZlV2l0aChvLFtvXSl9OyJzdHJpbmciIT10eXBlb2YgZSYmKHQ9ZSxlPXZvaWQgMCksZT1lfHwiZngiO3doaWxlKGEtLSkobj1RLmdldChvW2FdLGUrInF1ZXVlSG9va3MiKSkmJm4uZW1wdHkmJihyKyssbi5lbXB0eS5hZGQocykpO3JldHVybiBzKCksaS5wcm9taXNlKHQpfX0pO3ZhciB0ZT0vWystXT8oPzpcZCpcLnwpXGQrKD86W2VFXVsrLV0/XGQrfCkvLnNvdXJjZSxuZT1uZXcgUmVnRXhwKCJeKD86KFsrLV0pPXwpKCIrdGUrIikoW2EteiVdKikkIiwiaSIpLHJlPVsiVG9wIiwiUmlnaHQiLCJCb3R0b20iLCJMZWZ0Il0saWU9RS5kb2N1bWVudEVsZW1lbnQsb2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfSxhZT17Y29tcG9zZWQ6ITB9O2llLmdldFJvb3ROb2RlJiYob2U9ZnVuY3Rpb24oZSl7cmV0dXJuIGsuY29udGFpbnMoZS5vd25lckRvY3VtZW50LGUpfHxlLmdldFJvb3ROb2RlKGFlKT09PWUub3duZXJEb2N1bWVudH0pO3ZhciBzZT1mdW5jdGlvbihlLHQpe3JldHVybiJub25lIj09PShlPXR8fGUpLnN0eWxlLmRpc3BsYXl8fCIiPT09ZS5zdHlsZS5kaXNwbGF5JiZvZShlKSYmIm5vbmUiPT09ay5jc3MoZSwiZGlzcGxheSIpfSx1ZT1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGE9e307Zm9yKG8gaW4gdClhW29dPWUuc3R5bGVbb10sZS5zdHlsZVtvXT10W29dO2ZvcihvIGluIGk9bi5hcHBseShlLHJ8fFtdKSx0KWUuc3R5bGVbb109YVtvXTtyZXR1cm4gaX07ZnVuY3Rpb24gbGUoZSx0LG4scil7dmFyIGksbyxhPTIwLHM9cj9mdW5jdGlvbigpe3JldHVybiByLmN1cigpfTpmdW5jdGlvbigpe3JldHVybiBrLmNzcyhlLHQsIiIpfSx1PXMoKSxsPW4mJm5bM118fChrLmNzc051bWJlclt0XT8iIjoicHgiKSxjPWUubm9kZVR5cGUmJihrLmNzc051bWJlclt0XXx8InB4IiE9PWwmJit1KSYmbmUuZXhlYyhrLmNzcyhlLHQpKTtpZihjJiZjWzNdIT09bCl7dS89MixsPWx8fGNbM10sYz0rdXx8MTt3aGlsZShhLS0pay5zdHlsZShlLHQsYytsKSwoMS1vKSooMS0obz1zKCkvdXx8LjUpKTw9MCYmKGE9MCksYy89bztjKj0yLGsuc3R5bGUoZSx0LGMrbCksbj1ufHxbXX1yZXR1cm4gbiYmKGM9K2N8fCt1fHwwLGk9blsxXT9jKyhuWzFdKzEpKm5bMl06K25bMl0sciYmKHIudW5pdD1sLHIuc3RhcnQ9YyxyLmVuZD1pKSksaX12YXIgY2U9e307ZnVuY3Rpb24gZmUoZSx0KXtmb3IodmFyIG4scixpLG8sYSxzLHUsbD1bXSxjPTAsZj1lLmxlbmd0aDtjPGY7YysrKShyPWVbY10pLnN0eWxlJiYobj1yLnN0eWxlLmRpc3BsYXksdD8oIm5vbmUiPT09biYmKGxbY109US5nZXQociwiZGlzcGxheSIpfHxudWxsLGxbY118fChyLnN0eWxlLmRpc3BsYXk9IiIpKSwiIj09PXIuc3R5bGUuZGlzcGxheSYmc2UocikmJihsW2NdPSh1PWE9bz12b2lkIDAsYT0oaT1yKS5vd25lckRvY3VtZW50LHM9aS5ub2RlTmFtZSwodT1jZVtzXSl8fChvPWEuYm9keS5hcHBlbmRDaGlsZChhLmNyZWF0ZUVsZW1lbnQocykpLHU9ay5jc3MobywiZGlzcGxheSIpLG8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKSwibm9uZSI9PT11JiYodT0iYmxvY2siKSxjZVtzXT11KSkpKToibm9uZSIhPT1uJiYobFtjXT0ibm9uZSIsUS5zZXQociwiZGlzcGxheSIsbikpKTtmb3IoYz0wO2M8ZjtjKyspbnVsbCE9bFtjXSYmKGVbY10uc3R5bGUuZGlzcGxheT1sW2NdKTtyZXR1cm4gZX1rLmZuLmV4dGVuZCh7c2hvdzpmdW5jdGlvbigpe3JldHVybiBmZSh0aGlzLCEwKX0saGlkZTpmdW5jdGlvbigpe3JldHVybiBmZSh0aGlzKX0sdG9nZ2xlOmZ1bmN0aW9uKGUpe3JldHVybiJib29sZWFuIj09dHlwZW9mIGU/ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtzZSh0aGlzKT9rKHRoaXMpLnNob3coKTprKHRoaXMpLmhpZGUoKX0pfX0pO3ZhciBwZT0vXig/OmNoZWNrYm94fHJhZGlvKSQvaSxkZT0vPChbYS16XVteXC9cMD5ceDIwXHRcclxuXGZdKikvaSxoZT0vXiR8Xm1vZHVsZSR8XC8oPzpqYXZhfGVjbWEpc2NyaXB0L2ksZ2U9e29wdGlvbjpbMSwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPiIsIjwvc2VsZWN0PiJdLHRoZWFkOlsxLCI8dGFibGU+IiwiPC90YWJsZT4iXSxjb2w6WzIsIjx0YWJsZT48Y29sZ3JvdXA+IiwiPC9jb2xncm91cD48L3RhYmxlPiJdLHRyOlsyLCI8dGFibGU+PHRib2R5PiIsIjwvdGJvZHk+PC90YWJsZT4iXSx0ZDpbMywiPHRhYmxlPjx0Ym9keT48dHI+IiwiPC90cj48L3Rib2R5PjwvdGFibGU+Il0sX2RlZmF1bHQ6WzAsIiIsIiJdfTtmdW5jdGlvbiB2ZShlLHQpe3ZhciBuO3JldHVybiBuPSJ1bmRlZmluZWQiIT10eXBlb2YgZS5nZXRFbGVtZW50c0J5VGFnTmFtZT9lLmdldEVsZW1lbnRzQnlUYWdOYW1lKHR8fCIqIik6InVuZGVmaW5lZCIhPXR5cGVvZiBlLnF1ZXJ5U2VsZWN0b3JBbGw/ZS5xdWVyeVNlbGVjdG9yQWxsKHR8fCIqIik6W10sdm9pZCAwPT09dHx8dCYmQShlLHQpP2subWVyZ2UoW2VdLG4pOm59ZnVuY3Rpb24geWUoZSx0KXtmb3IodmFyIG49MCxyPWUubGVuZ3RoO248cjtuKyspUS5zZXQoZVtuXSwiZ2xvYmFsRXZhbCIsIXR8fFEuZ2V0KHRbbl0sImdsb2JhbEV2YWwiKSl9Z2Uub3B0Z3JvdXA9Z2Uub3B0aW9uLGdlLnRib2R5PWdlLnRmb290PWdlLmNvbGdyb3VwPWdlLmNhcHRpb249Z2UudGhlYWQsZ2UudGg9Z2UudGQ7dmFyIG1lLHhlLGJlPS88fCYjP1x3KzsvO2Z1bmN0aW9uIHdlKGUsdCxuLHIsaSl7Zm9yKHZhciBvLGEscyx1LGwsYyxmPXQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLHA9W10sZD0wLGg9ZS5sZW5ndGg7ZDxoO2QrKylpZigobz1lW2RdKXx8MD09PW8paWYoIm9iamVjdCI9PT13KG8pKWsubWVyZ2UocCxvLm5vZGVUeXBlP1tvXTpvKTtlbHNlIGlmKGJlLnRlc3Qobykpe2E9YXx8Zi5hcHBlbmRDaGlsZCh0LmNyZWF0ZUVsZW1lbnQoImRpdiIpKSxzPShkZS5leGVjKG8pfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpLHU9Z2Vbc118fGdlLl9kZWZhdWx0LGEuaW5uZXJIVE1MPXVbMV0ray5odG1sUHJlZmlsdGVyKG8pK3VbMl0sYz11WzBdO3doaWxlKGMtLSlhPWEubGFzdENoaWxkO2subWVyZ2UocCxhLmNoaWxkTm9kZXMpLChhPWYuZmlyc3RDaGlsZCkudGV4dENvbnRlbnQ9IiJ9ZWxzZSBwLnB1c2godC5jcmVhdGVUZXh0Tm9kZShvKSk7Zi50ZXh0Q29udGVudD0iIixkPTA7d2hpbGUobz1wW2QrK10paWYociYmLTE8ay5pbkFycmF5KG8scikpaSYmaS5wdXNoKG8pO2Vsc2UgaWYobD1vZShvKSxhPXZlKGYuYXBwZW5kQ2hpbGQobyksInNjcmlwdCIpLGwmJnllKGEpLG4pe2M9MDt3aGlsZShvPWFbYysrXSloZS50ZXN0KG8udHlwZXx8IiIpJiZuLnB1c2gobyl9cmV0dXJuIGZ9bWU9RS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkuYXBwZW5kQ2hpbGQoRS5jcmVhdGVFbGVtZW50KCJkaXYiKSksKHhlPUUuY3JlYXRlRWxlbWVudCgiaW5wdXQiKSkuc2V0QXR0cmlidXRlKCJ0eXBlIiwicmFkaW8iKSx4ZS5zZXRBdHRyaWJ1dGUoImNoZWNrZWQiLCJjaGVja2VkIikseGUuc2V0QXR0cmlidXRlKCJuYW1lIiwidCIpLG1lLmFwcGVuZENoaWxkKHhlKSx5LmNoZWNrQ2xvbmU9bWUuY2xvbmVOb2RlKCEwKS5jbG9uZU5vZGUoITApLmxhc3RDaGlsZC5jaGVja2VkLG1lLmlubmVySFRNTD0iPHRleHRhcmVhPng8L3RleHRhcmVhPiIseS5ub0Nsb25lQ2hlY2tlZD0hIW1lLmNsb25lTm9kZSghMCkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTt2YXIgVGU9L15rZXkvLENlPS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxFZT0vXihbXi5dKikoPzpcLiguKyl8KS87ZnVuY3Rpb24ga2UoKXtyZXR1cm4hMH1mdW5jdGlvbiBTZSgpe3JldHVybiExfWZ1bmN0aW9uIE5lKGUsdCl7cmV0dXJuIGU9PT1mdW5jdGlvbigpe3RyeXtyZXR1cm4gRS5hY3RpdmVFbGVtZW50fWNhdGNoKGUpe319KCk9PSgiZm9jdXMiPT09dCl9ZnVuY3Rpb24gQWUoZSx0LG4scixpLG8pe3ZhciBhLHM7aWYoIm9iamVjdCI9PXR5cGVvZiB0KXtmb3IocyBpbiJzdHJpbmciIT10eXBlb2YgbiYmKHI9cnx8bixuPXZvaWQgMCksdClBZShlLHMsbixyLHRbc10sbyk7cmV0dXJuIGV9aWYobnVsbD09ciYmbnVsbD09aT8oaT1uLHI9bj12b2lkIDApOm51bGw9PWkmJigic3RyaW5nIj09dHlwZW9mIG4/KGk9cixyPXZvaWQgMCk6KGk9cixyPW4sbj12b2lkIDApKSwhMT09PWkpaT1TZTtlbHNlIGlmKCFpKXJldHVybiBlO3JldHVybiAxPT09byYmKGE9aSwoaT1mdW5jdGlvbihlKXtyZXR1cm4gaygpLm9mZihlKSxhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0pLmd1aWQ9YS5ndWlkfHwoYS5ndWlkPWsuZ3VpZCsrKSksZS5lYWNoKGZ1bmN0aW9uKCl7ay5ldmVudC5hZGQodGhpcyx0LGkscixuKX0pfWZ1bmN0aW9uIERlKGUsaSxvKXtvPyhRLnNldChlLGksITEpLGsuZXZlbnQuYWRkKGUsaSx7bmFtZXNwYWNlOiExLGhhbmRsZXI6ZnVuY3Rpb24oZSl7dmFyIHQsbixyPVEuZ2V0KHRoaXMsaSk7aWYoMSZlLmlzVHJpZ2dlciYmdGhpc1tpXSl7aWYoci5sZW5ndGgpKGsuZXZlbnQuc3BlY2lhbFtpXXx8e30pLmRlbGVnYXRlVHlwZSYmZS5zdG9wUHJvcGFnYXRpb24oKTtlbHNlIGlmKHI9cy5jYWxsKGFyZ3VtZW50cyksUS5zZXQodGhpcyxpLHIpLHQ9byh0aGlzLGkpLHRoaXNbaV0oKSxyIT09KG49US5nZXQodGhpcyxpKSl8fHQ/US5zZXQodGhpcyxpLCExKTpuPXt9LHIhPT1uKXJldHVybiBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUucHJldmVudERlZmF1bHQoKSxuLnZhbHVlfWVsc2Ugci5sZW5ndGgmJihRLnNldCh0aGlzLGkse3ZhbHVlOmsuZXZlbnQudHJpZ2dlcihrLmV4dGVuZChyWzBdLGsuRXZlbnQucHJvdG90eXBlKSxyLnNsaWNlKDEpLHRoaXMpfSksZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSl9fSkpOnZvaWQgMD09PVEuZ2V0KGUsaSkmJmsuZXZlbnQuYWRkKGUsaSxrZSl9ay5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbih0LGUsbixyLGkpe3ZhciBvLGEscyx1LGwsYyxmLHAsZCxoLGcsdj1RLmdldCh0KTtpZih2KXtuLmhhbmRsZXImJihuPShvPW4pLmhhbmRsZXIsaT1vLnNlbGVjdG9yKSxpJiZrLmZpbmQubWF0Y2hlc1NlbGVjdG9yKGllLGkpLG4uZ3VpZHx8KG4uZ3VpZD1rLmd1aWQrKyksKHU9di5ldmVudHMpfHwodT12LmV2ZW50cz17fSksKGE9di5oYW5kbGUpfHwoYT12LmhhbmRsZT1mdW5jdGlvbihlKXtyZXR1cm4idW5kZWZpbmVkIiE9dHlwZW9mIGsmJmsuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP2suZXZlbnQuZGlzcGF0Y2guYXBwbHkodCxhcmd1bWVudHMpOnZvaWQgMH0pLGw9KGU9KGV8fCIiKS5tYXRjaChSKXx8WyIiXSkubGVuZ3RoO3doaWxlKGwtLSlkPWc9KHM9RWUuZXhlYyhlW2xdKXx8W10pWzFdLGg9KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxkJiYoZj1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LGQ9KGk/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGQsZj1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LGM9ay5leHRlbmQoe3R5cGU6ZCxvcmlnVHlwZTpnLGRhdGE6cixoYW5kbGVyOm4sZ3VpZDpuLmd1aWQsc2VsZWN0b3I6aSxuZWVkc0NvbnRleHQ6aSYmay5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KGkpLG5hbWVzcGFjZTpoLmpvaW4oIi4iKX0sbyksKHA9dVtkXSl8fCgocD11W2RdPVtdKS5kZWxlZ2F0ZUNvdW50PTAsZi5zZXR1cCYmITEhPT1mLnNldHVwLmNhbGwodCxyLGgsYSl8fHQuYWRkRXZlbnRMaXN0ZW5lciYmdC5hZGRFdmVudExpc3RlbmVyKGQsYSkpLGYuYWRkJiYoZi5hZGQuY2FsbCh0LGMpLGMuaGFuZGxlci5ndWlkfHwoYy5oYW5kbGVyLmd1aWQ9bi5ndWlkKSksaT9wLnNwbGljZShwLmRlbGVnYXRlQ291bnQrKywwLGMpOnAucHVzaChjKSxrLmV2ZW50Lmdsb2JhbFtkXT0hMCl9fSxyZW1vdmU6ZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbyxhLHMsdSxsLGMsZixwLGQsaCxnLHY9US5oYXNEYXRhKGUpJiZRLmdldChlKTtpZih2JiYodT12LmV2ZW50cykpe2w9KHQ9KHR8fCIiKS5tYXRjaChSKXx8WyIiXSkubGVuZ3RoO3doaWxlKGwtLSlpZihkPWc9KHM9RWUuZXhlYyh0W2xdKXx8W10pWzFdLGg9KHNbMl18fCIiKS5zcGxpdCgiLiIpLnNvcnQoKSxkKXtmPWsuZXZlbnQuc3BlY2lhbFtkXXx8e30scD11W2Q9KHI/Zi5kZWxlZ2F0ZVR5cGU6Zi5iaW5kVHlwZSl8fGRdfHxbXSxzPXNbMl0mJm5ldyBSZWdFeHAoIihefFxcLikiK2guam9pbigiXFwuKD86LipcXC58KSIpKyIoXFwufCQpIiksYT1vPXAubGVuZ3RoO3doaWxlKG8tLSljPXBbb10sIWkmJmchPT1jLm9yaWdUeXBlfHxuJiZuLmd1aWQhPT1jLmd1aWR8fHMmJiFzLnRlc3QoYy5uYW1lc3BhY2UpfHxyJiZyIT09Yy5zZWxlY3RvciYmKCIqKiIhPT1yfHwhYy5zZWxlY3Rvcil8fChwLnNwbGljZShvLDEpLGMuc2VsZWN0b3ImJnAuZGVsZWdhdGVDb3VudC0tLGYucmVtb3ZlJiZmLnJlbW92ZS5jYWxsKGUsYykpO2EmJiFwLmxlbmd0aCYmKGYudGVhcmRvd24mJiExIT09Zi50ZWFyZG93bi5jYWxsKGUsaCx2LmhhbmRsZSl8fGsucmVtb3ZlRXZlbnQoZSxkLHYuaGFuZGxlKSxkZWxldGUgdVtkXSl9ZWxzZSBmb3IoZCBpbiB1KWsuZXZlbnQucmVtb3ZlKGUsZCt0W2xdLG4sciwhMCk7ay5pc0VtcHR5T2JqZWN0KHUpJiZRLnJlbW92ZShlLCJoYW5kbGUgZXZlbnRzIil9fSxkaXNwYXRjaDpmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGEscz1rLmV2ZW50LmZpeChlKSx1PW5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKSxsPShRLmdldCh0aGlzLCJldmVudHMiKXx8e30pW3MudHlwZV18fFtdLGM9ay5ldmVudC5zcGVjaWFsW3MudHlwZV18fHt9O2Zvcih1WzBdPXMsdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspdVt0XT1hcmd1bWVudHNbdF07aWYocy5kZWxlZ2F0ZVRhcmdldD10aGlzLCFjLnByZURpc3BhdGNofHwhMSE9PWMucHJlRGlzcGF0Y2guY2FsbCh0aGlzLHMpKXthPWsuZXZlbnQuaGFuZGxlcnMuY2FsbCh0aGlzLHMsbCksdD0wO3doaWxlKChpPWFbdCsrXSkmJiFzLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpe3MuY3VycmVudFRhcmdldD1pLmVsZW0sbj0wO3doaWxlKChvPWkuaGFuZGxlcnNbbisrXSkmJiFzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkpcy5ybmFtZXNwYWNlJiYhMSE9PW8ubmFtZXNwYWNlJiYhcy5ybmFtZXNwYWNlLnRlc3Qoby5uYW1lc3BhY2UpfHwocy5oYW5kbGVPYmo9byxzLmRhdGE9by5kYXRhLHZvaWQgMCE9PShyPSgoay5ldmVudC5zcGVjaWFsW28ub3JpZ1R5cGVdfHx7fSkuaGFuZGxlfHxvLmhhbmRsZXIpLmFwcGx5KGkuZWxlbSx1KSkmJiExPT09KHMucmVzdWx0PXIpJiYocy5wcmV2ZW50RGVmYXVsdCgpLHMuc3RvcFByb3BhZ2F0aW9uKCkpKX1yZXR1cm4gYy5wb3N0RGlzcGF0Y2gmJmMucG9zdERpc3BhdGNoLmNhbGwodGhpcyxzKSxzLnJlc3VsdH19LGhhbmRsZXJzOmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG8sYSxzPVtdLHU9dC5kZWxlZ2F0ZUNvdW50LGw9ZS50YXJnZXQ7aWYodSYmbC5ub2RlVHlwZSYmISgiY2xpY2siPT09ZS50eXBlJiYxPD1lLmJ1dHRvbikpZm9yKDtsIT09dGhpcztsPWwucGFyZW50Tm9kZXx8dGhpcylpZigxPT09bC5ub2RlVHlwZSYmKCJjbGljayIhPT1lLnR5cGV8fCEwIT09bC5kaXNhYmxlZCkpe2ZvcihvPVtdLGE9e30sbj0wO248dTtuKyspdm9pZCAwPT09YVtpPShyPXRbbl0pLnNlbGVjdG9yKyIgIl0mJihhW2ldPXIubmVlZHNDb250ZXh0Py0xPGsoaSx0aGlzKS5pbmRleChsKTprLmZpbmQoaSx0aGlzLG51bGwsW2xdKS5sZW5ndGgpLGFbaV0mJm8ucHVzaChyKTtvLmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6b30pfXJldHVybiBsPXRoaXMsdTx0Lmxlbmd0aCYmcy5wdXNoKHtlbGVtOmwsaGFuZGxlcnM6dC5zbGljZSh1KX0pLHN9LGFkZFByb3A6ZnVuY3Rpb24odCxlKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoay5FdmVudC5wcm90b3R5cGUsdCx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0Om0oZSk/ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIGUodGhpcy5vcmlnaW5hbEV2ZW50KX06ZnVuY3Rpb24oKXtpZih0aGlzLm9yaWdpbmFsRXZlbnQpcmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudFt0XX0sc2V0OmZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLHQse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwLHZhbHVlOmV9KX19KX0sZml4OmZ1bmN0aW9uKGUpe3JldHVybiBlW2suZXhwYW5kb10/ZTpuZXcgay5FdmVudChlKX0sc3BlY2lhbDp7bG9hZDp7bm9CdWJibGU6ITB9LGNsaWNrOntzZXR1cDpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmRGUodCwiY2xpY2siLGtlKSwhMX0sdHJpZ2dlcjpmdW5jdGlvbihlKXt2YXIgdD10aGlzfHxlO3JldHVybiBwZS50ZXN0KHQudHlwZSkmJnQuY2xpY2smJkEodCwiaW5wdXQiKSYmRGUodCwiY2xpY2siKSwhMH0sX2RlZmF1bHQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS50YXJnZXQ7cmV0dXJuIHBlLnRlc3QodC50eXBlKSYmdC5jbGljayYmQSh0LCJpbnB1dCIpJiZRLmdldCh0LCJjbGljayIpfHxBKHQsImEiKX19LGJlZm9yZXVubG9hZDp7cG9zdERpc3BhdGNoOmZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWUucmVzdWx0JiZlLm9yaWdpbmFsRXZlbnQmJihlLm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWU9ZS5yZXN1bHQpfX19fSxrLnJlbW92ZUV2ZW50PWZ1bmN0aW9uKGUsdCxuKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXImJmUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LG4pfSxrLkV2ZW50PWZ1bmN0aW9uKGUsdCl7aWYoISh0aGlzIGluc3RhbmNlb2Ygay5FdmVudCkpcmV0dXJuIG5ldyBrLkV2ZW50KGUsdCk7ZSYmZS50eXBlPyh0aGlzLm9yaWdpbmFsRXZlbnQ9ZSx0aGlzLnR5cGU9ZS50eXBlLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWUuZGVmYXVsdFByZXZlbnRlZHx8dm9pZCAwPT09ZS5kZWZhdWx0UHJldmVudGVkJiYhMT09PWUucmV0dXJuVmFsdWU/a2U6U2UsdGhpcy50YXJnZXQ9ZS50YXJnZXQmJjM9PT1lLnRhcmdldC5ub2RlVHlwZT9lLnRhcmdldC5wYXJlbnROb2RlOmUudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1lLmN1cnJlbnRUYXJnZXQsdGhpcy5yZWxhdGVkVGFyZ2V0PWUucmVsYXRlZFRhcmdldCk6dGhpcy50eXBlPWUsdCYmay5leHRlbmQodGhpcyx0KSx0aGlzLnRpbWVTdGFtcD1lJiZlLnRpbWVTdGFtcHx8RGF0ZS5ub3coKSx0aGlzW2suZXhwYW5kb109ITB9LGsuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjprLkV2ZW50LGlzRGVmYXVsdFByZXZlbnRlZDpTZSxpc1Byb3BhZ2F0aW9uU3RvcHBlZDpTZSxpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDpTZSxpc1NpbXVsYXRlZDohMSxwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3JpZ2luYWxFdmVudDt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1rZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5wcmV2ZW50RGVmYXVsdCgpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgZT10aGlzLm9yaWdpbmFsRXZlbnQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1rZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9a2UsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksdGhpcy5zdG9wUHJvcGFnYXRpb24oKX19LGsuZWFjaCh7YWx0S2V5OiEwLGJ1YmJsZXM6ITAsY2FuY2VsYWJsZTohMCxjaGFuZ2VkVG91Y2hlczohMCxjdHJsS2V5OiEwLGRldGFpbDohMCxldmVudFBoYXNlOiEwLG1ldGFLZXk6ITAscGFnZVg6ITAscGFnZVk6ITAsc2hpZnRLZXk6ITAsdmlldzohMCwiY2hhciI6ITAsY29kZTohMCxjaGFyQ29kZTohMCxrZXk6ITAsa2V5Q29kZTohMCxidXR0b246ITAsYnV0dG9uczohMCxjbGllbnRYOiEwLGNsaWVudFk6ITAsb2Zmc2V0WDohMCxvZmZzZXRZOiEwLHBvaW50ZXJJZDohMCxwb2ludGVyVHlwZTohMCxzY3JlZW5YOiEwLHNjcmVlblk6ITAsdGFyZ2V0VG91Y2hlczohMCx0b0VsZW1lbnQ6ITAsdG91Y2hlczohMCx3aGljaDpmdW5jdGlvbihlKXt2YXIgdD1lLmJ1dHRvbjtyZXR1cm4gbnVsbD09ZS53aGljaCYmVGUudGVzdChlLnR5cGUpP251bGwhPWUuY2hhckNvZGU/ZS5jaGFyQ29kZTplLmtleUNvZGU6IWUud2hpY2gmJnZvaWQgMCE9PXQmJkNlLnRlc3QoZS50eXBlKT8xJnQ/MToyJnQ/Mzo0JnQ/MjowOmUud2hpY2h9fSxrLmV2ZW50LmFkZFByb3ApLGsuZWFjaCh7Zm9jdXM6ImZvY3VzaW4iLGJsdXI6ImZvY3Vzb3V0In0sZnVuY3Rpb24oZSx0KXtrLmV2ZW50LnNwZWNpYWxbZV09e3NldHVwOmZ1bmN0aW9uKCl7cmV0dXJuIERlKHRoaXMsZSxOZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oKXtyZXR1cm4gRGUodGhpcyxlKSwhMH0sZGVsZWdhdGVUeXBlOnR9fSksay5lYWNoKHttb3VzZWVudGVyOiJtb3VzZW92ZXIiLG1vdXNlbGVhdmU6Im1vdXNlb3V0Iixwb2ludGVyZW50ZXI6InBvaW50ZXJvdmVyIixwb2ludGVybGVhdmU6InBvaW50ZXJvdXQifSxmdW5jdGlvbihlLGkpe2suZXZlbnQuc3BlY2lhbFtlXT17ZGVsZWdhdGVUeXBlOmksYmluZFR5cGU6aSxoYW5kbGU6ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLnJlbGF0ZWRUYXJnZXQscj1lLmhhbmRsZU9iajtyZXR1cm4gbiYmKG49PT10aGlzfHxrLmNvbnRhaW5zKHRoaXMsbikpfHwoZS50eXBlPXIub3JpZ1R5cGUsdD1yLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpLGUudHlwZT1pKSx0fX19KSxrLmZuLmV4dGVuZCh7b246ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIEFlKHRoaXMsZSx0LG4scil9LG9uZTpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gQWUodGhpcyxlLHQsbixyLDEpfSxvZmY6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk7aWYoZSYmZS5wcmV2ZW50RGVmYXVsdCYmZS5oYW5kbGVPYmopcmV0dXJuIHI9ZS5oYW5kbGVPYmosayhlLmRlbGVnYXRlVGFyZ2V0KS5vZmYoci5uYW1lc3BhY2U/ci5vcmlnVHlwZSsiLiIrci5uYW1lc3BhY2U6ci5vcmlnVHlwZSxyLnNlbGVjdG9yLHIuaGFuZGxlciksdGhpcztpZigib2JqZWN0Ij09dHlwZW9mIGUpe2ZvcihpIGluIGUpdGhpcy5vZmYoaSx0LGVbaV0pO3JldHVybiB0aGlzfXJldHVybiExIT09dCYmImZ1bmN0aW9uIiE9dHlwZW9mIHR8fChuPXQsdD12b2lkIDApLCExPT09biYmKG49U2UpLHRoaXMuZWFjaChmdW5jdGlvbigpe2suZXZlbnQucmVtb3ZlKHRoaXMsZSxuLHQpfSl9fSk7dmFyIGplPS88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cL1wwPlx4MjBcdFxyXG5cZl0qKVtePl0qKVwvPi9naSxxZT0vPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxMZT0vY2hlY2tlZFxzKig/OltePV18PVxzKi5jaGVja2VkLikvaSxIZT0vXlxzKjwhKD86XFtDREFUQVxbfC0tKXwoPzpcXVxdfC0tKT5ccyokL2c7ZnVuY3Rpb24gT2UoZSx0KXtyZXR1cm4gQShlLCJ0YWJsZSIpJiZBKDExIT09dC5ub2RlVHlwZT90OnQuZmlyc3RDaGlsZCwidHIiKSYmayhlKS5jaGlsZHJlbigidGJvZHkiKVswXXx8ZX1mdW5jdGlvbiBQZShlKXtyZXR1cm4gZS50eXBlPShudWxsIT09ZS5nZXRBdHRyaWJ1dGUoInR5cGUiKSkrIi8iK2UudHlwZSxlfWZ1bmN0aW9uIFJlKGUpe3JldHVybiJ0cnVlLyI9PT0oZS50eXBlfHwiIikuc2xpY2UoMCw1KT9lLnR5cGU9ZS50eXBlLnNsaWNlKDUpOmUucmVtb3ZlQXR0cmlidXRlKCJ0eXBlIiksZX1mdW5jdGlvbiBNZShlLHQpe3ZhciBuLHIsaSxvLGEscyx1LGw7aWYoMT09PXQubm9kZVR5cGUpe2lmKFEuaGFzRGF0YShlKSYmKG89US5hY2Nlc3MoZSksYT1RLnNldCh0LG8pLGw9by5ldmVudHMpKWZvcihpIGluIGRlbGV0ZSBhLmhhbmRsZSxhLmV2ZW50cz17fSxsKWZvcihuPTAscj1sW2ldLmxlbmd0aDtuPHI7bisrKWsuZXZlbnQuYWRkKHQsaSxsW2ldW25dKTtKLmhhc0RhdGEoZSkmJihzPUouYWNjZXNzKGUpLHU9ay5leHRlbmQoe30scyksSi5zZXQodCx1KSl9fWZ1bmN0aW9uIEllKG4scixpLG8pe3I9Zy5hcHBseShbXSxyKTt2YXIgZSx0LGEscyx1LGwsYz0wLGY9bi5sZW5ndGgscD1mLTEsZD1yWzBdLGg9bShkKTtpZihofHwxPGYmJiJzdHJpbmciPT10eXBlb2YgZCYmIXkuY2hlY2tDbG9uZSYmTGUudGVzdChkKSlyZXR1cm4gbi5lYWNoKGZ1bmN0aW9uKGUpe3ZhciB0PW4uZXEoZSk7aCYmKHJbMF09ZC5jYWxsKHRoaXMsZSx0Lmh0bWwoKSkpLEllKHQscixpLG8pfSk7aWYoZiYmKHQ9KGU9d2UocixuWzBdLm93bmVyRG9jdW1lbnQsITEsbixvKSkuZmlyc3RDaGlsZCwxPT09ZS5jaGlsZE5vZGVzLmxlbmd0aCYmKGU9dCksdHx8bykpe2ZvcihzPShhPWsubWFwKHZlKGUsInNjcmlwdCIpLFBlKSkubGVuZ3RoO2M8ZjtjKyspdT1lLGMhPT1wJiYodT1rLmNsb25lKHUsITAsITApLHMmJmsubWVyZ2UoYSx2ZSh1LCJzY3JpcHQiKSkpLGkuY2FsbChuW2NdLHUsYyk7aWYocylmb3IobD1hW2EubGVuZ3RoLTFdLm93bmVyRG9jdW1lbnQsay5tYXAoYSxSZSksYz0wO2M8cztjKyspdT1hW2NdLGhlLnRlc3QodS50eXBlfHwiIikmJiFRLmFjY2Vzcyh1LCJnbG9iYWxFdmFsIikmJmsuY29udGFpbnMobCx1KSYmKHUuc3JjJiYibW9kdWxlIiE9PSh1LnR5cGV8fCIiKS50b0xvd2VyQ2FzZSgpP2suX2V2YWxVcmwmJiF1Lm5vTW9kdWxlJiZrLl9ldmFsVXJsKHUuc3JjLHtub25jZTp1Lm5vbmNlfHx1LmdldEF0dHJpYnV0ZSgibm9uY2UiKX0pOmIodS50ZXh0Q29udGVudC5yZXBsYWNlKEhlLCIiKSx1LGwpKX1yZXR1cm4gbn1mdW5jdGlvbiBXZShlLHQsbil7Zm9yKHZhciByLGk9dD9rLmZpbHRlcih0LGUpOmUsbz0wO251bGwhPShyPWlbb10pO28rKylufHwxIT09ci5ub2RlVHlwZXx8ay5jbGVhbkRhdGEodmUocikpLHIucGFyZW50Tm9kZSYmKG4mJm9lKHIpJiZ5ZSh2ZShyLCJzY3JpcHQiKSksci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHIpKTtyZXR1cm4gZX1rLmV4dGVuZCh7aHRtbFByZWZpbHRlcjpmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKGplLCI8JDE+PC8kMj4iKX0sY2xvbmU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGM9ZS5jbG9uZU5vZGUoITApLGY9b2UoZSk7aWYoISh5Lm5vQ2xvbmVDaGVja2VkfHwxIT09ZS5ub2RlVHlwZSYmMTEhPT1lLm5vZGVUeXBlfHxrLmlzWE1MRG9jKGUpKSlmb3IoYT12ZShjKSxyPTAsaT0obz12ZShlKSkubGVuZ3RoO3I8aTtyKyspcz1vW3JdLHU9YVtyXSx2b2lkIDAsImlucHV0Ij09PShsPXUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkmJnBlLnRlc3Qocy50eXBlKT91LmNoZWNrZWQ9cy5jaGVja2VkOiJpbnB1dCIhPT1sJiYidGV4dGFyZWEiIT09bHx8KHUuZGVmYXVsdFZhbHVlPXMuZGVmYXVsdFZhbHVlKTtpZih0KWlmKG4pZm9yKG89b3x8dmUoZSksYT1hfHx2ZShjKSxyPTAsaT1vLmxlbmd0aDtyPGk7cisrKU1lKG9bcl0sYVtyXSk7ZWxzZSBNZShlLGMpO3JldHVybiAwPChhPXZlKGMsInNjcmlwdCIpKS5sZW5ndGgmJnllKGEsIWYmJnZlKGUsInNjcmlwdCIpKSxjfSxjbGVhbkRhdGE6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LG4scixpPWsuZXZlbnQuc3BlY2lhbCxvPTA7dm9pZCAwIT09KG49ZVtvXSk7bysrKWlmKEcobikpe2lmKHQ9bltRLmV4cGFuZG9dKXtpZih0LmV2ZW50cylmb3IociBpbiB0LmV2ZW50cylpW3JdP2suZXZlbnQucmVtb3ZlKG4scik6ay5yZW1vdmVFdmVudChuLHIsdC5oYW5kbGUpO25bUS5leHBhbmRvXT12b2lkIDB9bltKLmV4cGFuZG9dJiYobltKLmV4cGFuZG9dPXZvaWQgMCl9fX0pLGsuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oZSl7cmV0dXJuIFdlKHRoaXMsZSwhMCl9LHJlbW92ZTpmdW5jdGlvbihlKXtyZXR1cm4gV2UodGhpcyxlKX0sdGV4dDpmdW5jdGlvbihlKXtyZXR1cm4gXyh0aGlzLGZ1bmN0aW9uKGUpe3JldHVybiB2b2lkIDA9PT1lP2sudGV4dCh0aGlzKTp0aGlzLmVtcHR5KCkuZWFjaChmdW5jdGlvbigpezEhPT10aGlzLm5vZGVUeXBlJiYxMSE9PXRoaXMubm9kZVR5cGUmJjkhPT10aGlzLm5vZGVUeXBlfHwodGhpcy50ZXh0Q29udGVudD1lKX0pfSxudWxsLGUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBJZSh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8T2UodGhpcyxlKS5hcHBlbmRDaGlsZChlKX0pfSxwcmVwZW5kOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe2lmKDE9PT10aGlzLm5vZGVUeXBlfHwxMT09PXRoaXMubm9kZVR5cGV8fDk9PT10aGlzLm5vZGVUeXBlKXt2YXIgdD1PZSh0aGlzLGUpO3QuaW5zZXJ0QmVmb3JlKGUsdC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIEllKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGUpe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlLHQ9MDtudWxsIT0oZT10aGlzW3RdKTt0KyspMT09PWUubm9kZVR5cGUmJihrLmNsZWFuRGF0YSh2ZShlLCExKSksZS50ZXh0Q29udGVudD0iIik7cmV0dXJuIHRoaXN9LGNsb25lOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIGU9bnVsbCE9ZSYmZSx0PW51bGw9PXQ/ZTp0LHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIGsuY2xvbmUodGhpcyxlLHQpfSl9LGh0bWw6ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlKXt2YXIgdD10aGlzWzBdfHx7fSxuPTAscj10aGlzLmxlbmd0aDtpZih2b2lkIDA9PT1lJiYxPT09dC5ub2RlVHlwZSlyZXR1cm4gdC5pbm5lckhUTUw7aWYoInN0cmluZyI9PXR5cGVvZiBlJiYhcWUudGVzdChlKSYmIWdlWyhkZS5leGVjKGUpfHxbIiIsIiJdKVsxXS50b0xvd2VyQ2FzZSgpXSl7ZT1rLmh0bWxQcmVmaWx0ZXIoZSk7dHJ5e2Zvcig7bjxyO24rKykxPT09KHQ9dGhpc1tuXXx8e30pLm5vZGVUeXBlJiYoay5jbGVhbkRhdGEodmUodCwhMSkpLHQuaW5uZXJIVE1MPWUpO3Q9MH1jYXRjaChlKXt9fXQmJnRoaXMuZW1wdHkoKS5hcHBlbmQoZSl9LG51bGwsZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgbj1bXTtyZXR1cm4gSWUodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZSl7dmFyIHQ9dGhpcy5wYXJlbnROb2RlO2suaW5BcnJheSh0aGlzLG4pPDAmJihrLmNsZWFuRGF0YSh2ZSh0aGlzKSksdCYmdC5yZXBsYWNlQ2hpbGQoZSx0aGlzKSl9LG4pfX0pLGsuZWFjaCh7YXBwZW5kVG86ImFwcGVuZCIscHJlcGVuZFRvOiJwcmVwZW5kIixpbnNlcnRCZWZvcmU6ImJlZm9yZSIsaW5zZXJ0QWZ0ZXI6ImFmdGVyIixyZXBsYWNlQWxsOiJyZXBsYWNlV2l0aCJ9LGZ1bmN0aW9uKGUsYSl7ay5mbltlXT1mdW5jdGlvbihlKXtmb3IodmFyIHQsbj1bXSxyPWsoZSksaT1yLmxlbmd0aC0xLG89MDtvPD1pO28rKyl0PW89PT1pP3RoaXM6dGhpcy5jbG9uZSghMCksayhyW29dKVthXSh0KSx1LmFwcGx5KG4sdC5nZXQoKSk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKG4pfX0pO3ZhciAkZT1uZXcgUmVnRXhwKCJeKCIrdGUrIikoPyFweClbYS16JV0rJCIsImkiKSxGZT1mdW5jdGlvbihlKXt2YXIgdD1lLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7cmV0dXJuIHQmJnQub3BlbmVyfHwodD1DKSx0LmdldENvbXB1dGVkU3R5bGUoZSl9LEJlPW5ldyBSZWdFeHAocmUuam9pbigifCIpLCJpIik7ZnVuY3Rpb24gX2UoZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5zdHlsZTtyZXR1cm4obj1ufHxGZShlKSkmJigiIiE9PShhPW4uZ2V0UHJvcGVydHlWYWx1ZSh0KXx8blt0XSl8fG9lKGUpfHwoYT1rLnN0eWxlKGUsdCkpLCF5LnBpeGVsQm94U3R5bGVzKCkmJiRlLnRlc3QoYSkmJkJlLnRlc3QodCkmJihyPXMud2lkdGgsaT1zLm1pbldpZHRoLG89cy5tYXhXaWR0aCxzLm1pbldpZHRoPXMubWF4V2lkdGg9cy53aWR0aD1hLGE9bi53aWR0aCxzLndpZHRoPXIscy5taW5XaWR0aD1pLHMubWF4V2lkdGg9bykpLHZvaWQgMCE9PWE/YSsiIjphfWZ1bmN0aW9uIHplKGUsdCl7cmV0dXJue2dldDpmdW5jdGlvbigpe2lmKCFlKCkpcmV0dXJuKHRoaXMuZ2V0PXQpLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtkZWxldGUgdGhpcy5nZXR9fX0hZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7aWYodSl7cy5zdHlsZS5jc3NUZXh0PSJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7bWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowIix1LnN0eWxlLmNzc1RleHQ9InBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSUiLGllLmFwcGVuZENoaWxkKHMpLmFwcGVuZENoaWxkKHUpO3ZhciBlPUMuZ2V0Q29tcHV0ZWRTdHlsZSh1KTtuPSIxJSIhPT1lLnRvcCxhPTEyPT09dChlLm1hcmdpbkxlZnQpLHUuc3R5bGUucmlnaHQ9IjYwJSIsbz0zNj09PXQoZS5yaWdodCkscj0zNj09PXQoZS53aWR0aCksdS5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiLGk9MTI9PT10KHUub2Zmc2V0V2lkdGgvMyksaWUucmVtb3ZlQ2hpbGQocyksdT1udWxsfX1mdW5jdGlvbiB0KGUpe3JldHVybiBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoZSkpfXZhciBuLHIsaSxvLGEscz1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLHU9RS5jcmVhdGVFbGVtZW50KCJkaXYiKTt1LnN0eWxlJiYodS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iY29udGVudC1ib3giLHUuY2xvbmVOb2RlKCEwKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcD0iIix5LmNsZWFyQ2xvbmVTdHlsZT0iY29udGVudC1ib3giPT09dS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCxrLmV4dGVuZCh5LHtib3hTaXppbmdSZWxpYWJsZTpmdW5jdGlvbigpe3JldHVybiBlKCkscn0scGl4ZWxCb3hTdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG99LHBpeGVsUG9zaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZSgpLG59LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBlKCksYX0sc2Nyb2xsYm94U2l6ZTpmdW5jdGlvbigpe3JldHVybiBlKCksaX19KSl9KCk7dmFyIFVlPVsiV2Via2l0IiwiTW96IiwibXMiXSxYZT1FLmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLFZlPXt9O2Z1bmN0aW9uIEdlKGUpe3ZhciB0PWsuY3NzUHJvcHNbZV18fFZlW2VdO3JldHVybiB0fHwoZSBpbiBYZT9lOlZlW2VdPWZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpLG49VWUubGVuZ3RoO3doaWxlKG4tLSlpZigoZT1VZVtuXSt0KWluIFhlKXJldHVybiBlfShlKXx8ZSl9dmFyIFllPS9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxRZT0vXi0tLyxKZT17cG9zaXRpb246ImFic29sdXRlIix2aXNpYmlsaXR5OiJoaWRkZW4iLGRpc3BsYXk6ImJsb2NrIn0sS2U9e2xldHRlclNwYWNpbmc6IjAiLGZvbnRXZWlnaHQ6IjQwMCJ9O2Z1bmN0aW9uIFplKGUsdCxuKXt2YXIgcj1uZS5leGVjKHQpO3JldHVybiByP01hdGgubWF4KDAsclsyXS0obnx8MCkpKyhyWzNdfHwicHgiKTp0fWZ1bmN0aW9uIGV0KGUsdCxuLHIsaSxvKXt2YXIgYT0id2lkdGgiPT09dD8xOjAscz0wLHU9MDtpZihuPT09KHI/ImJvcmRlciI6ImNvbnRlbnQiKSlyZXR1cm4gMDtmb3IoO2E8NDthKz0yKSJtYXJnaW4iPT09biYmKHUrPWsuY3NzKGUsbityZVthXSwhMCxpKSkscj8oImNvbnRlbnQiPT09biYmKHUtPWsuY3NzKGUsInBhZGRpbmciK3JlW2FdLCEwLGkpKSwibWFyZ2luIiE9PW4mJih1LT1rLmNzcyhlLCJib3JkZXIiK3JlW2FdKyJXaWR0aCIsITAsaSkpKToodSs9ay5jc3MoZSwicGFkZGluZyIrcmVbYV0sITAsaSksInBhZGRpbmciIT09bj91Kz1rLmNzcyhlLCJib3JkZXIiK3JlW2FdKyJXaWR0aCIsITAsaSk6cys9ay5jc3MoZSwiYm9yZGVyIityZVthXSsiV2lkdGgiLCEwLGkpKTtyZXR1cm4hciYmMDw9byYmKHUrPU1hdGgubWF4KDAsTWF0aC5jZWlsKGVbIm9mZnNldCIrdFswXS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSldLW8tdS1zLS41KSl8fDApLHV9ZnVuY3Rpb24gdHQoZSx0LG4pe3ZhciByPUZlKGUpLGk9KCF5LmJveFNpemluZ1JlbGlhYmxlKCl8fG4pJiYiYm9yZGVyLWJveCI9PT1rLmNzcyhlLCJib3hTaXppbmciLCExLHIpLG89aSxhPV9lKGUsdCxyKSxzPSJvZmZzZXQiK3RbMF0udG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpO2lmKCRlLnRlc3QoYSkpe2lmKCFuKXJldHVybiBhO2E9ImF1dG8ifXJldHVybigheS5ib3hTaXppbmdSZWxpYWJsZSgpJiZpfHwiYXV0byI9PT1hfHwhcGFyc2VGbG9hdChhKSYmImlubGluZSI9PT1rLmNzcyhlLCJkaXNwbGF5IiwhMSxyKSkmJmUuZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJihpPSJib3JkZXItYm94Ij09PWsuY3NzKGUsImJveFNpemluZyIsITEsciksKG89cyBpbiBlKSYmKGE9ZVtzXSkpLChhPXBhcnNlRmxvYXQoYSl8fDApK2V0KGUsdCxufHwoaT8iYm9yZGVyIjoiY29udGVudCIpLG8scixhKSsicHgifWZ1bmN0aW9uIG50KGUsdCxuLHIsaSl7cmV0dXJuIG5ldyBudC5wcm90b3R5cGUuaW5pdChlLHQsbixyLGkpfWsuZXh0ZW5kKHtjc3NIb29rczp7b3BhY2l0eTp7Z2V0OmZ1bmN0aW9uKGUsdCl7aWYodCl7dmFyIG49X2UoZSwib3BhY2l0eSIpO3JldHVybiIiPT09bj8iMSI6bn19fX0sY3NzTnVtYmVyOnthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxjb2x1bW5Db3VudDohMCxmaWxsT3BhY2l0eTohMCxmbGV4R3JvdzohMCxmbGV4U2hyaW5rOiEwLGZvbnRXZWlnaHQ6ITAsZ3JpZEFyZWE6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TdGFydDohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1N0YXJ0OiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMH0sY3NzUHJvcHM6e30sc3R5bGU6ZnVuY3Rpb24oZSx0LG4scil7aWYoZSYmMyE9PWUubm9kZVR5cGUmJjghPT1lLm5vZGVUeXBlJiZlLnN0eWxlKXt2YXIgaSxvLGEscz1WKHQpLHU9UWUudGVzdCh0KSxsPWUuc3R5bGU7aWYodXx8KHQ9R2UocykpLGE9ay5jc3NIb29rc1t0XXx8ay5jc3NIb29rc1tzXSx2b2lkIDA9PT1uKXJldHVybiBhJiYiZ2V0ImluIGEmJnZvaWQgMCE9PShpPWEuZ2V0KGUsITEscikpP2k6bFt0XTsic3RyaW5nIj09PShvPXR5cGVvZiBuKSYmKGk9bmUuZXhlYyhuKSkmJmlbMV0mJihuPWxlKGUsdCxpKSxvPSJudW1iZXIiKSxudWxsIT1uJiZuPT1uJiYoIm51bWJlciIhPT1vfHx1fHwobis9aSYmaVszXXx8KGsuY3NzTnVtYmVyW3NdPyIiOiJweCIpKSx5LmNsZWFyQ2xvbmVTdHlsZXx8IiIhPT1ufHwwIT09dC5pbmRleE9mKCJiYWNrZ3JvdW5kIil8fChsW3RdPSJpbmhlcml0IiksYSYmInNldCJpbiBhJiZ2b2lkIDA9PT0obj1hLnNldChlLG4scikpfHwodT9sLnNldFByb3BlcnR5KHQsbik6bFt0XT1uKSl9fSxjc3M6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHM9Vih0KTtyZXR1cm4gUWUudGVzdCh0KXx8KHQ9R2UocykpLChhPWsuY3NzSG9va3NbdF18fGsuY3NzSG9va3Nbc10pJiYiZ2V0ImluIGEmJihpPWEuZ2V0KGUsITAsbikpLHZvaWQgMD09PWkmJihpPV9lKGUsdCxyKSksIm5vcm1hbCI9PT1pJiZ0IGluIEtlJiYoaT1LZVt0XSksIiI9PT1ufHxuPyhvPXBhcnNlRmxvYXQoaSksITA9PT1ufHxpc0Zpbml0ZShvKT9vfHwwOmkpOml9fSksay5lYWNoKFsiaGVpZ2h0Iiwid2lkdGgiXSxmdW5jdGlvbihlLHUpe2suY3NzSG9va3NbdV09e2dldDpmdW5jdGlvbihlLHQsbil7aWYodClyZXR1cm4hWWUudGVzdChrLmNzcyhlLCJkaXNwbGF5IikpfHxlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiZlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoP3R0KGUsdSxuKTp1ZShlLEplLGZ1bmN0aW9uKCl7cmV0dXJuIHR0KGUsdSxuKX0pfSxzZXQ6ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGk9RmUoZSksbz0heS5zY3JvbGxib3hTaXplKCkmJiJhYnNvbHV0ZSI9PT1pLnBvc2l0aW9uLGE9KG98fG4pJiYiYm9yZGVyLWJveCI9PT1rLmNzcyhlLCJib3hTaXppbmciLCExLGkpLHM9bj9ldChlLHUsbixhLGkpOjA7cmV0dXJuIGEmJm8mJihzLT1NYXRoLmNlaWwoZVsib2Zmc2V0Iit1WzBdLnRvVXBwZXJDYXNlKCkrdS5zbGljZSgxKV0tcGFyc2VGbG9hdChpW3VdKS1ldChlLHUsImJvcmRlciIsITEsaSktLjUpKSxzJiYocj1uZS5leGVjKHQpKSYmInB4IiE9PShyWzNdfHwicHgiKSYmKGUuc3R5bGVbdV09dCx0PWsuY3NzKGUsdSkpLFplKDAsdCxzKX19fSksay5jc3NIb29rcy5tYXJnaW5MZWZ0PXplKHkucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGUsdCl7aWYodClyZXR1cm4ocGFyc2VGbG9hdChfZShlLCJtYXJnaW5MZWZ0IikpfHxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQtdWUoZSx7bWFyZ2luTGVmdDowfSxmdW5jdGlvbigpe3JldHVybiBlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnR9KSkrInB4In0pLGsuZWFjaCh7bWFyZ2luOiIiLHBhZGRpbmc6IiIsYm9yZGVyOiJXaWR0aCJ9LGZ1bmN0aW9uKGksbyl7ay5jc3NIb29rc1tpK29dPXtleHBhbmQ6ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj17fSxyPSJzdHJpbmciPT10eXBlb2YgZT9lLnNwbGl0KCIgIik6W2VdO3Q8NDt0KyspbltpK3JlW3RdK29dPXJbdF18fHJbdC0yXXx8clswXTtyZXR1cm4gbn19LCJtYXJnaW4iIT09aSYmKGsuY3NzSG9va3NbaStvXS5zZXQ9WmUpfSksay5mbi5leHRlbmQoe2NzczpmdW5jdGlvbihlLHQpe3JldHVybiBfKHRoaXMsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz17fSxhPTA7aWYoQXJyYXkuaXNBcnJheSh0KSl7Zm9yKHI9RmUoZSksaT10Lmxlbmd0aDthPGk7YSsrKW9bdFthXV09ay5jc3MoZSx0W2FdLCExLHIpO3JldHVybiBvfXJldHVybiB2b2lkIDAhPT1uP2suc3R5bGUoZSx0LG4pOmsuY3NzKGUsdCl9LGUsdCwxPGFyZ3VtZW50cy5sZW5ndGgpfX0pLCgoay5Ud2Vlbj1udCkucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpudCxpbml0OmZ1bmN0aW9uKGUsdCxuLHIsaSxvKXt0aGlzLmVsZW09ZSx0aGlzLnByb3A9bix0aGlzLmVhc2luZz1pfHxrLmVhc2luZy5fZGVmYXVsdCx0aGlzLm9wdGlvbnM9dCx0aGlzLnN0YXJ0PXRoaXMubm93PXRoaXMuY3VyKCksdGhpcy5lbmQ9cix0aGlzLnVuaXQ9b3x8KGsuY3NzTnVtYmVyW25dPyIiOiJweCIpfSxjdXI6ZnVuY3Rpb24oKXt2YXIgZT1udC5wcm9wSG9va3NbdGhpcy5wcm9wXTtyZXR1cm4gZSYmZS5nZXQ/ZS5nZXQodGhpcyk6bnQucHJvcEhvb2tzLl9kZWZhdWx0LmdldCh0aGlzKX0scnVuOmZ1bmN0aW9uKGUpe3ZhciB0LG49bnQucHJvcEhvb2tzW3RoaXMucHJvcF07cmV0dXJuIHRoaXMub3B0aW9ucy5kdXJhdGlvbj90aGlzLnBvcz10PWsuZWFzaW5nW3RoaXMuZWFzaW5nXShlLHRoaXMub3B0aW9ucy5kdXJhdGlvbiplLDAsMSx0aGlzLm9wdGlvbnMuZHVyYXRpb24pOnRoaXMucG9zPXQ9ZSx0aGlzLm5vdz0odGhpcy5lbmQtdGhpcy5zdGFydCkqdCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxuJiZuLnNldD9uLnNldCh0aGlzKTpudC5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSkuaW5pdC5wcm90b3R5cGU9bnQucHJvdG90eXBlLChudC5wcm9wSG9va3M9e19kZWZhdWx0OntnZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ7cmV0dXJuIDEhPT1lLmVsZW0ubm9kZVR5cGV8fG51bGwhPWUuZWxlbVtlLnByb3BdJiZudWxsPT1lLmVsZW0uc3R5bGVbZS5wcm9wXT9lLmVsZW1bZS5wcm9wXToodD1rLmNzcyhlLmVsZW0sZS5wcm9wLCIiKSkmJiJhdXRvIiE9PXQ/dDowfSxzZXQ6ZnVuY3Rpb24oZSl7ay5meC5zdGVwW2UucHJvcF0/ay5meC5zdGVwW2UucHJvcF0oZSk6MSE9PWUuZWxlbS5ub2RlVHlwZXx8IWsuY3NzSG9va3NbZS5wcm9wXSYmbnVsbD09ZS5lbGVtLnN0eWxlW0dlKGUucHJvcCldP2UuZWxlbVtlLnByb3BdPWUubm93Omsuc3R5bGUoZS5lbGVtLGUucHJvcCxlLm5vdytlLnVuaXQpfX19KS5zY3JvbGxUb3A9bnQucHJvcEhvb2tzLnNjcm9sbExlZnQ9e3NldDpmdW5jdGlvbihlKXtlLmVsZW0ubm9kZVR5cGUmJmUuZWxlbS5wYXJlbnROb2RlJiYoZS5lbGVtW2UucHJvcF09ZS5ub3cpfX0say5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihlKXtyZXR1cm4gZX0sc3dpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuLjUtTWF0aC5jb3MoZSpNYXRoLlBJKS8yfSxfZGVmYXVsdDoic3dpbmcifSxrLmZ4PW50LnByb3RvdHlwZS5pbml0LGsuZnguc3RlcD17fTt2YXIgcnQsaXQsb3QsYXQsc3Q9L14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLHV0PS9xdWV1ZUhvb2tzJC87ZnVuY3Rpb24gbHQoKXtpdCYmKCExPT09RS5oaWRkZW4mJkMucmVxdWVzdEFuaW1hdGlvbkZyYW1lP0MucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGx0KTpDLnNldFRpbWVvdXQobHQsay5meC5pbnRlcnZhbCksay5meC50aWNrKCkpfWZ1bmN0aW9uIGN0KCl7cmV0dXJuIEMuc2V0VGltZW91dChmdW5jdGlvbigpe3J0PXZvaWQgMH0pLHJ0PURhdGUubm93KCl9ZnVuY3Rpb24gZnQoZSx0KXt2YXIgbixyPTAsaT17aGVpZ2h0OmV9O2Zvcih0PXQ/MTowO3I8NDtyKz0yLXQpaVsibWFyZ2luIisobj1yZVtyXSldPWlbInBhZGRpbmciK25dPWU7cmV0dXJuIHQmJihpLm9wYWNpdHk9aS53aWR0aD1lKSxpfWZ1bmN0aW9uIHB0KGUsdCxuKXtmb3IodmFyIHIsaT0oZHQudHdlZW5lcnNbdF18fFtdKS5jb25jYXQoZHQudHdlZW5lcnNbIioiXSksbz0wLGE9aS5sZW5ndGg7bzxhO28rKylpZihyPWlbb10uY2FsbChuLHQsZSkpcmV0dXJuIHJ9ZnVuY3Rpb24gZHQobyxlLHQpe3ZhciBuLGEscj0wLGk9ZHQucHJlZmlsdGVycy5sZW5ndGgscz1rLkRlZmVycmVkKCkuYWx3YXlzKGZ1bmN0aW9uKCl7ZGVsZXRlIHUuZWxlbX0pLHU9ZnVuY3Rpb24oKXtpZihhKXJldHVybiExO2Zvcih2YXIgZT1ydHx8Y3QoKSx0PU1hdGgubWF4KDAsbC5zdGFydFRpbWUrbC5kdXJhdGlvbi1lKSxuPTEtKHQvbC5kdXJhdGlvbnx8MCkscj0wLGk9bC50d2VlbnMubGVuZ3RoO3I8aTtyKyspbC50d2VlbnNbcl0ucnVuKG4pO3JldHVybiBzLm5vdGlmeVdpdGgobyxbbCxuLHRdKSxuPDEmJmk/dDooaXx8cy5ub3RpZnlXaXRoKG8sW2wsMSwwXSkscy5yZXNvbHZlV2l0aChvLFtsXSksITEpfSxsPXMucHJvbWlzZSh7ZWxlbTpvLHByb3BzOmsuZXh0ZW5kKHt9LGUpLG9wdHM6ay5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOmsuZWFzaW5nLl9kZWZhdWx0fSx0KSxvcmlnaW5hbFByb3BlcnRpZXM6ZSxvcmlnaW5hbE9wdGlvbnM6dCxzdGFydFRpbWU6cnR8fGN0KCksZHVyYXRpb246dC5kdXJhdGlvbix0d2VlbnM6W10sY3JlYXRlVHdlZW46ZnVuY3Rpb24oZSx0KXt2YXIgbj1rLlR3ZWVuKG8sbC5vcHRzLGUsdCxsLm9wdHMuc3BlY2lhbEVhc2luZ1tlXXx8bC5vcHRzLmVhc2luZyk7cmV0dXJuIGwudHdlZW5zLnB1c2gobiksbn0sc3RvcDpmdW5jdGlvbihlKXt2YXIgdD0wLG49ZT9sLnR3ZWVucy5sZW5ndGg6MDtpZihhKXJldHVybiB0aGlzO2ZvcihhPSEwO3Q8bjt0KyspbC50d2VlbnNbdF0ucnVuKDEpO3JldHVybiBlPyhzLm5vdGlmeVdpdGgobyxbbCwxLDBdKSxzLnJlc29sdmVXaXRoKG8sW2wsZV0pKTpzLnJlamVjdFdpdGgobyxbbCxlXSksdGhpc319KSxjPWwucHJvcHM7Zm9yKCFmdW5jdGlvbihlLHQpe3ZhciBuLHIsaSxvLGE7Zm9yKG4gaW4gZSlpZihpPXRbcj1WKG4pXSxvPWVbbl0sQXJyYXkuaXNBcnJheShvKSYmKGk9b1sxXSxvPWVbbl09b1swXSksbiE9PXImJihlW3JdPW8sZGVsZXRlIGVbbl0pLChhPWsuY3NzSG9va3Nbcl0pJiYiZXhwYW5kImluIGEpZm9yKG4gaW4gbz1hLmV4cGFuZChvKSxkZWxldGUgZVtyXSxvKW4gaW4gZXx8KGVbbl09b1tuXSx0W25dPWkpO2Vsc2UgdFtyXT1pfShjLGwub3B0cy5zcGVjaWFsRWFzaW5nKTtyPGk7cisrKWlmKG49ZHQucHJlZmlsdGVyc1tyXS5jYWxsKGwsbyxjLGwub3B0cykpcmV0dXJuIG0obi5zdG9wKSYmKGsuX3F1ZXVlSG9va3MobC5lbGVtLGwub3B0cy5xdWV1ZSkuc3RvcD1uLnN0b3AuYmluZChuKSksbjtyZXR1cm4gay5tYXAoYyxwdCxsKSxtKGwub3B0cy5zdGFydCkmJmwub3B0cy5zdGFydC5jYWxsKG8sbCksbC5wcm9ncmVzcyhsLm9wdHMucHJvZ3Jlc3MpLmRvbmUobC5vcHRzLmRvbmUsbC5vcHRzLmNvbXBsZXRlKS5mYWlsKGwub3B0cy5mYWlsKS5hbHdheXMobC5vcHRzLmFsd2F5cyksay5meC50aW1lcihrLmV4dGVuZCh1LHtlbGVtOm8sYW5pbTpsLHF1ZXVlOmwub3B0cy5xdWV1ZX0pKSxsfWsuQW5pbWF0aW9uPWsuZXh0ZW5kKGR0LHt0d2VlbmVyczp7IioiOltmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMuY3JlYXRlVHdlZW4oZSx0KTtyZXR1cm4gbGUobi5lbGVtLGUsbmUuZXhlYyh0KSxuKSxufV19LHR3ZWVuZXI6ZnVuY3Rpb24oZSx0KXttKGUpPyh0PWUsZT1bIioiXSk6ZT1lLm1hdGNoKFIpO2Zvcih2YXIgbixyPTAsaT1lLmxlbmd0aDtyPGk7cisrKW49ZVtyXSxkdC50d2VlbmVyc1tuXT1kdC50d2VlbmVyc1tuXXx8W10sZHQudHdlZW5lcnNbbl0udW5zaGlmdCh0KX0scHJlZmlsdGVyczpbZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHMsdSxsLGMsZj0id2lkdGgiaW4gdHx8ImhlaWdodCJpbiB0LHA9dGhpcyxkPXt9LGg9ZS5zdHlsZSxnPWUubm9kZVR5cGUmJnNlKGUpLHY9US5nZXQoZSwiZnhzaG93Iik7Zm9yKHIgaW4gbi5xdWV1ZXx8KG51bGw9PShhPWsuX3F1ZXVlSG9va3MoZSwiZngiKSkudW5xdWV1ZWQmJihhLnVucXVldWVkPTAscz1hLmVtcHR5LmZpcmUsYS5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7YS51bnF1ZXVlZHx8cygpfSksYS51bnF1ZXVlZCsrLHAuYWx3YXlzKGZ1bmN0aW9uKCl7cC5hbHdheXMoZnVuY3Rpb24oKXthLnVucXVldWVkLS0say5xdWV1ZShlLCJmeCIpLmxlbmd0aHx8YS5lbXB0eS5maXJlKCl9KX0pKSx0KWlmKGk9dFtyXSxzdC50ZXN0KGkpKXtpZihkZWxldGUgdFtyXSxvPW98fCJ0b2dnbGUiPT09aSxpPT09KGc/ImhpZGUiOiJzaG93Iikpe2lmKCJzaG93IiE9PWl8fCF2fHx2b2lkIDA9PT12W3JdKWNvbnRpbnVlO2c9ITB9ZFtyXT12JiZ2W3JdfHxrLnN0eWxlKGUscil9aWYoKHU9IWsuaXNFbXB0eU9iamVjdCh0KSl8fCFrLmlzRW1wdHlPYmplY3QoZCkpZm9yKHIgaW4gZiYmMT09PWUubm9kZVR5cGUmJihuLm92ZXJmbG93PVtoLm92ZXJmbG93LGgub3ZlcmZsb3dYLGgub3ZlcmZsb3dZXSxudWxsPT0obD12JiZ2LmRpc3BsYXkpJiYobD1RLmdldChlLCJkaXNwbGF5IikpLCJub25lIj09PShjPWsuY3NzKGUsImRpc3BsYXkiKSkmJihsP2M9bDooZmUoW2VdLCEwKSxsPWUuc3R5bGUuZGlzcGxheXx8bCxjPWsuY3NzKGUsImRpc3BsYXkiKSxmZShbZV0pKSksKCJpbmxpbmUiPT09Y3x8ImlubGluZS1ibG9jayI9PT1jJiZudWxsIT1sKSYmIm5vbmUiPT09ay5jc3MoZSwiZmxvYXQiKSYmKHV8fChwLmRvbmUoZnVuY3Rpb24oKXtoLmRpc3BsYXk9bH0pLG51bGw9PWwmJihjPWguZGlzcGxheSxsPSJub25lIj09PWM/IiI6YykpLGguZGlzcGxheT0iaW5saW5lLWJsb2NrIikpLG4ub3ZlcmZsb3cmJihoLm92ZXJmbG93PSJoaWRkZW4iLHAuYWx3YXlzKGZ1bmN0aW9uKCl7aC5vdmVyZmxvdz1uLm92ZXJmbG93WzBdLGgub3ZlcmZsb3dYPW4ub3ZlcmZsb3dbMV0saC5vdmVyZmxvd1k9bi5vdmVyZmxvd1syXX0pKSx1PSExLGQpdXx8KHY/ImhpZGRlbiJpbiB2JiYoZz12LmhpZGRlbik6dj1RLmFjY2VzcyhlLCJmeHNob3ciLHtkaXNwbGF5Omx9KSxvJiYodi5oaWRkZW49IWcpLGcmJmZlKFtlXSwhMCkscC5kb25lKGZ1bmN0aW9uKCl7Zm9yKHIgaW4gZ3x8ZmUoW2VdKSxRLnJlbW92ZShlLCJmeHNob3ciKSxkKWsuc3R5bGUoZSxyLGRbcl0pfSkpLHU9cHQoZz92W3JdOjAscixwKSxyIGluIHZ8fCh2W3JdPXUuc3RhcnQsZyYmKHUuZW5kPXUuc3RhcnQsdS5zdGFydD0wKSl9XSxwcmVmaWx0ZXI6ZnVuY3Rpb24oZSx0KXt0P2R0LnByZWZpbHRlcnMudW5zaGlmdChlKTpkdC5wcmVmaWx0ZXJzLnB1c2goZSl9fSksay5zcGVlZD1mdW5jdGlvbihlLHQsbil7dmFyIHI9ZSYmIm9iamVjdCI9PXR5cGVvZiBlP2suZXh0ZW5kKHt9LGUpOntjb21wbGV0ZTpufHwhbiYmdHx8bShlKSYmZSxkdXJhdGlvbjplLGVhc2luZzpuJiZ0fHx0JiYhbSh0KSYmdH07cmV0dXJuIGsuZngub2ZmP3IuZHVyYXRpb249MDoibnVtYmVyIiE9dHlwZW9mIHIuZHVyYXRpb24mJihyLmR1cmF0aW9uIGluIGsuZnguc3BlZWRzP3IuZHVyYXRpb249ay5meC5zcGVlZHNbci5kdXJhdGlvbl06ci5kdXJhdGlvbj1rLmZ4LnNwZWVkcy5fZGVmYXVsdCksbnVsbCE9ci5xdWV1ZSYmITAhPT1yLnF1ZXVlfHwoci5xdWV1ZT0iZngiKSxyLm9sZD1yLmNvbXBsZXRlLHIuY29tcGxldGU9ZnVuY3Rpb24oKXttKHIub2xkKSYmci5vbGQuY2FsbCh0aGlzKSxyLnF1ZXVlJiZrLmRlcXVldWUodGhpcyxyLnF1ZXVlKX0scn0say5mbi5leHRlbmQoe2ZhZGVUbzpmdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gdGhpcy5maWx0ZXIoc2UpLmNzcygib3BhY2l0eSIsMCkuc2hvdygpLmVuZCgpLmFuaW1hdGUoe29wYWNpdHk6dH0sZSxuLHIpfSxhbmltYXRlOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBpPWsuaXNFbXB0eU9iamVjdCh0KSxvPWsuc3BlZWQoZSxuLHIpLGE9ZnVuY3Rpb24oKXt2YXIgZT1kdCh0aGlzLGsuZXh0ZW5kKHt9LHQpLG8pOyhpfHxRLmdldCh0aGlzLCJmaW5pc2giKSkmJmUuc3RvcCghMCl9O3JldHVybiBhLmZpbmlzaD1hLGl8fCExPT09by5xdWV1ZT90aGlzLmVhY2goYSk6dGhpcy5xdWV1ZShvLnF1ZXVlLGEpfSxzdG9wOmZ1bmN0aW9uKGksZSxvKXt2YXIgYT1mdW5jdGlvbihlKXt2YXIgdD1lLnN0b3A7ZGVsZXRlIGUuc3RvcCx0KG8pfTtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGkmJihvPWUsZT1pLGk9dm9pZCAwKSxlJiYhMSE9PWkmJnRoaXMucXVldWUoaXx8ImZ4IixbXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9ITAsdD1udWxsIT1pJiZpKyJxdWV1ZUhvb2tzIixuPWsudGltZXJzLHI9US5nZXQodGhpcyk7aWYodClyW3RdJiZyW3RdLnN0b3AmJmEoclt0XSk7ZWxzZSBmb3IodCBpbiByKXJbdF0mJnJbdF0uc3RvcCYmdXQudGVzdCh0KSYmYShyW3RdKTtmb3IodD1uLmxlbmd0aDt0LS07KW5bdF0uZWxlbSE9PXRoaXN8fG51bGwhPWkmJm5bdF0ucXVldWUhPT1pfHwoblt0XS5hbmltLnN0b3AobyksZT0hMSxuLnNwbGljZSh0LDEpKTshZSYmb3x8ay5kZXF1ZXVlKHRoaXMsaSl9KX0sZmluaXNoOmZ1bmN0aW9uKGEpe3JldHVybiExIT09YSYmKGE9YXx8ImZ4IiksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdD1RLmdldCh0aGlzKSxuPXRbYSsicXVldWUiXSxyPXRbYSsicXVldWVIb29rcyJdLGk9ay50aW1lcnMsbz1uP24ubGVuZ3RoOjA7Zm9yKHQuZmluaXNoPSEwLGsucXVldWUodGhpcyxhLFtdKSxyJiZyLnN0b3AmJnIuc3RvcC5jYWxsKHRoaXMsITApLGU9aS5sZW5ndGg7ZS0tOylpW2VdLmVsZW09PT10aGlzJiZpW2VdLnF1ZXVlPT09YSYmKGlbZV0uYW5pbS5zdG9wKCEwKSxpLnNwbGljZShlLDEpKTtmb3IoZT0wO2U8bztlKyspbltlXSYmbltlXS5maW5pc2gmJm5bZV0uZmluaXNoLmNhbGwodGhpcyk7ZGVsZXRlIHQuZmluaXNofSl9fSksay5lYWNoKFsidG9nZ2xlIiwic2hvdyIsImhpZGUiXSxmdW5jdGlvbihlLHIpe3ZhciBpPWsuZm5bcl07ay5mbltyXT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG51bGw9PWV8fCJib29sZWFuIj09dHlwZW9mIGU/aS5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGZ0KHIsITApLGUsdCxuKX19KSxrLmVhY2goe3NsaWRlRG93bjpmdCgic2hvdyIpLHNsaWRlVXA6ZnQoImhpZGUiKSxzbGlkZVRvZ2dsZTpmdCgidG9nZ2xlIiksZmFkZUluOntvcGFjaXR5OiJzaG93In0sZmFkZU91dDp7b3BhY2l0eToiaGlkZSJ9LGZhZGVUb2dnbGU6e29wYWNpdHk6InRvZ2dsZSJ9fSxmdW5jdGlvbihlLHIpe2suZm5bZV09ZnVuY3Rpb24oZSx0LG4pe3JldHVybiB0aGlzLmFuaW1hdGUocixlLHQsbil9fSksay50aW1lcnM9W10say5meC50aWNrPWZ1bmN0aW9uKCl7dmFyIGUsdD0wLG49ay50aW1lcnM7Zm9yKHJ0PURhdGUubm93KCk7dDxuLmxlbmd0aDt0KyspKGU9blt0XSkoKXx8blt0XSE9PWV8fG4uc3BsaWNlKHQtLSwxKTtuLmxlbmd0aHx8ay5meC5zdG9wKCkscnQ9dm9pZCAwfSxrLmZ4LnRpbWVyPWZ1bmN0aW9uKGUpe2sudGltZXJzLnB1c2goZSksay5meC5zdGFydCgpfSxrLmZ4LmludGVydmFsPTEzLGsuZnguc3RhcnQ9ZnVuY3Rpb24oKXtpdHx8KGl0PSEwLGx0KCkpfSxrLmZ4LnN0b3A9ZnVuY3Rpb24oKXtpdD1udWxsfSxrLmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxrLmZuLmRlbGF5PWZ1bmN0aW9uKHIsZSl7cmV0dXJuIHI9ay5meCYmay5meC5zcGVlZHNbcl18fHIsZT1lfHwiZngiLHRoaXMucXVldWUoZSxmdW5jdGlvbihlLHQpe3ZhciBuPUMuc2V0VGltZW91dChlLHIpO3Quc3RvcD1mdW5jdGlvbigpe0MuY2xlYXJUaW1lb3V0KG4pfX0pfSxvdD1FLmNyZWF0ZUVsZW1lbnQoImlucHV0IiksYXQ9RS5jcmVhdGVFbGVtZW50KCJzZWxlY3QiKS5hcHBlbmRDaGlsZChFLmNyZWF0ZUVsZW1lbnQoIm9wdGlvbiIpKSxvdC50eXBlPSJjaGVja2JveCIseS5jaGVja09uPSIiIT09b3QudmFsdWUseS5vcHRTZWxlY3RlZD1hdC5zZWxlY3RlZCwob3Q9RS5jcmVhdGVFbGVtZW50KCJpbnB1dCIpKS52YWx1ZT0idCIsb3QudHlwZT0icmFkaW8iLHkucmFkaW9WYWx1ZT0idCI9PT1vdC52YWx1ZTt2YXIgaHQsZ3Q9ay5leHByLmF0dHJIYW5kbGU7ay5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gXyh0aGlzLGsuYXR0cixlLHQsMTxhcmd1bWVudHMubGVuZ3RoKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5yZW1vdmVBdHRyKHRoaXMsZSl9KX19KSxrLmV4dGVuZCh7YXR0cjpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4idW5kZWZpbmVkIj09dHlwZW9mIGUuZ2V0QXR0cmlidXRlP2sucHJvcChlLHQsbik6KDE9PT1vJiZrLmlzWE1MRG9jKGUpfHwoaT1rLmF0dHJIb29rc1t0LnRvTG93ZXJDYXNlKCldfHwoay5leHByLm1hdGNoLmJvb2wudGVzdCh0KT9odDp2b2lkIDApKSx2b2lkIDAhPT1uP251bGw9PT1uP3ZvaWQgay5yZW1vdmVBdHRyKGUsdCk6aSYmInNldCJpbiBpJiZ2b2lkIDAhPT0ocj1pLnNldChlLG4sdCkpP3I6KGUuc2V0QXR0cmlidXRlKHQsbisiIiksbik6aSYmImdldCJpbiBpJiZudWxsIT09KHI9aS5nZXQoZSx0KSk/cjpudWxsPT0ocj1rLmZpbmQuYXR0cihlLHQpKT92b2lkIDA6cil9LGF0dHJIb29rczp7dHlwZTp7c2V0OmZ1bmN0aW9uKGUsdCl7aWYoIXkucmFkaW9WYWx1ZSYmInJhZGlvIj09PXQmJkEoZSwiaW5wdXQiKSl7dmFyIG49ZS52YWx1ZTtyZXR1cm4gZS5zZXRBdHRyaWJ1dGUoInR5cGUiLHQpLG4mJihlLnZhbHVlPW4pLHR9fX19LHJlbW92ZUF0dHI6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPTAsaT10JiZ0Lm1hdGNoKFIpO2lmKGkmJjE9PT1lLm5vZGVUeXBlKXdoaWxlKG49aVtyKytdKWUucmVtb3ZlQXR0cmlidXRlKG4pfX0pLGh0PXtzZXQ6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiExPT09dD9rLnJlbW92ZUF0dHIoZSxuKTplLnNldEF0dHJpYnV0ZShuLG4pLG59fSxrLmVhY2goay5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cdysvZyksZnVuY3Rpb24oZSx0KXt2YXIgYT1ndFt0XXx8ay5maW5kLmF0dHI7Z3RbdF09ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbz10LnRvTG93ZXJDYXNlKCk7cmV0dXJuIG58fChpPWd0W29dLGd0W29dPXIscj1udWxsIT1hKGUsdCxuKT9vOm51bGwsZ3Rbb109aSkscn19KTt2YXIgdnQ9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSx5dD0vXig/OmF8YXJlYSkkL2k7ZnVuY3Rpb24gbXQoZSl7cmV0dXJuKGUubWF0Y2goUil8fFtdKS5qb2luKCIgIil9ZnVuY3Rpb24geHQoZSl7cmV0dXJuIGUuZ2V0QXR0cmlidXRlJiZlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiJ9ZnVuY3Rpb24gYnQoZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZToic3RyaW5nIj09dHlwZW9mIGUmJmUubWF0Y2goUil8fFtdfWsuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8odGhpcyxrLnByb3AsZSx0LDE8YXJndW1lbnRzLmxlbmd0aCl9LHJlbW92ZVByb3A6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW2sucHJvcEZpeFtlXXx8ZV19KX19KSxrLmV4dGVuZCh7cHJvcDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvPWUubm9kZVR5cGU7aWYoMyE9PW8mJjghPT1vJiYyIT09bylyZXR1cm4gMT09PW8mJmsuaXNYTUxEb2MoZSl8fCh0PWsucHJvcEZpeFt0XXx8dCxpPWsucHJvcEhvb2tzW3RdKSx2b2lkIDAhPT1uP2kmJiJzZXQiaW4gaSYmdm9pZCAwIT09KHI9aS5zZXQoZSxuLHQpKT9yOmVbdF09bjppJiYiZ2V0ImluIGkmJm51bGwhPT0ocj1pLmdldChlLHQpKT9yOmVbdF19LHByb3BIb29rczp7dGFiSW5kZXg6e2dldDpmdW5jdGlvbihlKXt2YXIgdD1rLmZpbmQuYXR0cihlLCJ0YWJpbmRleCIpO3JldHVybiB0P3BhcnNlSW50KHQsMTApOnZ0LnRlc3QoZS5ub2RlTmFtZSl8fHl0LnRlc3QoZS5ub2RlTmFtZSkmJmUuaHJlZj8wOi0xfX19LHByb3BGaXg6eyJmb3IiOiJodG1sRm9yIiwiY2xhc3MiOiJjbGFzc05hbWUifX0pLHkub3B0U2VsZWN0ZWR8fChrLnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0PWUucGFyZW50Tm9kZTtyZXR1cm4gdCYmdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCxudWxsfSxzZXQ6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wYXJlbnROb2RlO3QmJih0LnNlbGVjdGVkSW5kZXgsdC5wYXJlbnROb2RlJiZ0LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksay5lYWNoKFsidGFiSW5kZXgiLCJyZWFkT25seSIsIm1heExlbmd0aCIsImNlbGxTcGFjaW5nIiwiY2VsbFBhZGRpbmciLCJyb3dTcGFuIiwiY29sU3BhbiIsInVzZU1hcCIsImZyYW1lQm9yZGVyIiwiY29udGVudEVkaXRhYmxlIl0sZnVuY3Rpb24oKXtrLnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksay5mbi5leHRlbmQoe2FkZENsYXNzOmZ1bmN0aW9uKHQpe3ZhciBlLG4scixpLG8sYSxzLHU9MDtpZihtKHQpKXJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS5hZGRDbGFzcyh0LmNhbGwodGhpcyxlLHh0KHRoaXMpKSl9KTtpZigoZT1idCh0KSkubGVuZ3RoKXdoaWxlKG49dGhpc1t1KytdKWlmKGk9eHQobikscj0xPT09bi5ub2RlVHlwZSYmIiAiK210KGkpKyIgIil7YT0wO3doaWxlKG89ZVthKytdKXIuaW5kZXhPZigiICIrbysiICIpPDAmJihyKz1vKyIgIik7aSE9PShzPW10KHIpKSYmbi5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKX1yZXR1cm4gdGhpc30scmVtb3ZlQ2xhc3M6ZnVuY3Rpb24odCl7dmFyIGUsbixyLGksbyxhLHMsdT0wO2lmKG0odCkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLnJlbW92ZUNsYXNzKHQuY2FsbCh0aGlzLGUseHQodGhpcykpKX0pO2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLmF0dHIoImNsYXNzIiwiIik7aWYoKGU9YnQodCkpLmxlbmd0aCl3aGlsZShuPXRoaXNbdSsrXSlpZihpPXh0KG4pLHI9MT09PW4ubm9kZVR5cGUmJiIgIittdChpKSsiICIpe2E9MDt3aGlsZShvPWVbYSsrXSl3aGlsZSgtMTxyLmluZGV4T2YoIiAiK28rIiAiKSlyPXIucmVwbGFjZSgiICIrbysiICIsIiAiKTtpIT09KHM9bXQocikpJiZuLnNldEF0dHJpYnV0ZSgiY2xhc3MiLHMpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbihpLHQpe3ZhciBvPXR5cGVvZiBpLGE9InN0cmluZyI9PT1vfHxBcnJheS5pc0FycmF5KGkpO3JldHVybiJib29sZWFuIj09dHlwZW9mIHQmJmE/dD90aGlzLmFkZENsYXNzKGkpOnRoaXMucmVtb3ZlQ2xhc3MoaSk6bShpKT90aGlzLmVhY2goZnVuY3Rpb24oZSl7ayh0aGlzKS50b2dnbGVDbGFzcyhpLmNhbGwodGhpcyxlLHh0KHRoaXMpLHQpLHQpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGUsdCxuLHI7aWYoYSl7dD0wLG49ayh0aGlzKSxyPWJ0KGkpO3doaWxlKGU9clt0KytdKW4uaGFzQ2xhc3MoZSk/bi5yZW1vdmVDbGFzcyhlKTpuLmFkZENsYXNzKGUpfWVsc2Ugdm9pZCAwIT09aSYmImJvb2xlYW4iIT09b3x8KChlPXh0KHRoaXMpKSYmUS5zZXQodGhpcywiX19jbGFzc05hbWVfXyIsZSksdGhpcy5zZXRBdHRyaWJ1dGUmJnRoaXMuc2V0QXR0cmlidXRlKCJjbGFzcyIsZXx8ITE9PT1pPyIiOlEuZ2V0KHRoaXMsIl9fY2xhc3NOYW1lX18iKXx8IiIpKX0pfSxoYXNDbGFzczpmdW5jdGlvbihlKXt2YXIgdCxuLHI9MDt0PSIgIitlKyIgIjt3aGlsZShuPXRoaXNbcisrXSlpZigxPT09bi5ub2RlVHlwZSYmLTE8KCIgIittdCh4dChuKSkrIiAiKS5pbmRleE9mKHQpKXJldHVybiEwO3JldHVybiExfX0pO3ZhciB3dD0vXHIvZztrLmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKG4pe3ZhciByLGUsaSx0PXRoaXNbMF07cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9bShuKSx0aGlzLmVhY2goZnVuY3Rpb24oZSl7dmFyIHQ7MT09PXRoaXMubm9kZVR5cGUmJihudWxsPT0odD1pP24uY2FsbCh0aGlzLGUsayh0aGlzKS52YWwoKSk6bik/dD0iIjoibnVtYmVyIj09dHlwZW9mIHQ/dCs9IiI6QXJyYXkuaXNBcnJheSh0KSYmKHQ9ay5tYXAodCxmdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZT8iIjplKyIifSkpLChyPWsudmFsSG9va3NbdGhpcy50eXBlXXx8ay52YWxIb29rc1t0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmInNldCJpbiByJiZ2b2lkIDAhPT1yLnNldCh0aGlzLHQsInZhbHVlIil8fCh0aGlzLnZhbHVlPXQpKX0pKTp0PyhyPWsudmFsSG9va3NbdC50eXBlXXx8ay52YWxIb29rc1t0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCldKSYmImdldCJpbiByJiZ2b2lkIDAhPT0oZT1yLmdldCh0LCJ2YWx1ZSIpKT9lOiJzdHJpbmciPT10eXBlb2YoZT10LnZhbHVlKT9lLnJlcGxhY2Uod3QsIiIpOm51bGw9PWU/IiI6ZTp2b2lkIDB9fSksay5leHRlbmQoe3ZhbEhvb2tzOntvcHRpb246e2dldDpmdW5jdGlvbihlKXt2YXIgdD1rLmZpbmQuYXR0cihlLCJ2YWx1ZSIpO3JldHVybiBudWxsIT10P3Q6bXQoay50ZXh0KGUpKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGUpe3ZhciB0LG4scixpPWUub3B0aW9ucyxvPWUuc2VsZWN0ZWRJbmRleCxhPSJzZWxlY3Qtb25lIj09PWUudHlwZSxzPWE/bnVsbDpbXSx1PWE/bysxOmkubGVuZ3RoO2ZvcihyPW88MD91OmE/bzowO3I8dTtyKyspaWYoKChuPWlbcl0pLnNlbGVjdGVkfHxyPT09bykmJiFuLmRpc2FibGVkJiYoIW4ucGFyZW50Tm9kZS5kaXNhYmxlZHx8IUEobi5wYXJlbnROb2RlLCJvcHRncm91cCIpKSl7aWYodD1rKG4pLnZhbCgpLGEpcmV0dXJuIHQ7cy5wdXNoKHQpfXJldHVybiBzfSxzZXQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyLGk9ZS5vcHRpb25zLG89ay5tYWtlQXJyYXkodCksYT1pLmxlbmd0aDt3aGlsZShhLS0pKChyPWlbYV0pLnNlbGVjdGVkPS0xPGsuaW5BcnJheShrLnZhbEhvb2tzLm9wdGlvbi5nZXQociksbykpJiYobj0hMCk7cmV0dXJuIG58fChlLnNlbGVjdGVkSW5kZXg9LTEpLG99fX19KSxrLmVhY2goWyJyYWRpbyIsImNoZWNrYm94Il0sZnVuY3Rpb24oKXtrLnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZSx0KXtpZihBcnJheS5pc0FycmF5KHQpKXJldHVybiBlLmNoZWNrZWQ9LTE8ay5pbkFycmF5KGsoZSkudmFsKCksdCl9fSx5LmNoZWNrT258fChrLnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09PWUuZ2V0QXR0cmlidXRlKCJ2YWx1ZSIpPyJvbiI6ZS52YWx1ZX0pfSkseS5mb2N1c2luPSJvbmZvY3VzaW4iaW4gQzt2YXIgVHQ9L14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLEN0PWZ1bmN0aW9uKGUpe2Uuc3RvcFByb3BhZ2F0aW9uKCl9O2suZXh0ZW5kKGsuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZSx0LG4scil7dmFyIGksbyxhLHMsdSxsLGMsZixwPVtufHxFXSxkPXYuY2FsbChlLCJ0eXBlIik/ZS50eXBlOmUsaD12LmNhbGwoZSwibmFtZXNwYWNlIik/ZS5uYW1lc3BhY2Uuc3BsaXQoIi4iKTpbXTtpZihvPWY9YT1uPW58fEUsMyE9PW4ubm9kZVR5cGUmJjghPT1uLm5vZGVUeXBlJiYhVHQudGVzdChkK2suZXZlbnQudHJpZ2dlcmVkKSYmKC0xPGQuaW5kZXhPZigiLiIpJiYoZD0oaD1kLnNwbGl0KCIuIikpLnNoaWZ0KCksaC5zb3J0KCkpLHU9ZC5pbmRleE9mKCI6Iik8MCYmIm9uIitkLChlPWVbay5leHBhbmRvXT9lOm5ldyBrLkV2ZW50KGQsIm9iamVjdCI9PXR5cGVvZiBlJiZlKSkuaXNUcmlnZ2VyPXI/MjozLGUubmFtZXNwYWNlPWguam9pbigiLiIpLGUucm5hbWVzcGFjZT1lLm5hbWVzcGFjZT9uZXcgUmVnRXhwKCIoXnxcXC4pIitoLmpvaW4oIlxcLig/Oi4qXFwufCkiKSsiKFxcLnwkKSIpOm51bGwsZS5yZXN1bHQ9dm9pZCAwLGUudGFyZ2V0fHwoZS50YXJnZXQ9biksdD1udWxsPT10P1tlXTprLm1ha2VBcnJheSh0LFtlXSksYz1rLmV2ZW50LnNwZWNpYWxbZF18fHt9LHJ8fCFjLnRyaWdnZXJ8fCExIT09Yy50cmlnZ2VyLmFwcGx5KG4sdCkpKXtpZighciYmIWMubm9CdWJibGUmJiF4KG4pKXtmb3Iocz1jLmRlbGVnYXRlVHlwZXx8ZCxUdC50ZXN0KHMrZCl8fChvPW8ucGFyZW50Tm9kZSk7bztvPW8ucGFyZW50Tm9kZSlwLnB1c2gobyksYT1vO2E9PT0obi5vd25lckRvY3VtZW50fHxFKSYmcC5wdXNoKGEuZGVmYXVsdFZpZXd8fGEucGFyZW50V2luZG93fHxDKX1pPTA7d2hpbGUoKG89cFtpKytdKSYmIWUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlmPW8sZS50eXBlPTE8aT9zOmMuYmluZFR5cGV8fGQsKGw9KFEuZ2V0KG8sImV2ZW50cyIpfHx7fSlbZS50eXBlXSYmUS5nZXQobywiaGFuZGxlIikpJiZsLmFwcGx5KG8sdCksKGw9dSYmb1t1XSkmJmwuYXBwbHkmJkcobykmJihlLnJlc3VsdD1sLmFwcGx5KG8sdCksITE9PT1lLnJlc3VsdCYmZS5wcmV2ZW50RGVmYXVsdCgpKTtyZXR1cm4gZS50eXBlPWQscnx8ZS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8Yy5fZGVmYXVsdCYmITEhPT1jLl9kZWZhdWx0LmFwcGx5KHAucG9wKCksdCl8fCFHKG4pfHx1JiZtKG5bZF0pJiYheChuKSYmKChhPW5bdV0pJiYoblt1XT1udWxsKSxrLmV2ZW50LnRyaWdnZXJlZD1kLGUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSYmZi5hZGRFdmVudExpc3RlbmVyKGQsQ3QpLG5bZF0oKSxlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmYucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLEN0KSxrLmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsYSYmKG5bdV09YSkpLGUucmVzdWx0fX0sc2ltdWxhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPWsuZXh0ZW5kKG5ldyBrLkV2ZW50LG4se3R5cGU6ZSxpc1NpbXVsYXRlZDohMH0pO2suZXZlbnQudHJpZ2dlcihyLG51bGwsdCl9fSksay5mbi5leHRlbmQoe3RyaWdnZXI6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ay5ldmVudC50cmlnZ2VyKGUsdCx0aGlzKX0pfSx0cmlnZ2VySGFuZGxlcjpmdW5jdGlvbihlLHQpe3ZhciBuPXRoaXNbMF07aWYobilyZXR1cm4gay5ldmVudC50cmlnZ2VyKGUsdCxuLCEwKX19KSx5LmZvY3VzaW58fGsuZWFjaCh7Zm9jdXM6ImZvY3VzaW4iLGJsdXI6ImZvY3Vzb3V0In0sZnVuY3Rpb24obixyKXt2YXIgaT1mdW5jdGlvbihlKXtrLmV2ZW50LnNpbXVsYXRlKHIsZS50YXJnZXQsay5ldmVudC5maXgoZSkpfTtrLmV2ZW50LnNwZWNpYWxbcl09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHQ9US5hY2Nlc3MoZSxyKTt0fHxlLmFkZEV2ZW50TGlzdGVuZXIobixpLCEwKSxRLmFjY2VzcyhlLHIsKHR8fDApKzEpfSx0ZWFyZG93bjpmdW5jdGlvbigpe3ZhciBlPXRoaXMub3duZXJEb2N1bWVudHx8dGhpcyx0PVEuYWNjZXNzKGUsciktMTt0P1EuYWNjZXNzKGUscix0KTooZS5yZW1vdmVFdmVudExpc3RlbmVyKG4saSwhMCksUS5yZW1vdmUoZSxyKSl9fX0pO3ZhciBFdD1DLmxvY2F0aW9uLGt0PURhdGUubm93KCksU3Q9L1w/LztrLnBhcnNlWE1MPWZ1bmN0aW9uKGUpe3ZhciB0O2lmKCFlfHwic3RyaW5nIiE9dHlwZW9mIGUpcmV0dXJuIG51bGw7dHJ5e3Q9KG5ldyBDLkRPTVBhcnNlcikucGFyc2VGcm9tU3RyaW5nKGUsInRleHQveG1sIil9Y2F0Y2goZSl7dD12b2lkIDB9cmV0dXJuIHQmJiF0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJwYXJzZXJlcnJvciIpLmxlbmd0aHx8ay5lcnJvcigiSW52YWxpZCBYTUw6ICIrZSksdH07dmFyIE50PS9cW1xdJC8sQXQ9L1xyP1xuL2csRHQ9L14oPzpzdWJtaXR8YnV0dG9ufGltYWdlfHJlc2V0fGZpbGUpJC9pLGp0PS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtmdW5jdGlvbiBxdChuLGUscixpKXt2YXIgdDtpZihBcnJheS5pc0FycmF5KGUpKWsuZWFjaChlLGZ1bmN0aW9uKGUsdCl7cnx8TnQudGVzdChuKT9pKG4sdCk6cXQobisiWyIrKCJvYmplY3QiPT10eXBlb2YgdCYmbnVsbCE9dD9lOiIiKSsiXSIsdCxyLGkpfSk7ZWxzZSBpZihyfHwib2JqZWN0IiE9PXcoZSkpaShuLGUpO2Vsc2UgZm9yKHQgaW4gZSlxdChuKyJbIit0KyJdIixlW3RdLHIsaSl9ay5wYXJhbT1mdW5jdGlvbihlLHQpe3ZhciBuLHI9W10saT1mdW5jdGlvbihlLHQpe3ZhciBuPW0odCk/dCgpOnQ7cltyLmxlbmd0aF09ZW5jb2RlVVJJQ29tcG9uZW50KGUpKyI9IitlbmNvZGVVUklDb21wb25lbnQobnVsbD09bj8iIjpuKX07aWYobnVsbD09ZSlyZXR1cm4iIjtpZihBcnJheS5pc0FycmF5KGUpfHxlLmpxdWVyeSYmIWsuaXNQbGFpbk9iamVjdChlKSlrLmVhY2goZSxmdW5jdGlvbigpe2kodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IobiBpbiBlKXF0KG4sZVtuXSx0LGkpO3JldHVybiByLmpvaW4oIiYiKX0say5mbi5leHRlbmQoe3NlcmlhbGl6ZTpmdW5jdGlvbigpe3JldHVybiBrLnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGU9ay5wcm9wKHRoaXMsImVsZW1lbnRzIik7cmV0dXJuIGU/ay5tYWtlQXJyYXkoZSk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhayh0aGlzKS5pcygiOmRpc2FibGVkIikmJmp0LnRlc3QodGhpcy5ub2RlTmFtZSkmJiFEdC50ZXN0KGUpJiYodGhpcy5jaGVja2VkfHwhcGUudGVzdChlKSl9KS5tYXAoZnVuY3Rpb24oZSx0KXt2YXIgbj1rKHRoaXMpLnZhbCgpO3JldHVybiBudWxsPT1uP251bGw6QXJyYXkuaXNBcnJheShuKT9rLm1hcChuLGZ1bmN0aW9uKGUpe3JldHVybntuYW1lOnQubmFtZSx2YWx1ZTplLnJlcGxhY2UoQXQsIlxyXG4iKX19KTp7bmFtZTp0Lm5hbWUsdmFsdWU6bi5yZXBsYWNlKEF0LCJcclxuIil9fSkuZ2V0KCl9fSk7dmFyIEx0PS8lMjAvZyxIdD0vIy4qJC8sT3Q9LyhbPyZdKV89W14mXSovLFB0PS9eKC4qPyk6WyBcdF0qKFteXHJcbl0qKSQvZ20sUnQ9L14oPzpHRVR8SEVBRCkkLyxNdD0vXlwvXC8vLEl0PXt9LFd0PXt9LCR0PSIqLyIuY29uY2F0KCIqIiksRnQ9RS5jcmVhdGVFbGVtZW50KCJhIik7ZnVuY3Rpb24gQnQobyl7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7InN0cmluZyIhPXR5cGVvZiBlJiYodD1lLGU9IioiKTt2YXIgbixyPTAsaT1lLnRvTG93ZXJDYXNlKCkubWF0Y2goUil8fFtdO2lmKG0odCkpd2hpbGUobj1pW3IrK10pIisiPT09blswXT8obj1uLnNsaWNlKDEpfHwiKiIsKG9bbl09b1tuXXx8W10pLnVuc2hpZnQodCkpOihvW25dPW9bbl18fFtdKS5wdXNoKHQpfX1mdW5jdGlvbiBfdCh0LGksbyxhKXt2YXIgcz17fSx1PXQ9PT1XdDtmdW5jdGlvbiBsKGUpe3ZhciByO3JldHVybiBzW2VdPSEwLGsuZWFjaCh0W2VdfHxbXSxmdW5jdGlvbihlLHQpe3ZhciBuPXQoaSxvLGEpO3JldHVybiJzdHJpbmciIT10eXBlb2Ygbnx8dXx8c1tuXT91PyEocj1uKTp2b2lkIDA6KGkuZGF0YVR5cGVzLnVuc2hpZnQobiksbChuKSwhMSl9KSxyfXJldHVybiBsKGkuZGF0YVR5cGVzWzBdKXx8IXNbIioiXSYmbCgiKiIpfWZ1bmN0aW9uIHp0KGUsdCl7dmFyIG4scixpPWsuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zfHx7fTtmb3IobiBpbiB0KXZvaWQgMCE9PXRbbl0mJigoaVtuXT9lOnJ8fChyPXt9KSlbbl09dFtuXSk7cmV0dXJuIHImJmsuZXh0ZW5kKCEwLGUsciksZX1GdC5ocmVmPUV0LmhyZWYsay5leHRlbmQoe2FjdGl2ZTowLGxhc3RNb2RpZmllZDp7fSxldGFnOnt9LGFqYXhTZXR0aW5nczp7dXJsOkV0LmhyZWYsdHlwZToiR0VUIixpc0xvY2FsOi9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLnRlc3QoRXQucHJvdG9jb2wpLGdsb2JhbDohMCxwcm9jZXNzRGF0YTohMCxhc3luYzohMCxjb250ZW50VHlwZToiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04IixhY2NlcHRzOnsiKiI6JHQsdGV4dDoidGV4dC9wbGFpbiIsaHRtbDoidGV4dC9odG1sIix4bWw6ImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWwiLGpzb246ImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCJ9LGNvbnRlbnRzOnt4bWw6L1xieG1sXGIvLGh0bWw6L1xiaHRtbC8sanNvbjovXGJqc29uXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOiJyZXNwb25zZVhNTCIsdGV4dDoicmVzcG9uc2VUZXh0Iixqc29uOiJyZXNwb25zZUpTT04ifSxjb252ZXJ0ZXJzOnsiKiB0ZXh0IjpTdHJpbmcsInRleHQgaHRtbCI6ITAsInRleHQganNvbiI6SlNPTi5wYXJzZSwidGV4dCB4bWwiOmsucGFyc2VYTUx9LGZsYXRPcHRpb25zOnt1cmw6ITAsY29udGV4dDohMH19LGFqYXhTZXR1cDpmdW5jdGlvbihlLHQpe3JldHVybiB0P3p0KHp0KGUsay5hamF4U2V0dGluZ3MpLHQpOnp0KGsuYWpheFNldHRpbmdzLGUpfSxhamF4UHJlZmlsdGVyOkJ0KEl0KSxhamF4VHJhbnNwb3J0OkJ0KFd0KSxhamF4OmZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBlJiYodD1lLGU9dm9pZCAwKSx0PXR8fHt9O3ZhciBjLGYscCxuLGQscixoLGcsaSxvLHY9ay5hamF4U2V0dXAoe30sdCkseT12LmNvbnRleHR8fHYsbT12LmNvbnRleHQmJih5Lm5vZGVUeXBlfHx5LmpxdWVyeSk/ayh5KTprLmV2ZW50LHg9ay5EZWZlcnJlZCgpLGI9ay5DYWxsYmFja3MoIm9uY2UgbWVtb3J5Iiksdz12LnN0YXR1c0NvZGV8fHt9LGE9e30scz17fSx1PSJjYW5jZWxlZCIsVD17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGgpe2lmKCFuKXtuPXt9O3doaWxlKHQ9UHQuZXhlYyhwKSluW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdPShuW3RbMV0udG9Mb3dlckNhc2UoKSsiICJdfHxbXSkuY29uY2F0KHRbMl0pfXQ9bltlLnRvTG93ZXJDYXNlKCkrIiAiXX1yZXR1cm4gbnVsbD09dD9udWxsOnQuam9pbigiLCAiKX0sZ2V0QWxsUmVzcG9uc2VIZWFkZXJzOmZ1bmN0aW9uKCl7cmV0dXJuIGg/cDpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIG51bGw9PWgmJihlPXNbZS50b0xvd2VyQ2FzZSgpXT1zW2UudG9Mb3dlckNhc2UoKV18fGUsYVtlXT10KSx0aGlzfSxvdmVycmlkZU1pbWVUeXBlOmZ1bmN0aW9uKGUpe3JldHVybiBudWxsPT1oJiYodi5taW1lVHlwZT1lKSx0aGlzfSxzdGF0dXNDb2RlOmZ1bmN0aW9uKGUpe3ZhciB0O2lmKGUpaWYoaClULmFsd2F5cyhlW1Quc3RhdHVzXSk7ZWxzZSBmb3IodCBpbiBlKXdbdF09W3dbdF0sZVt0XV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKGUpe3ZhciB0PWV8fHU7cmV0dXJuIGMmJmMuYWJvcnQodCksbCgwLHQpLHRoaXN9fTtpZih4LnByb21pc2UoVCksdi51cmw9KChlfHx2LnVybHx8RXQuaHJlZikrIiIpLnJlcGxhY2UoTXQsRXQucHJvdG9jb2wrIi8vIiksdi50eXBlPXQubWV0aG9kfHx0LnR5cGV8fHYubWV0aG9kfHx2LnR5cGUsdi5kYXRhVHlwZXM9KHYuZGF0YVR5cGV8fCIqIikudG9Mb3dlckNhc2UoKS5tYXRjaChSKXx8WyIiXSxudWxsPT12LmNyb3NzRG9tYWluKXtyPUUuY3JlYXRlRWxlbWVudCgiYSIpO3RyeXtyLmhyZWY9di51cmwsci5ocmVmPXIuaHJlZix2LmNyb3NzRG9tYWluPUZ0LnByb3RvY29sKyIvLyIrRnQuaG9zdCE9ci5wcm90b2NvbCsiLy8iK3IuaG9zdH1jYXRjaChlKXt2LmNyb3NzRG9tYWluPSEwfX1pZih2LmRhdGEmJnYucHJvY2Vzc0RhdGEmJiJzdHJpbmciIT10eXBlb2Ygdi5kYXRhJiYodi5kYXRhPWsucGFyYW0odi5kYXRhLHYudHJhZGl0aW9uYWwpKSxfdChJdCx2LHQsVCksaClyZXR1cm4gVDtmb3IoaSBpbihnPWsuZXZlbnQmJnYuZ2xvYmFsKSYmMD09ay5hY3RpdmUrKyYmay5ldmVudC50cmlnZ2VyKCJhamF4U3RhcnQiKSx2LnR5cGU9di50eXBlLnRvVXBwZXJDYXNlKCksdi5oYXNDb250ZW50PSFSdC50ZXN0KHYudHlwZSksZj12LnVybC5yZXBsYWNlKEh0LCIiKSx2Lmhhc0NvbnRlbnQ/di5kYXRhJiZ2LnByb2Nlc3NEYXRhJiYwPT09KHYuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmKHYuZGF0YT12LmRhdGEucmVwbGFjZShMdCwiKyIpKToobz12LnVybC5zbGljZShmLmxlbmd0aCksdi5kYXRhJiYodi5wcm9jZXNzRGF0YXx8InN0cmluZyI9PXR5cGVvZiB2LmRhdGEpJiYoZis9KFN0LnRlc3QoZik/IiYiOiI/Iikrdi5kYXRhLGRlbGV0ZSB2LmRhdGEpLCExPT09di5jYWNoZSYmKGY9Zi5yZXBsYWNlKE90LCIkMSIpLG89KFN0LnRlc3QoZik/IiYiOiI/IikrIl89IitrdCsrK28pLHYudXJsPWYrbyksdi5pZk1vZGlmaWVkJiYoay5sYXN0TW9kaWZpZWRbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcigiSWYtTW9kaWZpZWQtU2luY2UiLGsubGFzdE1vZGlmaWVkW2ZdKSxrLmV0YWdbZl0mJlQuc2V0UmVxdWVzdEhlYWRlcigiSWYtTm9uZS1NYXRjaCIsay5ldGFnW2ZdKSksKHYuZGF0YSYmdi5oYXNDb250ZW50JiYhMSE9PXYuY29udGVudFR5cGV8fHQuY29udGVudFR5cGUpJiZULnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtVHlwZSIsdi5jb250ZW50VHlwZSksVC5zZXRSZXF1ZXN0SGVhZGVyKCJBY2NlcHQiLHYuZGF0YVR5cGVzWzBdJiZ2LmFjY2VwdHNbdi5kYXRhVHlwZXNbMF1dP3YuYWNjZXB0c1t2LmRhdGFUeXBlc1swXV0rKCIqIiE9PXYuZGF0YVR5cGVzWzBdPyIsICIrJHQrIjsgcT0wLjAxIjoiIik6di5hY2NlcHRzWyIqIl0pLHYuaGVhZGVycylULnNldFJlcXVlc3RIZWFkZXIoaSx2LmhlYWRlcnNbaV0pO2lmKHYuYmVmb3JlU2VuZCYmKCExPT09di5iZWZvcmVTZW5kLmNhbGwoeSxULHYpfHxoKSlyZXR1cm4gVC5hYm9ydCgpO2lmKHU9ImFib3J0IixiLmFkZCh2LmNvbXBsZXRlKSxULmRvbmUodi5zdWNjZXNzKSxULmZhaWwodi5lcnJvciksYz1fdChXdCx2LHQsVCkpe2lmKFQucmVhZHlTdGF0ZT0xLGcmJm0udHJpZ2dlcigiYWpheFNlbmQiLFtULHZdKSxoKXJldHVybiBUO3YuYXN5bmMmJjA8di50aW1lb3V0JiYoZD1DLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtULmFib3J0KCJ0aW1lb3V0Iil9LHYudGltZW91dCkpO3RyeXtoPSExLGMuc2VuZChhLGwpfWNhdGNoKGUpe2lmKGgpdGhyb3cgZTtsKC0xLGUpfX1lbHNlIGwoLTEsIk5vIFRyYW5zcG9ydCIpO2Z1bmN0aW9uIGwoZSx0LG4scil7dmFyIGksbyxhLHMsdSxsPXQ7aHx8KGg9ITAsZCYmQy5jbGVhclRpbWVvdXQoZCksYz12b2lkIDAscD1yfHwiIixULnJlYWR5U3RhdGU9MDxlPzQ6MCxpPTIwMDw9ZSYmZTwzMDB8fDMwND09PWUsbiYmKHM9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhLHM9ZS5jb250ZW50cyx1PWUuZGF0YVR5cGVzO3doaWxlKCIqIj09PXVbMF0pdS5zaGlmdCgpLHZvaWQgMD09PXImJihyPWUubWltZVR5cGV8fHQuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtVHlwZSIpKTtpZihyKWZvcihpIGluIHMpaWYoc1tpXSYmc1tpXS50ZXN0KHIpKXt1LnVuc2hpZnQoaSk7YnJlYWt9aWYodVswXWluIG4pbz11WzBdO2Vsc2V7Zm9yKGkgaW4gbil7aWYoIXVbMF18fGUuY29udmVydGVyc1tpKyIgIit1WzBdXSl7bz1pO2JyZWFrfWF8fChhPWkpfW89b3x8YX1pZihvKXJldHVybiBvIT09dVswXSYmdS51bnNoaWZ0KG8pLG5bb119KHYsVCxuKSkscz1mdW5jdGlvbihlLHQsbixyKXt2YXIgaSxvLGEscyx1LGw9e30sYz1lLmRhdGFUeXBlcy5zbGljZSgpO2lmKGNbMV0pZm9yKGEgaW4gZS5jb252ZXJ0ZXJzKWxbYS50b0xvd2VyQ2FzZSgpXT1lLmNvbnZlcnRlcnNbYV07bz1jLnNoaWZ0KCk7d2hpbGUobylpZihlLnJlc3BvbnNlRmllbGRzW29dJiYobltlLnJlc3BvbnNlRmllbGRzW29dXT10KSwhdSYmciYmZS5kYXRhRmlsdGVyJiYodD1lLmRhdGFGaWx0ZXIodCxlLmRhdGFUeXBlKSksdT1vLG89Yy5zaGlmdCgpKWlmKCIqIj09PW8pbz11O2Vsc2UgaWYoIioiIT09dSYmdSE9PW8pe2lmKCEoYT1sW3UrIiAiK29dfHxsWyIqICIrb10pKWZvcihpIGluIGwpaWYoKHM9aS5zcGxpdCgiICIpKVsxXT09PW8mJihhPWxbdSsiICIrc1swXV18fGxbIiogIitzWzBdXSkpeyEwPT09YT9hPWxbaV06ITAhPT1sW2ldJiYobz1zWzBdLGMudW5zaGlmdChzWzFdKSk7YnJlYWt9aWYoITAhPT1hKWlmKGEmJmVbInRocm93cyJdKXQ9YSh0KTtlbHNlIHRyeXt0PWEodCl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOiJwYXJzZXJlcnJvciIsZXJyb3I6YT9lOiJObyBjb252ZXJzaW9uIGZyb20gIit1KyIgdG8gIitvfX19cmV0dXJue3N0YXRlOiJzdWNjZXNzIixkYXRhOnR9fSh2LHMsVCxpKSxpPyh2LmlmTW9kaWZpZWQmJigodT1ULmdldFJlc3BvbnNlSGVhZGVyKCJMYXN0LU1vZGlmaWVkIikpJiYoay5sYXN0TW9kaWZpZWRbZl09dSksKHU9VC5nZXRSZXNwb25zZUhlYWRlcigiZXRhZyIpKSYmKGsuZXRhZ1tmXT11KSksMjA0PT09ZXx8IkhFQUQiPT09di50eXBlP2w9Im5vY29udGVudCI6MzA0PT09ZT9sPSJub3Rtb2RpZmllZCI6KGw9cy5zdGF0ZSxvPXMuZGF0YSxpPSEoYT1zLmVycm9yKSkpOihhPWwsIWUmJmx8fChsPSJlcnJvciIsZTwwJiYoZT0wKSkpLFQuc3RhdHVzPWUsVC5zdGF0dXNUZXh0PSh0fHxsKSsiIixpP3gucmVzb2x2ZVdpdGgoeSxbbyxsLFRdKTp4LnJlamVjdFdpdGgoeSxbVCxsLGFdKSxULnN0YXR1c0NvZGUodyksdz12b2lkIDAsZyYmbS50cmlnZ2VyKGk/ImFqYXhTdWNjZXNzIjoiYWpheEVycm9yIixbVCx2LGk/bzphXSksYi5maXJlV2l0aCh5LFtULGxdKSxnJiYobS50cmlnZ2VyKCJhamF4Q29tcGxldGUiLFtULHZdKSwtLWsuYWN0aXZlfHxrLmV2ZW50LnRyaWdnZXIoImFqYXhTdG9wIikpKX1yZXR1cm4gVH0sZ2V0SlNPTjpmdW5jdGlvbihlLHQsbil7cmV0dXJuIGsuZ2V0KGUsdCxuLCJqc29uIil9LGdldFNjcmlwdDpmdW5jdGlvbihlLHQpe3JldHVybiBrLmdldChlLHZvaWQgMCx0LCJzY3JpcHQiKX19KSxrLmVhY2goWyJnZXQiLCJwb3N0Il0sZnVuY3Rpb24oZSxpKXtrW2ldPWZ1bmN0aW9uKGUsdCxuLHIpe3JldHVybiBtKHQpJiYocj1yfHxuLG49dCx0PXZvaWQgMCksay5hamF4KGsuZXh0ZW5kKHt1cmw6ZSx0eXBlOmksZGF0YVR5cGU6cixkYXRhOnQsc3VjY2VzczpufSxrLmlzUGxhaW5PYmplY3QoZSkmJmUpKX19KSxrLl9ldmFsVXJsPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGsuYWpheCh7dXJsOmUsdHlwZToiR0VUIixkYXRhVHlwZToic2NyaXB0IixjYWNoZTohMCxhc3luYzohMSxnbG9iYWw6ITEsY29udmVydGVyczp7InRleHQgc2NyaXB0IjpmdW5jdGlvbigpe319LGRhdGFGaWx0ZXI6ZnVuY3Rpb24oZSl7ay5nbG9iYWxFdmFsKGUsdCl9fSl9LGsuZm4uZXh0ZW5kKHt3cmFwQWxsOmZ1bmN0aW9uKGUpe3ZhciB0O3JldHVybiB0aGlzWzBdJiYobShlKSYmKGU9ZS5jYWxsKHRoaXNbMF0pKSx0PWsoZSx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJnQuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLHQubWFwKGZ1bmN0aW9uKCl7dmFyIGU9dGhpczt3aGlsZShlLmZpcnN0RWxlbWVudENoaWxkKWU9ZS5maXJzdEVsZW1lbnRDaGlsZDtyZXR1cm4gZX0pLmFwcGVuZCh0aGlzKSksdGhpc30sd3JhcElubmVyOmZ1bmN0aW9uKG4pe3JldHVybiBtKG4pP3RoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLndyYXBJbm5lcihuLmNhbGwodGhpcyxlKSl9KTp0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1rKHRoaXMpLHQ9ZS5jb250ZW50cygpO3QubGVuZ3RoP3Qud3JhcEFsbChuKTplLmFwcGVuZChuKX0pfSx3cmFwOmZ1bmN0aW9uKHQpe3ZhciBuPW0odCk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihlKXtrKHRoaXMpLndyYXBBbGwobj90LmNhbGwodGhpcyxlKTp0KX0pfSx1bndyYXA6ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMucGFyZW50KGUpLm5vdCgiYm9keSIpLmVhY2goZnVuY3Rpb24oKXtrKHRoaXMpLnJlcGxhY2VXaXRoKHRoaXMuY2hpbGROb2Rlcyl9KSx0aGlzfX0pLGsuZXhwci5wc2V1ZG9zLmhpZGRlbj1mdW5jdGlvbihlKXtyZXR1cm4hay5leHByLnBzZXVkb3MudmlzaWJsZShlKX0say5leHByLnBzZXVkb3MudmlzaWJsZT1mdW5jdGlvbihlKXtyZXR1cm4hIShlLm9mZnNldFdpZHRofHxlLm9mZnNldEhlaWdodHx8ZS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCl9LGsuYWpheFNldHRpbmdzLnhocj1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IEMuWE1MSHR0cFJlcXVlc3R9Y2F0Y2goZSl7fX07dmFyIFV0PXswOjIwMCwxMjIzOjIwNH0sWHQ9ay5hamF4U2V0dGluZ3MueGhyKCk7eS5jb3JzPSEhWHQmJiJ3aXRoQ3JlZGVudGlhbHMiaW4gWHQseS5hamF4PVh0PSEhWHQsay5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKGkpe3ZhciBvLGE7aWYoeS5jb3JzfHxYdCYmIWkuY3Jvc3NEb21haW4pcmV0dXJue3NlbmQ6ZnVuY3Rpb24oZSx0KXt2YXIgbixyPWkueGhyKCk7aWYoci5vcGVuKGkudHlwZSxpLnVybCxpLmFzeW5jLGkudXNlcm5hbWUsaS5wYXNzd29yZCksaS54aHJGaWVsZHMpZm9yKG4gaW4gaS54aHJGaWVsZHMpcltuXT1pLnhockZpZWxkc1tuXTtmb3IobiBpbiBpLm1pbWVUeXBlJiZyLm92ZXJyaWRlTWltZVR5cGUmJnIub3ZlcnJpZGVNaW1lVHlwZShpLm1pbWVUeXBlKSxpLmNyb3NzRG9tYWlufHxlWyJYLVJlcXVlc3RlZC1XaXRoIl18fChlWyJYLVJlcXVlc3RlZC1XaXRoIl09IlhNTEh0dHBSZXF1ZXN0IiksZSlyLnNldFJlcXVlc3RIZWFkZXIobixlW25dKTtvPWZ1bmN0aW9uKGUpe3JldHVybiBmdW5jdGlvbigpe28mJihvPWE9ci5vbmxvYWQ9ci5vbmVycm9yPXIub25hYm9ydD1yLm9udGltZW91dD1yLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsLCJhYm9ydCI9PT1lP3IuYWJvcnQoKToiZXJyb3IiPT09ZT8ibnVtYmVyIiE9dHlwZW9mIHIuc3RhdHVzP3QoMCwiZXJyb3IiKTp0KHIuc3RhdHVzLHIuc3RhdHVzVGV4dCk6dChVdFtyLnN0YXR1c118fHIuc3RhdHVzLHIuc3RhdHVzVGV4dCwidGV4dCIhPT0oci5yZXNwb25zZVR5cGV8fCJ0ZXh0Iil8fCJzdHJpbmciIT10eXBlb2Ygci5yZXNwb25zZVRleHQ/e2JpbmFyeTpyLnJlc3BvbnNlfTp7dGV4dDpyLnJlc3BvbnNlVGV4dH0sci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSkpfX0sci5vbmxvYWQ9bygpLGE9ci5vbmVycm9yPXIub250aW1lb3V0PW8oImVycm9yIiksdm9pZCAwIT09ci5vbmFib3J0P3Iub25hYm9ydD1hOnIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PXIucmVhZHlTdGF0ZSYmQy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7byYmYSgpfSl9LG89bygiYWJvcnQiKTt0cnl7ci5zZW5kKGkuaGFzQ29udGVudCYmaS5kYXRhfHxudWxsKX1jYXRjaChlKXtpZihvKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe28mJm8oKX19fSksay5hamF4UHJlZmlsdGVyKGZ1bmN0aW9uKGUpe2UuY3Jvc3NEb21haW4mJihlLmNvbnRlbnRzLnNjcmlwdD0hMSl9KSxrLmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OiJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2VjbWFzY3JpcHQsIGFwcGxpY2F0aW9uL3gtZWNtYXNjcmlwdCJ9LGNvbnRlbnRzOntzY3JpcHQ6L1xiKD86amF2YXxlY21hKXNjcmlwdFxiL30sY29udmVydGVyczp7InRleHQgc2NyaXB0IjpmdW5jdGlvbihlKXtyZXR1cm4gay5nbG9iYWxFdmFsKGUpLGV9fX0pLGsuYWpheFByZWZpbHRlcigic2NyaXB0IixmdW5jdGlvbihlKXt2b2lkIDA9PT1lLmNhY2hlJiYoZS5jYWNoZT0hMSksZS5jcm9zc0RvbWFpbiYmKGUudHlwZT0iR0VUIil9KSxrLmFqYXhUcmFuc3BvcnQoInNjcmlwdCIsZnVuY3Rpb24obil7dmFyIHIsaTtpZihuLmNyb3NzRG9tYWlufHxuLnNjcmlwdEF0dHJzKXJldHVybntzZW5kOmZ1bmN0aW9uKGUsdCl7cj1rKCI8c2NyaXB0PiIpLmF0dHIobi5zY3JpcHRBdHRyc3x8e30pLnByb3Aoe2NoYXJzZXQ6bi5zY3JpcHRDaGFyc2V0LHNyYzpuLnVybH0pLm9uKCJsb2FkIGVycm9yIixpPWZ1bmN0aW9uKGUpe3IucmVtb3ZlKCksaT1udWxsLGUmJnQoImVycm9yIj09PWUudHlwZT80MDQ6MjAwLGUudHlwZSl9KSxFLmhlYWQuYXBwZW5kQ2hpbGQoclswXSl9LGFib3J0OmZ1bmN0aW9uKCl7aSYmaSgpfX19KTt2YXIgVnQsR3Q9W10sWXQ9Lyg9KVw/KD89JnwkKXxcP1w/LztrLmFqYXhTZXR1cCh7anNvbnA6ImNhbGxiYWNrIixqc29ucENhbGxiYWNrOmZ1bmN0aW9uKCl7dmFyIGU9R3QucG9wKCl8fGsuZXhwYW5kbysiXyIra3QrKztyZXR1cm4gdGhpc1tlXT0hMCxlfX0pLGsuYWpheFByZWZpbHRlcigianNvbiBqc29ucCIsZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPSExIT09ZS5qc29ucCYmKFl0LnRlc3QoZS51cmwpPyJ1cmwiOiJzdHJpbmciPT10eXBlb2YgZS5kYXRhJiYwPT09KGUuY29udGVudFR5cGV8fCIiKS5pbmRleE9mKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKSYmWXQudGVzdChlLmRhdGEpJiYiZGF0YSIpO2lmKGF8fCJqc29ucCI9PT1lLmRhdGFUeXBlc1swXSlyZXR1cm4gcj1lLmpzb25wQ2FsbGJhY2s9bShlLmpzb25wQ2FsbGJhY2spP2UuanNvbnBDYWxsYmFjaygpOmUuanNvbnBDYWxsYmFjayxhP2VbYV09ZVthXS5yZXBsYWNlKFl0LCIkMSIrcik6ITEhPT1lLmpzb25wJiYoZS51cmwrPShTdC50ZXN0KGUudXJsKT8iJiI6Ij8iKStlLmpzb25wKyI9IityKSxlLmNvbnZlcnRlcnNbInNjcmlwdCBqc29uIl09ZnVuY3Rpb24oKXtyZXR1cm4gb3x8ay5lcnJvcihyKyIgd2FzIG5vdCBjYWxsZWQiKSxvWzBdfSxlLmRhdGFUeXBlc1swXT0ianNvbiIsaT1DW3JdLENbcl09ZnVuY3Rpb24oKXtvPWFyZ3VtZW50c30sbi5hbHdheXMoZnVuY3Rpb24oKXt2b2lkIDA9PT1pP2soQykucmVtb3ZlUHJvcChyKTpDW3JdPWksZVtyXSYmKGUuanNvbnBDYWxsYmFjaz10Lmpzb25wQ2FsbGJhY2ssR3QucHVzaChyKSksbyYmbShpKSYmaShvWzBdKSxvPWk9dm9pZCAwfSksInNjcmlwdCJ9KSx5LmNyZWF0ZUhUTUxEb2N1bWVudD0oKFZ0PUUuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCIiKS5ib2R5KS5pbm5lckhUTUw9Ijxmb3JtPjwvZm9ybT48Zm9ybT48L2Zvcm0+IiwyPT09VnQuY2hpbGROb2Rlcy5sZW5ndGgpLGsucGFyc2VIVE1MPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4ic3RyaW5nIiE9dHlwZW9mIGU/W106KCJib29sZWFuIj09dHlwZW9mIHQmJihuPXQsdD0hMSksdHx8KHkuY3JlYXRlSFRNTERvY3VtZW50Pygocj0odD1FLmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgiIikpLmNyZWF0ZUVsZW1lbnQoImJhc2UiKSkuaHJlZj1FLmxvY2F0aW9uLmhyZWYsdC5oZWFkLmFwcGVuZENoaWxkKHIpKTp0PUUpLG89IW4mJltdLChpPUQuZXhlYyhlKSk/W3QuY3JlYXRlRWxlbWVudChpWzFdKV06KGk9d2UoW2VdLHQsbyksbyYmby5sZW5ndGgmJmsobykucmVtb3ZlKCksay5tZXJnZShbXSxpLmNoaWxkTm9kZXMpKSk7dmFyIHIsaSxvfSxrLmZuLmxvYWQ9ZnVuY3Rpb24oZSx0LG4pe3ZhciByLGksbyxhPXRoaXMscz1lLmluZGV4T2YoIiAiKTtyZXR1cm4tMTxzJiYocj1tdChlLnNsaWNlKHMpKSxlPWUuc2xpY2UoMCxzKSksbSh0KT8obj10LHQ9dm9pZCAwKTp0JiYib2JqZWN0Ij09dHlwZW9mIHQmJihpPSJQT1NUIiksMDxhLmxlbmd0aCYmay5hamF4KHt1cmw6ZSx0eXBlOml8fCJHRVQiLGRhdGFUeXBlOiJodG1sIixkYXRhOnR9KS5kb25lKGZ1bmN0aW9uKGUpe289YXJndW1lbnRzLGEuaHRtbChyP2soIjxkaXY+IikuYXBwZW5kKGsucGFyc2VIVE1MKGUpKS5maW5kKHIpOmUpfSkuYWx3YXlzKG4mJmZ1bmN0aW9uKGUsdCl7YS5lYWNoKGZ1bmN0aW9uKCl7bi5hcHBseSh0aGlzLG98fFtlLnJlc3BvbnNlVGV4dCx0LGVdKX0pfSksdGhpc30say5lYWNoKFsiYWpheFN0YXJ0IiwiYWpheFN0b3AiLCJhamF4Q29tcGxldGUiLCJhamF4RXJyb3IiLCJhamF4U3VjY2VzcyIsImFqYXhTZW5kIl0sZnVuY3Rpb24oZSx0KXtrLmZuW3RdPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9uKHQsZSl9fSksay5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIGsuZ3JlcChrLnRpbWVycyxmdW5jdGlvbihlKXtyZXR1cm4gdD09PWUuZWxlbX0pLmxlbmd0aH0say5vZmZzZXQ9e3NldE9mZnNldDpmdW5jdGlvbihlLHQsbil7dmFyIHIsaSxvLGEscyx1LGw9ay5jc3MoZSwicG9zaXRpb24iKSxjPWsoZSksZj17fTsic3RhdGljIj09PWwmJihlLnN0eWxlLnBvc2l0aW9uPSJyZWxhdGl2ZSIpLHM9Yy5vZmZzZXQoKSxvPWsuY3NzKGUsInRvcCIpLHU9ay5jc3MoZSwibGVmdCIpLCgiYWJzb2x1dGUiPT09bHx8ImZpeGVkIj09PWwpJiYtMTwobyt1KS5pbmRleE9mKCJhdXRvIik/KGE9KHI9Yy5wb3NpdGlvbigpKS50b3AsaT1yLmxlZnQpOihhPXBhcnNlRmxvYXQobyl8fDAsaT1wYXJzZUZsb2F0KHUpfHwwKSxtKHQpJiYodD10LmNhbGwoZSxuLGsuZXh0ZW5kKHt9LHMpKSksbnVsbCE9dC50b3AmJihmLnRvcD10LnRvcC1zLnRvcCthKSxudWxsIT10LmxlZnQmJihmLmxlZnQ9dC5sZWZ0LXMubGVmdCtpKSwidXNpbmciaW4gdD90LnVzaW5nLmNhbGwoZSxmKTpjLmNzcyhmKX19LGsuZm4uZXh0ZW5kKHtvZmZzZXQ6ZnVuY3Rpb24odCl7aWYoYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gdm9pZCAwPT09dD90aGlzOnRoaXMuZWFjaChmdW5jdGlvbihlKXtrLm9mZnNldC5zZXRPZmZzZXQodGhpcyx0LGUpfSk7dmFyIGUsbixyPXRoaXNbMF07cmV0dXJuIHI/ci5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8oZT1yLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLG49ci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LHt0b3A6ZS50b3Arbi5wYWdlWU9mZnNldCxsZWZ0OmUubGVmdCtuLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH06dm9pZCAwfSxwb3NpdGlvbjpmdW5jdGlvbigpe2lmKHRoaXNbMF0pe3ZhciBlLHQsbixyPXRoaXNbMF0saT17dG9wOjAsbGVmdDowfTtpZigiZml4ZWQiPT09ay5jc3MociwicG9zaXRpb24iKSl0PXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXt0PXRoaXMub2Zmc2V0KCksbj1yLm93bmVyRG9jdW1lbnQsZT1yLm9mZnNldFBhcmVudHx8bi5kb2N1bWVudEVsZW1lbnQ7d2hpbGUoZSYmKGU9PT1uLmJvZHl8fGU9PT1uLmRvY3VtZW50RWxlbWVudCkmJiJzdGF0aWMiPT09ay5jc3MoZSwicG9zaXRpb24iKSllPWUucGFyZW50Tm9kZTtlJiZlIT09ciYmMT09PWUubm9kZVR5cGUmJigoaT1rKGUpLm9mZnNldCgpKS50b3ArPWsuY3NzKGUsImJvcmRlclRvcFdpZHRoIiwhMCksaS5sZWZ0Kz1rLmNzcyhlLCJib3JkZXJMZWZ0V2lkdGgiLCEwKSl9cmV0dXJue3RvcDp0LnRvcC1pLnRvcC1rLmNzcyhyLCJtYXJnaW5Ub3AiLCEwKSxsZWZ0OnQubGVmdC1pLmxlZnQtay5jc3MociwibWFyZ2luTGVmdCIsITApfX19LG9mZnNldFBhcmVudDpmdW5jdGlvbigpe3JldHVybiB0aGlzLm1hcChmdW5jdGlvbigpe3ZhciBlPXRoaXMub2Zmc2V0UGFyZW50O3doaWxlKGUmJiJzdGF0aWMiPT09ay5jc3MoZSwicG9zaXRpb24iKSllPWUub2Zmc2V0UGFyZW50O3JldHVybiBlfHxpZX0pfX0pLGsuZWFjaCh7c2Nyb2xsTGVmdDoicGFnZVhPZmZzZXQiLHNjcm9sbFRvcDoicGFnZVlPZmZzZXQifSxmdW5jdGlvbih0LGkpe3ZhciBvPSJwYWdlWU9mZnNldCI9PT1pO2suZm5bdF09ZnVuY3Rpb24oZSl7cmV0dXJuIF8odGhpcyxmdW5jdGlvbihlLHQsbil7dmFyIHI7aWYoeChlKT9yPWU6OT09PWUubm9kZVR5cGUmJihyPWUuZGVmYXVsdFZpZXcpLHZvaWQgMD09PW4pcmV0dXJuIHI/cltpXTplW3RdO3I/ci5zY3JvbGxUbyhvP3IucGFnZVhPZmZzZXQ6bixvP246ci5wYWdlWU9mZnNldCk6ZVt0XT1ufSx0LGUsYXJndW1lbnRzLmxlbmd0aCl9fSksay5lYWNoKFsidG9wIiwibGVmdCJdLGZ1bmN0aW9uKGUsbil7ay5jc3NIb29rc1tuXT16ZSh5LnBpeGVsUG9zaXRpb24sZnVuY3Rpb24oZSx0KXtpZih0KXJldHVybiB0PV9lKGUsbiksJGUudGVzdCh0KT9rKGUpLnBvc2l0aW9uKClbbl0rInB4Ijp0fSl9KSxrLmVhY2goe0hlaWdodDoiaGVpZ2h0IixXaWR0aDoid2lkdGgifSxmdW5jdGlvbihhLHMpe2suZWFjaCh7cGFkZGluZzoiaW5uZXIiK2EsY29udGVudDpzLCIiOiJvdXRlciIrYX0sZnVuY3Rpb24ocixvKXtrLmZuW29dPWZ1bmN0aW9uKGUsdCl7dmFyIG49YXJndW1lbnRzLmxlbmd0aCYmKHJ8fCJib29sZWFuIiE9dHlwZW9mIGUpLGk9cnx8KCEwPT09ZXx8ITA9PT10PyJtYXJnaW4iOiJib3JkZXIiKTtyZXR1cm4gXyh0aGlzLGZ1bmN0aW9uKGUsdCxuKXt2YXIgcjtyZXR1cm4geChlKT8wPT09by5pbmRleE9mKCJvdXRlciIpP2VbImlubmVyIithXTplLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsiY2xpZW50IithXTo5PT09ZS5ub2RlVHlwZT8ocj1lLmRvY3VtZW50RWxlbWVudCxNYXRoLm1heChlLmJvZHlbInNjcm9sbCIrYV0sclsic2Nyb2xsIithXSxlLmJvZHlbIm9mZnNldCIrYV0sclsib2Zmc2V0IithXSxyWyJjbGllbnQiK2FdKSk6dm9pZCAwPT09bj9rLmNzcyhlLHQsaSk6ay5zdHlsZShlLHQsbixpKX0scyxuP2U6dm9pZCAwLG4pfX0pfSksay5lYWNoKCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51Ii5zcGxpdCgiICIpLGZ1bmN0aW9uKGUsbil7ay5mbltuXT1mdW5jdGlvbihlLHQpe3JldHVybiAwPGFyZ3VtZW50cy5sZW5ndGg/dGhpcy5vbihuLG51bGwsZSx0KTp0aGlzLnRyaWdnZXIobil9fSksay5mbi5leHRlbmQoe2hvdmVyOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMubW91c2VlbnRlcihlKS5tb3VzZWxlYXZlKHR8fGUpfX0pLGsuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4gdGhpcy5vbihlLG51bGwsdCxuKX0sdW5iaW5kOmZ1bmN0aW9uKGUsdCl7cmV0dXJuIHRoaXMub2ZmKGUsbnVsbCx0KX0sZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4scil7cmV0dXJuIHRoaXMub24odCxlLG4scil9LHVuZGVsZWdhdGU6ZnVuY3Rpb24oZSx0LG4pe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD90aGlzLm9mZihlLCIqKiIpOnRoaXMub2ZmKHQsZXx8IioqIixuKX19KSxrLnByb3h5PWZ1bmN0aW9uKGUsdCl7dmFyIG4scixpO2lmKCJzdHJpbmciPT10eXBlb2YgdCYmKG49ZVt0XSx0PWUsZT1uKSxtKGUpKXJldHVybiByPXMuY2FsbChhcmd1bWVudHMsMiksKGk9ZnVuY3Rpb24oKXtyZXR1cm4gZS5hcHBseSh0fHx0aGlzLHIuY29uY2F0KHMuY2FsbChhcmd1bWVudHMpKSl9KS5ndWlkPWUuZ3VpZD1lLmd1aWR8fGsuZ3VpZCsrLGl9LGsuaG9sZFJlYWR5PWZ1bmN0aW9uKGUpe2U/ay5yZWFkeVdhaXQrKzprLnJlYWR5KCEwKX0say5pc0FycmF5PUFycmF5LmlzQXJyYXksay5wYXJzZUpTT049SlNPTi5wYXJzZSxrLm5vZGVOYW1lPUEsay5pc0Z1bmN0aW9uPW0say5pc1dpbmRvdz14LGsuY2FtZWxDYXNlPVYsay50eXBlPXcsay5ub3c9RGF0ZS5ub3csay5pc051bWVyaWM9ZnVuY3Rpb24oZSl7dmFyIHQ9ay50eXBlKGUpO3JldHVybigibnVtYmVyIj09PXR8fCJzdHJpbmciPT09dCkmJiFpc05hTihlLXBhcnNlRmxvYXQoZSkpfSwiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kJiZkZWZpbmUoImpxdWVyeSIsW10sZnVuY3Rpb24oKXtyZXR1cm4ga30pO3ZhciBRdD1DLmpRdWVyeSxKdD1DLiQ7cmV0dXJuIGsubm9Db25mbGljdD1mdW5jdGlvbihlKXtyZXR1cm4gQy4kPT09ayYmKEMuJD1KdCksZSYmQy5qUXVlcnk9PT1rJiYoQy5qUXVlcnk9UXQpLGt9LGV8fChDLmpRdWVyeT1DLiQ9ayksa30pOwo=","root/third-party-libs/underscore-min.js":"Ly8gICAgIFVuZGVyc2NvcmUuanMgMS45LjIKLy8gICAgIGh0dHBzOi8vdW5kZXJzY29yZWpzLm9yZwovLyAgICAgKGMpIDIwMDktMjAxOCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9ycwovLyAgICAgVW5kZXJzY29yZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4KIWZ1bmN0aW9uKCl7dmFyIG49Im9iamVjdCI9PXR5cGVvZiBzZWxmJiZzZWxmLnNlbGY9PT1zZWxmJiZzZWxmfHwib2JqZWN0Ij09dHlwZW9mIGdsb2JhbCYmZ2xvYmFsLmdsb2JhbD09PWdsb2JhbCYmZ2xvYmFsfHx0aGlzfHx7fSxyPW4uXyxlPUFycmF5LnByb3RvdHlwZSxvPU9iamVjdC5wcm90b3R5cGUscz0idW5kZWZpbmVkIiE9dHlwZW9mIFN5bWJvbD9TeW1ib2wucHJvdG90eXBlOm51bGwsdT1lLnB1c2gsYz1lLnNsaWNlLHA9by50b1N0cmluZyxpPW8uaGFzT3duUHJvcGVydHksdD1BcnJheS5pc0FycmF5LGE9T2JqZWN0LmtleXMsbD1PYmplY3QuY3JlYXRlLGY9ZnVuY3Rpb24oKXt9LGg9ZnVuY3Rpb24obil7cmV0dXJuIG4gaW5zdGFuY2VvZiBoP246dGhpcyBpbnN0YW5jZW9mIGg/dm9pZCh0aGlzLl93cmFwcGVkPW4pOm5ldyBoKG4pfTsidW5kZWZpbmVkIj09dHlwZW9mIGV4cG9ydHN8fGV4cG9ydHMubm9kZVR5cGU/bi5fPWg6KCJ1bmRlZmluZWQiIT10eXBlb2YgbW9kdWxlJiYhbW9kdWxlLm5vZGVUeXBlJiZtb2R1bGUuZXhwb3J0cyYmKGV4cG9ydHM9bW9kdWxlLmV4cG9ydHM9aCksZXhwb3J0cy5fPWgpLGguVkVSU0lPTj0iMS45LjIiO3ZhciB2LHk9ZnVuY3Rpb24odSxpLG4pe2lmKHZvaWQgMD09PWkpcmV0dXJuIHU7c3dpdGNoKG51bGw9PW4/MzpuKXtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiB1LmNhbGwoaSxuKX07Y2FzZSAzOnJldHVybiBmdW5jdGlvbihuLHIsdCl7cmV0dXJuIHUuY2FsbChpLG4scix0KX07Y2FzZSA0OnJldHVybiBmdW5jdGlvbihuLHIsdCxlKXtyZXR1cm4gdS5jYWxsKGksbixyLHQsZSl9fXJldHVybiBmdW5jdGlvbigpe3JldHVybiB1LmFwcGx5KGksYXJndW1lbnRzKX19LGQ9ZnVuY3Rpb24obixyLHQpe3JldHVybiBoLml0ZXJhdGVlIT09dj9oLml0ZXJhdGVlKG4scik6bnVsbD09bj9oLmlkZW50aXR5OmguaXNGdW5jdGlvbihuKT95KG4scix0KTpoLmlzT2JqZWN0KG4pJiYhaC5pc0FycmF5KG4pP2gubWF0Y2hlcihuKTpoLnByb3BlcnR5KG4pfTtoLml0ZXJhdGVlPXY9ZnVuY3Rpb24obixyKXtyZXR1cm4gZChuLHIsMS8wKX07dmFyIGc9ZnVuY3Rpb24odSxpKXtyZXR1cm4gaT1udWxsPT1pP3UubGVuZ3RoLTE6K2ksZnVuY3Rpb24oKXtmb3IodmFyIG49TWF0aC5tYXgoYXJndW1lbnRzLmxlbmd0aC1pLDApLHI9QXJyYXkobiksdD0wO3Q8bjt0Kyspclt0XT1hcmd1bWVudHNbdCtpXTtzd2l0Y2goaSl7Y2FzZSAwOnJldHVybiB1LmNhbGwodGhpcyxyKTtjYXNlIDE6cmV0dXJuIHUuY2FsbCh0aGlzLGFyZ3VtZW50c1swXSxyKTtjYXNlIDI6cmV0dXJuIHUuY2FsbCh0aGlzLGFyZ3VtZW50c1swXSxhcmd1bWVudHNbMV0scil9dmFyIGU9QXJyYXkoaSsxKTtmb3IodD0wO3Q8aTt0KyspZVt0XT1hcmd1bWVudHNbdF07cmV0dXJuIGVbaV09cix1LmFwcGx5KHRoaXMsZSl9fSxtPWZ1bmN0aW9uKG4pe2lmKCFoLmlzT2JqZWN0KG4pKXJldHVybnt9O2lmKGwpcmV0dXJuIGwobik7Zi5wcm90b3R5cGU9bjt2YXIgcj1uZXcgZjtyZXR1cm4gZi5wcm90b3R5cGU9bnVsbCxyfSxiPWZ1bmN0aW9uKHIpe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bj92b2lkIDA6bltyXX19LGo9ZnVuY3Rpb24obixyKXtyZXR1cm4gbnVsbCE9biYmaS5jYWxsKG4scil9LHg9ZnVuY3Rpb24obixyKXtmb3IodmFyIHQ9ci5sZW5ndGgsZT0wO2U8dDtlKyspe2lmKG51bGw9PW4pcmV0dXJuO249bltyW2VdXX1yZXR1cm4gdD9uOnZvaWQgMH0sXz1NYXRoLnBvdygyLDUzKS0xLEE9YigibGVuZ3RoIiksdz1mdW5jdGlvbihuKXt2YXIgcj1BKG4pO3JldHVybiJudW1iZXIiPT10eXBlb2YgciYmMDw9ciYmcjw9X307aC5lYWNoPWguZm9yRWFjaD1mdW5jdGlvbihuLHIsdCl7dmFyIGUsdTtpZihyPXkocix0KSx3KG4pKWZvcihlPTAsdT1uLmxlbmd0aDtlPHU7ZSsrKXIobltlXSxlLG4pO2Vsc2V7dmFyIGk9aC5rZXlzKG4pO2ZvcihlPTAsdT1pLmxlbmd0aDtlPHU7ZSsrKXIobltpW2VdXSxpW2VdLG4pfXJldHVybiBufSxoLm1hcD1oLmNvbGxlY3Q9ZnVuY3Rpb24obixyLHQpe3I9ZChyLHQpO2Zvcih2YXIgZT0hdyhuKSYmaC5rZXlzKG4pLHU9KGV8fG4pLmxlbmd0aCxpPUFycmF5KHUpLG89MDtvPHU7bysrKXt2YXIgYT1lP2Vbb106bztpW29dPXIoblthXSxhLG4pfXJldHVybiBpfTt2YXIgTz1mdW5jdGlvbihjKXtyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIHU9Mzw9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24obixyLHQsZSl7dmFyIHU9IXcobikmJmgua2V5cyhuKSxpPSh1fHxuKS5sZW5ndGgsbz0wPGM/MDppLTE7Zm9yKGV8fCh0PW5bdT91W29dOm9dLG8rPWMpOzA8PW8mJm88aTtvKz1jKXt2YXIgYT11P3Vbb106bzt0PXIodCxuW2FdLGEsbil9cmV0dXJuIHR9KG4seShyLGUsNCksdCx1KX19O2gucmVkdWNlPWguZm9sZGw9aC5pbmplY3Q9TygxKSxoLnJlZHVjZVJpZ2h0PWguZm9sZHI9TygtMSksaC5maW5kPWguZGV0ZWN0PWZ1bmN0aW9uKG4scix0KXt2YXIgZT0odyhuKT9oLmZpbmRJbmRleDpoLmZpbmRLZXkpKG4scix0KTtpZih2b2lkIDAhPT1lJiYtMSE9PWUpcmV0dXJuIG5bZV19LGguZmlsdGVyPWguc2VsZWN0PWZ1bmN0aW9uKG4sZSxyKXt2YXIgdT1bXTtyZXR1cm4gZT1kKGUsciksaC5lYWNoKG4sZnVuY3Rpb24obixyLHQpe2UobixyLHQpJiZ1LnB1c2gobil9KSx1fSxoLnJlamVjdD1mdW5jdGlvbihuLHIsdCl7cmV0dXJuIGguZmlsdGVyKG4saC5uZWdhdGUoZChyKSksdCl9LGguZXZlcnk9aC5hbGw9ZnVuY3Rpb24obixyLHQpe3I9ZChyLHQpO2Zvcih2YXIgZT0hdyhuKSYmaC5rZXlzKG4pLHU9KGV8fG4pLmxlbmd0aCxpPTA7aTx1O2krKyl7dmFyIG89ZT9lW2ldOmk7aWYoIXIobltvXSxvLG4pKXJldHVybiExfXJldHVybiEwfSxoLnNvbWU9aC5hbnk9ZnVuY3Rpb24obixyLHQpe3I9ZChyLHQpO2Zvcih2YXIgZT0hdyhuKSYmaC5rZXlzKG4pLHU9KGV8fG4pLmxlbmd0aCxpPTA7aTx1O2krKyl7dmFyIG89ZT9lW2ldOmk7aWYocihuW29dLG8sbikpcmV0dXJuITB9cmV0dXJuITF9LGguY29udGFpbnM9aC5pbmNsdWRlcz1oLmluY2x1ZGU9ZnVuY3Rpb24obixyLHQsZSl7cmV0dXJuIHcobil8fChuPWgudmFsdWVzKG4pKSwoIm51bWJlciIhPXR5cGVvZiB0fHxlKSYmKHQ9MCksMDw9aC5pbmRleE9mKG4scix0KX0saC5pbnZva2U9ZyhmdW5jdGlvbihuLHQsZSl7dmFyIHUsaTtyZXR1cm4gaC5pc0Z1bmN0aW9uKHQpP2k9dDpoLmlzQXJyYXkodCkmJih1PXQuc2xpY2UoMCwtMSksdD10W3QubGVuZ3RoLTFdKSxoLm1hcChuLGZ1bmN0aW9uKG4pe3ZhciByPWk7aWYoIXIpe2lmKHUmJnUubGVuZ3RoJiYobj14KG4sdSkpLG51bGw9PW4pcmV0dXJuO3I9blt0XX1yZXR1cm4gbnVsbD09cj9yOnIuYXBwbHkobixlKX0pfSksaC5wbHVjaz1mdW5jdGlvbihuLHIpe3JldHVybiBoLm1hcChuLGgucHJvcGVydHkocikpfSxoLndoZXJlPWZ1bmN0aW9uKG4scil7cmV0dXJuIGguZmlsdGVyKG4saC5tYXRjaGVyKHIpKX0saC5maW5kV2hlcmU9ZnVuY3Rpb24obixyKXtyZXR1cm4gaC5maW5kKG4saC5tYXRjaGVyKHIpKX0saC5tYXg9ZnVuY3Rpb24obixlLHIpe3ZhciB0LHUsaT0tMS8wLG89LTEvMDtpZihudWxsPT1lfHwibnVtYmVyIj09dHlwZW9mIGUmJiJvYmplY3QiIT10eXBlb2YgblswXSYmbnVsbCE9bilmb3IodmFyIGE9MCxjPShuPXcobik/bjpoLnZhbHVlcyhuKSkubGVuZ3RoO2E8YzthKyspbnVsbCE9KHQ9blthXSkmJmk8dCYmKGk9dCk7ZWxzZSBlPWQoZSxyKSxoLmVhY2gobixmdW5jdGlvbihuLHIsdCl7dT1lKG4scix0KSwobzx1fHx1PT09LTEvMCYmaT09PS0xLzApJiYoaT1uLG89dSl9KTtyZXR1cm4gaX0saC5taW49ZnVuY3Rpb24obixlLHIpe3ZhciB0LHUsaT0xLzAsbz0xLzA7aWYobnVsbD09ZXx8Im51bWJlciI9PXR5cGVvZiBlJiYib2JqZWN0IiE9dHlwZW9mIG5bMF0mJm51bGwhPW4pZm9yKHZhciBhPTAsYz0obj13KG4pP246aC52YWx1ZXMobikpLmxlbmd0aDthPGM7YSsrKW51bGwhPSh0PW5bYV0pJiZ0PGkmJihpPXQpO2Vsc2UgZT1kKGUsciksaC5lYWNoKG4sZnVuY3Rpb24obixyLHQpeygodT1lKG4scix0KSk8b3x8dT09PTEvMCYmaT09PTEvMCkmJihpPW4sbz11KX0pO3JldHVybiBpfSxoLnNodWZmbGU9ZnVuY3Rpb24obil7cmV0dXJuIGguc2FtcGxlKG4sMS8wKX0saC5zYW1wbGU9ZnVuY3Rpb24obixyLHQpe2lmKG51bGw9PXJ8fHQpcmV0dXJuIHcobil8fChuPWgudmFsdWVzKG4pKSxuW2gucmFuZG9tKG4ubGVuZ3RoLTEpXTt2YXIgZT13KG4pP2guY2xvbmUobik6aC52YWx1ZXMobiksdT1BKGUpO3I9TWF0aC5tYXgoTWF0aC5taW4ocix1KSwwKTtmb3IodmFyIGk9dS0xLG89MDtvPHI7bysrKXt2YXIgYT1oLnJhbmRvbShvLGkpLGM9ZVtvXTtlW29dPWVbYV0sZVthXT1jfXJldHVybiBlLnNsaWNlKDAscil9LGguc29ydEJ5PWZ1bmN0aW9uKG4sZSxyKXt2YXIgdT0wO3JldHVybiBlPWQoZSxyKSxoLnBsdWNrKGgubWFwKG4sZnVuY3Rpb24obixyLHQpe3JldHVybnt2YWx1ZTpuLGluZGV4OnUrKyxjcml0ZXJpYTplKG4scix0KX19KS5zb3J0KGZ1bmN0aW9uKG4scil7dmFyIHQ9bi5jcml0ZXJpYSxlPXIuY3JpdGVyaWE7aWYodCE9PWUpe2lmKGU8dHx8dm9pZCAwPT09dClyZXR1cm4gMTtpZih0PGV8fHZvaWQgMD09PWUpcmV0dXJuLTF9cmV0dXJuIG4uaW5kZXgtci5pbmRleH0pLCJ2YWx1ZSIpfTt2YXIgaz1mdW5jdGlvbihvLHIpe3JldHVybiBmdW5jdGlvbihlLHUsbil7dmFyIGk9cj9bW10sW11dOnt9O3JldHVybiB1PWQodSxuKSxoLmVhY2goZSxmdW5jdGlvbihuLHIpe3ZhciB0PXUobixyLGUpO28oaSxuLHQpfSksaX19O2guZ3JvdXBCeT1rKGZ1bmN0aW9uKG4scix0KXtqKG4sdCk/blt0XS5wdXNoKHIpOm5bdF09W3JdfSksaC5pbmRleEJ5PWsoZnVuY3Rpb24obixyLHQpe25bdF09cn0pLGguY291bnRCeT1rKGZ1bmN0aW9uKG4scix0KXtqKG4sdCk/blt0XSsrOm5bdF09MX0pO3ZhciBTPS9bXlx1ZDgwMC1cdWRmZmZdfFtcdWQ4MDAtXHVkYmZmXVtcdWRjMDAtXHVkZmZmXXxbXHVkODAwLVx1ZGZmZl0vZztoLnRvQXJyYXk9ZnVuY3Rpb24obil7cmV0dXJuIG4/aC5pc0FycmF5KG4pP2MuY2FsbChuKTpoLmlzU3RyaW5nKG4pP24ubWF0Y2goUyk6dyhuKT9oLm1hcChuLGguaWRlbnRpdHkpOmgudmFsdWVzKG4pOltdfSxoLnNpemU9ZnVuY3Rpb24obil7cmV0dXJuIG51bGw9PW4/MDp3KG4pP24ubGVuZ3RoOmgua2V5cyhuKS5sZW5ndGh9LGgucGFydGl0aW9uPWsoZnVuY3Rpb24obixyLHQpe25bdD8wOjFdLnB1c2gocil9LCEwKSxoLmZpcnN0PWguaGVhZD1oLnRha2U9ZnVuY3Rpb24obixyLHQpe3JldHVybiBudWxsPT1ufHxuLmxlbmd0aDwxP251bGw9PXI/dm9pZCAwOltdOm51bGw9PXJ8fHQ/blswXTpoLmluaXRpYWwobixuLmxlbmd0aC1yKX0saC5pbml0aWFsPWZ1bmN0aW9uKG4scix0KXtyZXR1cm4gYy5jYWxsKG4sMCxNYXRoLm1heCgwLG4ubGVuZ3RoLShudWxsPT1yfHx0PzE6cikpKX0saC5sYXN0PWZ1bmN0aW9uKG4scix0KXtyZXR1cm4gbnVsbD09bnx8bi5sZW5ndGg8MT9udWxsPT1yP3ZvaWQgMDpbXTpudWxsPT1yfHx0P25bbi5sZW5ndGgtMV06aC5yZXN0KG4sTWF0aC5tYXgoMCxuLmxlbmd0aC1yKSl9LGgucmVzdD1oLnRhaWw9aC5kcm9wPWZ1bmN0aW9uKG4scix0KXtyZXR1cm4gYy5jYWxsKG4sbnVsbD09cnx8dD8xOnIpfSxoLmNvbXBhY3Q9ZnVuY3Rpb24obil7cmV0dXJuIGguZmlsdGVyKG4sQm9vbGVhbil9O3ZhciBNPWZ1bmN0aW9uKG4scix0LGUpe2Zvcih2YXIgdT0oZT1lfHxbXSkubGVuZ3RoLGk9MCxvPUEobik7aTxvO2krKyl7dmFyIGE9bltpXTtpZih3KGEpJiYoaC5pc0FycmF5KGEpfHxoLmlzQXJndW1lbnRzKGEpKSlpZihyKWZvcih2YXIgYz0wLGw9YS5sZW5ndGg7YzxsOyllW3UrK109YVtjKytdO2Vsc2UgTShhLHIsdCxlKSx1PWUubGVuZ3RoO2Vsc2UgdHx8KGVbdSsrXT1hKX1yZXR1cm4gZX07aC5mbGF0dGVuPWZ1bmN0aW9uKG4scil7cmV0dXJuIE0obixyLCExKX0saC53aXRob3V0PWcoZnVuY3Rpb24obixyKXtyZXR1cm4gaC5kaWZmZXJlbmNlKG4scil9KSxoLnVuaXE9aC51bmlxdWU9ZnVuY3Rpb24obixyLHQsZSl7aC5pc0Jvb2xlYW4ocil8fChlPXQsdD1yLHI9ITEpLG51bGwhPXQmJih0PWQodCxlKSk7Zm9yKHZhciB1PVtdLGk9W10sbz0wLGE9QShuKTtvPGE7bysrKXt2YXIgYz1uW29dLGw9dD90KGMsbyxuKTpjO3ImJiF0PyhvJiZpPT09bHx8dS5wdXNoKGMpLGk9bCk6dD9oLmNvbnRhaW5zKGksbCl8fChpLnB1c2gobCksdS5wdXNoKGMpKTpoLmNvbnRhaW5zKHUsYyl8fHUucHVzaChjKX1yZXR1cm4gdX0saC51bmlvbj1nKGZ1bmN0aW9uKG4pe3JldHVybiBoLnVuaXEoTShuLCEwLCEwKSl9KSxoLmludGVyc2VjdGlvbj1mdW5jdGlvbihuKXtmb3IodmFyIHI9W10sdD1hcmd1bWVudHMubGVuZ3RoLGU9MCx1PUEobik7ZTx1O2UrKyl7dmFyIGk9bltlXTtpZighaC5jb250YWlucyhyLGkpKXt2YXIgbztmb3Iobz0xO288dCYmaC5jb250YWlucyhhcmd1bWVudHNbb10saSk7bysrKTtvPT09dCYmci5wdXNoKGkpfX1yZXR1cm4gcn0saC5kaWZmZXJlbmNlPWcoZnVuY3Rpb24obixyKXtyZXR1cm4gcj1NKHIsITAsITApLGguZmlsdGVyKG4sZnVuY3Rpb24obil7cmV0dXJuIWguY29udGFpbnMocixuKX0pfSksaC51bnppcD1mdW5jdGlvbihuKXtmb3IodmFyIHI9biYmaC5tYXgobixBKS5sZW5ndGh8fDAsdD1BcnJheShyKSxlPTA7ZTxyO2UrKyl0W2VdPWgucGx1Y2sobixlKTtyZXR1cm4gdH0saC56aXA9ZyhoLnVuemlwKSxoLm9iamVjdD1mdW5jdGlvbihuLHIpe2Zvcih2YXIgdD17fSxlPTAsdT1BKG4pO2U8dTtlKyspcj90W25bZV1dPXJbZV06dFtuW2VdWzBdXT1uW2VdWzFdO3JldHVybiB0fTt2YXIgRj1mdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24obixyLHQpe3I9ZChyLHQpO2Zvcih2YXIgZT1BKG4pLHU9MDxpPzA6ZS0xOzA8PXUmJnU8ZTt1Kz1pKWlmKHIoblt1XSx1LG4pKXJldHVybiB1O3JldHVybi0xfX07aC5maW5kSW5kZXg9RigxKSxoLmZpbmRMYXN0SW5kZXg9RigtMSksaC5zb3J0ZWRJbmRleD1mdW5jdGlvbihuLHIsdCxlKXtmb3IodmFyIHU9KHQ9ZCh0LGUsMSkpKHIpLGk9MCxvPUEobik7aTxvOyl7dmFyIGE9TWF0aC5mbG9vcigoaStvKS8yKTt0KG5bYV0pPHU/aT1hKzE6bz1hfXJldHVybiBpfTt2YXIgRT1mdW5jdGlvbihpLG8sYSl7cmV0dXJuIGZ1bmN0aW9uKG4scix0KXt2YXIgZT0wLHU9QShuKTtpZigibnVtYmVyIj09dHlwZW9mIHQpMDxpP2U9MDw9dD90Ok1hdGgubWF4KHQrdSxlKTp1PTA8PXQ/TWF0aC5taW4odCsxLHUpOnQrdSsxO2Vsc2UgaWYoYSYmdCYmdSlyZXR1cm4gblt0PWEobixyKV09PT1yP3Q6LTE7aWYociE9cilyZXR1cm4gMDw9KHQ9byhjLmNhbGwobixlLHUpLGguaXNOYU4pKT90K2U6LTE7Zm9yKHQ9MDxpP2U6dS0xOzA8PXQmJnQ8dTt0Kz1pKWlmKG5bdF09PT1yKXJldHVybiB0O3JldHVybi0xfX07aC5pbmRleE9mPUUoMSxoLmZpbmRJbmRleCxoLnNvcnRlZEluZGV4KSxoLmxhc3RJbmRleE9mPUUoLTEsaC5maW5kTGFzdEluZGV4KSxoLnJhbmdlPWZ1bmN0aW9uKG4scix0KXtudWxsPT1yJiYocj1ufHwwLG49MCksdHx8KHQ9cjxuPy0xOjEpO2Zvcih2YXIgZT1NYXRoLm1heChNYXRoLmNlaWwoKHItbikvdCksMCksdT1BcnJheShlKSxpPTA7aTxlO2krKyxuKz10KXVbaV09bjtyZXR1cm4gdX0saC5jaHVuaz1mdW5jdGlvbihuLHIpe2lmKG51bGw9PXJ8fHI8MSlyZXR1cm5bXTtmb3IodmFyIHQ9W10sZT0wLHU9bi5sZW5ndGg7ZTx1Oyl0LnB1c2goYy5jYWxsKG4sZSxlKz1yKSk7cmV0dXJuIHR9O3ZhciBOPWZ1bmN0aW9uKG4scix0LGUsdSl7aWYoIShlIGluc3RhbmNlb2YgcikpcmV0dXJuIG4uYXBwbHkodCx1KTt2YXIgaT1tKG4ucHJvdG90eXBlKSxvPW4uYXBwbHkoaSx1KTtyZXR1cm4gaC5pc09iamVjdChvKT9vOml9O2guYmluZD1nKGZ1bmN0aW9uKHIsdCxlKXtpZighaC5pc0Z1bmN0aW9uKHIpKXRocm93IG5ldyBUeXBlRXJyb3IoIkJpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbiIpO3ZhciB1PWcoZnVuY3Rpb24obil7cmV0dXJuIE4ocix1LHQsdGhpcyxlLmNvbmNhdChuKSl9KTtyZXR1cm4gdX0pLGgucGFydGlhbD1nKGZ1bmN0aW9uKHUsaSl7dmFyIG89aC5wYXJ0aWFsLnBsYWNlaG9sZGVyLGE9ZnVuY3Rpb24oKXtmb3IodmFyIG49MCxyPWkubGVuZ3RoLHQ9QXJyYXkociksZT0wO2U8cjtlKyspdFtlXT1pW2VdPT09bz9hcmd1bWVudHNbbisrXTppW2VdO2Zvcig7bjxhcmd1bWVudHMubGVuZ3RoOyl0LnB1c2goYXJndW1lbnRzW24rK10pO3JldHVybiBOKHUsYSx0aGlzLHRoaXMsdCl9O3JldHVybiBhfSksKGgucGFydGlhbC5wbGFjZWhvbGRlcj1oKS5iaW5kQWxsPWcoZnVuY3Rpb24obixyKXt2YXIgdD0ocj1NKHIsITEsITEpKS5sZW5ndGg7aWYodDwxKXRocm93IG5ldyBFcnJvcigiYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcyIpO2Zvcig7dC0tOyl7dmFyIGU9clt0XTtuW2VdPWguYmluZChuW2VdLG4pfX0pLGgubWVtb2l6ZT1mdW5jdGlvbihlLHUpe3ZhciBpPWZ1bmN0aW9uKG4pe3ZhciByPWkuY2FjaGUsdD0iIisodT91LmFwcGx5KHRoaXMsYXJndW1lbnRzKTpuKTtyZXR1cm4gaihyLHQpfHwoclt0XT1lLmFwcGx5KHRoaXMsYXJndW1lbnRzKSksclt0XX07cmV0dXJuIGkuY2FjaGU9e30saX0saC5kZWxheT1nKGZ1bmN0aW9uKG4scix0KXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBuLmFwcGx5KG51bGwsdCl9LHIpfSksaC5kZWZlcj1oLnBhcnRpYWwoaC5kZWxheSxoLDEpLGgudGhyb3R0bGU9ZnVuY3Rpb24odCxlLHUpe3ZhciBpLG8sYSxjLGw9MDt1fHwodT17fSk7dmFyIGY9ZnVuY3Rpb24oKXtsPSExPT09dS5sZWFkaW5nPzA6aC5ub3coKSxpPW51bGwsYz10LmFwcGx5KG8sYSksaXx8KG89YT1udWxsKX0sbj1mdW5jdGlvbigpe3ZhciBuPWgubm93KCk7bHx8ITEhPT11LmxlYWRpbmd8fChsPW4pO3ZhciByPWUtKG4tbCk7cmV0dXJuIG89dGhpcyxhPWFyZ3VtZW50cyxyPD0wfHxlPHI/KGkmJihjbGVhclRpbWVvdXQoaSksaT1udWxsKSxsPW4sYz10LmFwcGx5KG8sYSksaXx8KG89YT1udWxsKSk6aXx8ITE9PT11LnRyYWlsaW5nfHwoaT1zZXRUaW1lb3V0KGYscikpLGN9O3JldHVybiBuLmNhbmNlbD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChpKSxsPTAsaT1vPWE9bnVsbH0sbn0saC5kZWJvdW5jZT1mdW5jdGlvbih0LGUsdSl7dmFyIGksbyxhPWZ1bmN0aW9uKG4scil7aT1udWxsLHImJihvPXQuYXBwbHkobixyKSl9LG49ZyhmdW5jdGlvbihuKXtpZihpJiZjbGVhclRpbWVvdXQoaSksdSl7dmFyIHI9IWk7aT1zZXRUaW1lb3V0KGEsZSksciYmKG89dC5hcHBseSh0aGlzLG4pKX1lbHNlIGk9aC5kZWxheShhLGUsdGhpcyxuKTtyZXR1cm4gb30pO3JldHVybiBuLmNhbmNlbD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChpKSxpPW51bGx9LG59LGgud3JhcD1mdW5jdGlvbihuLHIpe3JldHVybiBoLnBhcnRpYWwocixuKX0saC5uZWdhdGU9ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIW4uYXBwbHkodGhpcyxhcmd1bWVudHMpfX0saC5jb21wb3NlPWZ1bmN0aW9uKCl7dmFyIHQ9YXJndW1lbnRzLGU9dC5sZW5ndGgtMTtyZXR1cm4gZnVuY3Rpb24oKXtmb3IodmFyIG49ZSxyPXRbZV0uYXBwbHkodGhpcyxhcmd1bWVudHMpO24tLTspcj10W25dLmNhbGwodGhpcyxyKTtyZXR1cm4gcn19LGguYWZ0ZXI9ZnVuY3Rpb24obixyKXtyZXR1cm4gZnVuY3Rpb24oKXtpZigtLW48MSlyZXR1cm4gci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fSxoLmJlZm9yZT1mdW5jdGlvbihuLHIpe3ZhciB0O3JldHVybiBmdW5jdGlvbigpe3JldHVybiAwPC0tbiYmKHQ9ci5hcHBseSh0aGlzLGFyZ3VtZW50cykpLG48PTEmJihyPW51bGwpLHR9fSxoLm9uY2U9aC5wYXJ0aWFsKGguYmVmb3JlLDIpLGgucmVzdEFyZ3VtZW50cz1nO3ZhciBJPSF7dG9TdHJpbmc6bnVsbH0ucHJvcGVydHlJc0VudW1lcmFibGUoInRvU3RyaW5nIiksVD1bInZhbHVlT2YiLCJpc1Byb3RvdHlwZU9mIiwidG9TdHJpbmciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImhhc093blByb3BlcnR5IiwidG9Mb2NhbGVTdHJpbmciXSxCPWZ1bmN0aW9uKG4scil7dmFyIHQ9VC5sZW5ndGgsZT1uLmNvbnN0cnVjdG9yLHU9aC5pc0Z1bmN0aW9uKGUpJiZlLnByb3RvdHlwZXx8byxpPSJjb25zdHJ1Y3RvciI7Zm9yKGoobixpKSYmIWguY29udGFpbnMocixpKSYmci5wdXNoKGkpO3QtLTspKGk9VFt0XSlpbiBuJiZuW2ldIT09dVtpXSYmIWguY29udGFpbnMocixpKSYmci5wdXNoKGkpfTtoLmtleXM9ZnVuY3Rpb24obil7aWYoIWguaXNPYmplY3QobikpcmV0dXJuW107aWYoYSlyZXR1cm4gYShuKTt2YXIgcj1bXTtmb3IodmFyIHQgaW4gbilqKG4sdCkmJnIucHVzaCh0KTtyZXR1cm4gSSYmQihuLHIpLHJ9LGguYWxsS2V5cz1mdW5jdGlvbihuKXtpZighaC5pc09iamVjdChuKSlyZXR1cm5bXTt2YXIgcj1bXTtmb3IodmFyIHQgaW4gbilyLnB1c2godCk7cmV0dXJuIEkmJkIobixyKSxyfSxoLnZhbHVlcz1mdW5jdGlvbihuKXtmb3IodmFyIHI9aC5rZXlzKG4pLHQ9ci5sZW5ndGgsZT1BcnJheSh0KSx1PTA7dTx0O3UrKyllW3VdPW5bclt1XV07cmV0dXJuIGV9LGgubWFwT2JqZWN0PWZ1bmN0aW9uKG4scix0KXtyPWQocix0KTtmb3IodmFyIGU9aC5rZXlzKG4pLHU9ZS5sZW5ndGgsaT17fSxvPTA7bzx1O28rKyl7dmFyIGE9ZVtvXTtpW2FdPXIoblthXSxhLG4pfXJldHVybiBpfSxoLnBhaXJzPWZ1bmN0aW9uKG4pe2Zvcih2YXIgcj1oLmtleXMobiksdD1yLmxlbmd0aCxlPUFycmF5KHQpLHU9MDt1PHQ7dSsrKWVbdV09W3JbdV0sbltyW3VdXV07cmV0dXJuIGV9LGguaW52ZXJ0PWZ1bmN0aW9uKG4pe2Zvcih2YXIgcj17fSx0PWgua2V5cyhuKSxlPTAsdT10Lmxlbmd0aDtlPHU7ZSsrKXJbblt0W2VdXV09dFtlXTtyZXR1cm4gcn0saC5mdW5jdGlvbnM9aC5tZXRob2RzPWZ1bmN0aW9uKG4pe3ZhciByPVtdO2Zvcih2YXIgdCBpbiBuKWguaXNGdW5jdGlvbihuW3RdKSYmci5wdXNoKHQpO3JldHVybiByLnNvcnQoKX07dmFyIFI9ZnVuY3Rpb24oYyxsKXtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDtpZihsJiYobj1PYmplY3QobikpLHI8Mnx8bnVsbD09bilyZXR1cm4gbjtmb3IodmFyIHQ9MTt0PHI7dCsrKWZvcih2YXIgZT1hcmd1bWVudHNbdF0sdT1jKGUpLGk9dS5sZW5ndGgsbz0wO288aTtvKyspe3ZhciBhPXVbb107bCYmdm9pZCAwIT09blthXXx8KG5bYV09ZVthXSl9cmV0dXJuIG59fTtoLmV4dGVuZD1SKGguYWxsS2V5cyksaC5leHRlbmRPd249aC5hc3NpZ249UihoLmtleXMpLGguZmluZEtleT1mdW5jdGlvbihuLHIsdCl7cj1kKHIsdCk7Zm9yKHZhciBlLHU9aC5rZXlzKG4pLGk9MCxvPXUubGVuZ3RoO2k8bztpKyspaWYocihuW2U9dVtpXV0sZSxuKSlyZXR1cm4gZX07dmFyIHEsSyx6PWZ1bmN0aW9uKG4scix0KXtyZXR1cm4gciBpbiB0fTtoLnBpY2s9ZyhmdW5jdGlvbihuLHIpe3ZhciB0PXt9LGU9clswXTtpZihudWxsPT1uKXJldHVybiB0O2guaXNGdW5jdGlvbihlKT8oMTxyLmxlbmd0aCYmKGU9eShlLHJbMV0pKSxyPWguYWxsS2V5cyhuKSk6KGU9eixyPU0ociwhMSwhMSksbj1PYmplY3QobikpO2Zvcih2YXIgdT0wLGk9ci5sZW5ndGg7dTxpO3UrKyl7dmFyIG89clt1XSxhPW5bb107ZShhLG8sbikmJih0W29dPWEpfXJldHVybiB0fSksaC5vbWl0PWcoZnVuY3Rpb24obix0KXt2YXIgcixlPXRbMF07cmV0dXJuIGguaXNGdW5jdGlvbihlKT8oZT1oLm5lZ2F0ZShlKSwxPHQubGVuZ3RoJiYocj10WzFdKSk6KHQ9aC5tYXAoTSh0LCExLCExKSxTdHJpbmcpLGU9ZnVuY3Rpb24obixyKXtyZXR1cm4haC5jb250YWlucyh0LHIpfSksaC5waWNrKG4sZSxyKX0pLGguZGVmYXVsdHM9UihoLmFsbEtleXMsITApLGguY3JlYXRlPWZ1bmN0aW9uKG4scil7dmFyIHQ9bShuKTtyZXR1cm4gciYmaC5leHRlbmRPd24odCxyKSx0fSxoLmNsb25lPWZ1bmN0aW9uKG4pe3JldHVybiBoLmlzT2JqZWN0KG4pP2guaXNBcnJheShuKT9uLnNsaWNlKCk6aC5leHRlbmQoe30sbik6bn0saC50YXA9ZnVuY3Rpb24obixyKXtyZXR1cm4gcihuKSxufSxoLmlzTWF0Y2g9ZnVuY3Rpb24obixyKXt2YXIgdD1oLmtleXMociksZT10Lmxlbmd0aDtpZihudWxsPT1uKXJldHVybiFlO2Zvcih2YXIgdT1PYmplY3QobiksaT0wO2k8ZTtpKyspe3ZhciBvPXRbaV07aWYocltvXSE9PXVbb118fCEobyBpbiB1KSlyZXR1cm4hMX1yZXR1cm4hMH0scT1mdW5jdGlvbihuLHIsdCxlKXtpZihuPT09cilyZXR1cm4gMCE9PW58fDEvbj09MS9yO2lmKG51bGw9PW58fG51bGw9PXIpcmV0dXJuITE7aWYobiE9bilyZXR1cm4gciE9cjt2YXIgdT10eXBlb2YgbjtyZXR1cm4oImZ1bmN0aW9uIj09PXV8fCJvYmplY3QiPT09dXx8Im9iamVjdCI9PXR5cGVvZiByKSYmSyhuLHIsdCxlKX0sSz1mdW5jdGlvbihuLHIsdCxlKXtuIGluc3RhbmNlb2YgaCYmKG49bi5fd3JhcHBlZCksciBpbnN0YW5jZW9mIGgmJihyPXIuX3dyYXBwZWQpO3ZhciB1PXAuY2FsbChuKTtpZih1IT09cC5jYWxsKHIpKXJldHVybiExO3N3aXRjaCh1KXtjYXNlIltvYmplY3QgUmVnRXhwXSI6Y2FzZSJbb2JqZWN0IFN0cmluZ10iOnJldHVybiIiK249PSIiK3I7Y2FzZSJbb2JqZWN0IE51bWJlcl0iOnJldHVybituIT0rbj8rciE9K3I6MD09K24/MS8rbj09MS9yOituPT0rcjtjYXNlIltvYmplY3QgRGF0ZV0iOmNhc2UiW29iamVjdCBCb29sZWFuXSI6cmV0dXJuK249PStyO2Nhc2UiW29iamVjdCBTeW1ib2xdIjpyZXR1cm4gcy52YWx1ZU9mLmNhbGwobik9PT1zLnZhbHVlT2YuY2FsbChyKX12YXIgaT0iW29iamVjdCBBcnJheV0iPT09dTtpZighaSl7aWYoIm9iamVjdCIhPXR5cGVvZiBufHwib2JqZWN0IiE9dHlwZW9mIHIpcmV0dXJuITE7dmFyIG89bi5jb25zdHJ1Y3RvcixhPXIuY29uc3RydWN0b3I7aWYobyE9PWEmJiEoaC5pc0Z1bmN0aW9uKG8pJiZvIGluc3RhbmNlb2YgbyYmaC5pc0Z1bmN0aW9uKGEpJiZhIGluc3RhbmNlb2YgYSkmJiJjb25zdHJ1Y3RvciJpbiBuJiYiY29uc3RydWN0b3IiaW4gcilyZXR1cm4hMX1lPWV8fFtdO2Zvcih2YXIgYz0odD10fHxbXSkubGVuZ3RoO2MtLTspaWYodFtjXT09PW4pcmV0dXJuIGVbY109PT1yO2lmKHQucHVzaChuKSxlLnB1c2gociksaSl7aWYoKGM9bi5sZW5ndGgpIT09ci5sZW5ndGgpcmV0dXJuITE7Zm9yKDtjLS07KWlmKCFxKG5bY10scltjXSx0LGUpKXJldHVybiExfWVsc2V7dmFyIGwsZj1oLmtleXMobik7aWYoYz1mLmxlbmd0aCxoLmtleXMocikubGVuZ3RoIT09YylyZXR1cm4hMTtmb3IoO2MtLTspaWYobD1mW2NdLCFqKHIsbCl8fCFxKG5bbF0scltsXSx0LGUpKXJldHVybiExfXJldHVybiB0LnBvcCgpLGUucG9wKCksITB9LGguaXNFcXVhbD1mdW5jdGlvbihuLHIpe3JldHVybiBxKG4scil9LGguaXNFbXB0eT1mdW5jdGlvbihuKXtyZXR1cm4gbnVsbD09bnx8KHcobikmJihoLmlzQXJyYXkobil8fGguaXNTdHJpbmcobil8fGguaXNBcmd1bWVudHMobikpPzA9PT1uLmxlbmd0aDowPT09aC5rZXlzKG4pLmxlbmd0aCl9LGguaXNFbGVtZW50PWZ1bmN0aW9uKG4pe3JldHVybiEoIW58fDEhPT1uLm5vZGVUeXBlKX0saC5pc0FycmF5PXR8fGZ1bmN0aW9uKG4pe3JldHVybiJbb2JqZWN0IEFycmF5XSI9PT1wLmNhbGwobil9LGguaXNPYmplY3Q9ZnVuY3Rpb24obil7dmFyIHI9dHlwZW9mIG47cmV0dXJuImZ1bmN0aW9uIj09PXJ8fCJvYmplY3QiPT09ciYmISFufSxoLmVhY2goWyJBcmd1bWVudHMiLCJGdW5jdGlvbiIsIlN0cmluZyIsIk51bWJlciIsIkRhdGUiLCJSZWdFeHAiLCJFcnJvciIsIlN5bWJvbCIsIk1hcCIsIldlYWtNYXAiLCJTZXQiLCJXZWFrU2V0Il0sZnVuY3Rpb24ocil7aFsiaXMiK3JdPWZ1bmN0aW9uKG4pe3JldHVybiBwLmNhbGwobik9PT0iW29iamVjdCAiK3IrIl0ifX0pLGguaXNBcmd1bWVudHMoYXJndW1lbnRzKXx8KGguaXNBcmd1bWVudHM9ZnVuY3Rpb24obil7cmV0dXJuIGoobiwiY2FsbGVlIil9KTt2YXIgRD1uLmRvY3VtZW50JiZuLmRvY3VtZW50LmNoaWxkTm9kZXM7ImZ1bmN0aW9uIiE9dHlwZW9mLy4vJiYib2JqZWN0IiE9dHlwZW9mIEludDhBcnJheSYmImZ1bmN0aW9uIiE9dHlwZW9mIEQmJihoLmlzRnVuY3Rpb249ZnVuY3Rpb24obil7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIG58fCExfSksaC5pc0Zpbml0ZT1mdW5jdGlvbihuKXtyZXR1cm4haC5pc1N5bWJvbChuKSYmaXNGaW5pdGUobikmJiFpc05hTihwYXJzZUZsb2F0KG4pKX0saC5pc05hTj1mdW5jdGlvbihuKXtyZXR1cm4gaC5pc051bWJlcihuKSYmaXNOYU4obil9LGguaXNCb29sZWFuPWZ1bmN0aW9uKG4pe3JldHVybiEwPT09bnx8ITE9PT1ufHwiW29iamVjdCBCb29sZWFuXSI9PT1wLmNhbGwobil9LGguaXNOdWxsPWZ1bmN0aW9uKG4pe3JldHVybiBudWxsPT09bn0saC5pc1VuZGVmaW5lZD1mdW5jdGlvbihuKXtyZXR1cm4gdm9pZCAwPT09bn0saC5oYXM9ZnVuY3Rpb24obixyKXtpZighaC5pc0FycmF5KHIpKXJldHVybiBqKG4scik7Zm9yKHZhciB0PXIubGVuZ3RoLGU9MDtlPHQ7ZSsrKXt2YXIgdT1yW2VdO2lmKG51bGw9PW58fCFpLmNhbGwobix1KSlyZXR1cm4hMTtuPW5bdV19cmV0dXJuISF0fSxoLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gbi5fPXIsdGhpc30saC5pZGVudGl0eT1mdW5jdGlvbihuKXtyZXR1cm4gbn0saC5jb25zdGFudD1mdW5jdGlvbihuKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbn19LGgubm9vcD1mdW5jdGlvbigpe30saC5wcm9wZXJ0eT1mdW5jdGlvbihyKXtyZXR1cm4gaC5pc0FycmF5KHIpP2Z1bmN0aW9uKG4pe3JldHVybiB4KG4scil9OmIocil9LGgucHJvcGVydHlPZj1mdW5jdGlvbihyKXtyZXR1cm4gbnVsbD09cj9mdW5jdGlvbigpe306ZnVuY3Rpb24obil7cmV0dXJuIGguaXNBcnJheShuKT94KHIsbik6cltuXX19LGgubWF0Y2hlcj1oLm1hdGNoZXM9ZnVuY3Rpb24ocil7cmV0dXJuIHI9aC5leHRlbmRPd24oe30sciksZnVuY3Rpb24obil7cmV0dXJuIGguaXNNYXRjaChuLHIpfX0saC50aW1lcz1mdW5jdGlvbihuLHIsdCl7dmFyIGU9QXJyYXkoTWF0aC5tYXgoMCxuKSk7cj15KHIsdCwxKTtmb3IodmFyIHU9MDt1PG47dSsrKWVbdV09cih1KTtyZXR1cm4gZX0saC5yYW5kb209ZnVuY3Rpb24obixyKXtyZXR1cm4gbnVsbD09ciYmKHI9bixuPTApLG4rTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpKihyLW4rMSkpfSxoLm5vdz1EYXRlLm5vd3x8ZnVuY3Rpb24oKXtyZXR1cm4obmV3IERhdGUpLmdldFRpbWUoKX07dmFyIEw9eyImIjoiJmFtcDsiLCI8IjoiJmx0OyIsIj4iOiImZ3Q7IiwnIic6IiZxdW90OyIsIiciOiImI3gyNzsiLCJgIjoiJiN4NjA7In0sUD1oLmludmVydChMKSxXPWZ1bmN0aW9uKHIpe3ZhciB0PWZ1bmN0aW9uKG4pe3JldHVybiByW25dfSxuPSIoPzoiK2gua2V5cyhyKS5qb2luKCJ8IikrIikiLGU9UmVnRXhwKG4pLHU9UmVnRXhwKG4sImciKTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIG49bnVsbD09bj8iIjoiIituLGUudGVzdChuKT9uLnJlcGxhY2UodSx0KTpufX07aC5lc2NhcGU9VyhMKSxoLnVuZXNjYXBlPVcoUCksaC5yZXN1bHQ9ZnVuY3Rpb24obixyLHQpe2guaXNBcnJheShyKXx8KHI9W3JdKTt2YXIgZT1yLmxlbmd0aDtpZighZSlyZXR1cm4gaC5pc0Z1bmN0aW9uKHQpP3QuY2FsbChuKTp0O2Zvcih2YXIgdT0wO3U8ZTt1Kyspe3ZhciBpPW51bGw9PW4/dm9pZCAwOm5bclt1XV07dm9pZCAwPT09aSYmKGk9dCx1PWUpLG49aC5pc0Z1bmN0aW9uKGkpP2kuY2FsbChuKTppfXJldHVybiBufTt2YXIgQz0wO2gudW5pcXVlSWQ9ZnVuY3Rpb24obil7dmFyIHI9KytDKyIiO3JldHVybiBuP24rcjpyfSxoLnRlbXBsYXRlU2V0dGluZ3M9e2V2YWx1YXRlOi88JShbXHNcU10rPyklPi9nLGludGVycG9sYXRlOi88JT0oW1xzXFNdKz8pJT4vZyxlc2NhcGU6LzwlLShbXHNcU10rPyklPi9nfTt2YXIgSj0vKC4pXi8sVT17IiciOiInIiwiXFwiOiJcXCIsIlxyIjoiciIsIlxuIjoibiIsIlx1MjAyOCI6InUyMDI4IiwiXHUyMDI5IjoidTIwMjkifSxWPS9cXHwnfFxyfFxufFx1MjAyOHxcdTIwMjkvZywkPWZ1bmN0aW9uKG4pe3JldHVybiJcXCIrVVtuXX07aC50ZW1wbGF0ZT1mdW5jdGlvbihpLG4scil7IW4mJnImJihuPXIpLG49aC5kZWZhdWx0cyh7fSxuLGgudGVtcGxhdGVTZXR0aW5ncyk7dmFyIHQsZT1SZWdFeHAoWyhuLmVzY2FwZXx8Sikuc291cmNlLChuLmludGVycG9sYXRlfHxKKS5zb3VyY2UsKG4uZXZhbHVhdGV8fEopLnNvdXJjZV0uam9pbigifCIpKyJ8JCIsImciKSxvPTAsYT0iX19wKz0nIjtpLnJlcGxhY2UoZSxmdW5jdGlvbihuLHIsdCxlLHUpe3JldHVybiBhKz1pLnNsaWNlKG8sdSkucmVwbGFjZShWLCQpLG89dStuLmxlbmd0aCxyP2ErPSInK1xuKChfX3Q9KCIrcisiKSk9PW51bGw/Jyc6Xy5lc2NhcGUoX190KSkrXG4nIjp0P2ErPSInK1xuKChfX3Q9KCIrdCsiKSk9PW51bGw/Jyc6X190KStcbiciOmUmJihhKz0iJztcbiIrZSsiXG5fX3ArPSciKSxufSksYSs9Iic7XG4iLG4udmFyaWFibGV8fChhPSJ3aXRoKG9ianx8e30pe1xuIithKyJ9XG4iKSxhPSJ2YXIgX190LF9fcD0nJyxfX2o9QXJyYXkucHJvdG90eXBlLmpvaW4sIisicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcbiIrYSsicmV0dXJuIF9fcDtcbiI7dHJ5e3Q9bmV3IEZ1bmN0aW9uKG4udmFyaWFibGV8fCJvYmoiLCJfIixhKX1jYXRjaChuKXt0aHJvdyBuLnNvdXJjZT1hLG59dmFyIHU9ZnVuY3Rpb24obil7cmV0dXJuIHQuY2FsbCh0aGlzLG4saCl9LGM9bi52YXJpYWJsZXx8Im9iaiI7cmV0dXJuIHUuc291cmNlPSJmdW5jdGlvbigiK2MrIil7XG4iK2ErIn0iLHV9LGguY2hhaW49ZnVuY3Rpb24obil7dmFyIHI9aChuKTtyZXR1cm4gci5fY2hhaW49ITAscn07dmFyIEc9ZnVuY3Rpb24obixyKXtyZXR1cm4gbi5fY2hhaW4/aChyKS5jaGFpbigpOnJ9O2gubWl4aW49ZnVuY3Rpb24odCl7cmV0dXJuIGguZWFjaChoLmZ1bmN0aW9ucyh0KSxmdW5jdGlvbihuKXt2YXIgcj1oW25dPXRbbl07aC5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXt2YXIgbj1bdGhpcy5fd3JhcHBlZF07cmV0dXJuIHUuYXBwbHkobixhcmd1bWVudHMpLEcodGhpcyxyLmFwcGx5KGgsbikpfX0pLGh9LGgubWl4aW4oaCksaC5lYWNoKFsicG9wIiwicHVzaCIsInJldmVyc2UiLCJzaGlmdCIsInNvcnQiLCJzcGxpY2UiLCJ1bnNoaWZ0Il0sZnVuY3Rpb24ocil7dmFyIHQ9ZVtyXTtoLnByb3RvdHlwZVtyXT1mdW5jdGlvbigpe3ZhciBuPXRoaXMuX3dyYXBwZWQ7cmV0dXJuIHQuYXBwbHkobixhcmd1bWVudHMpLCJzaGlmdCIhPT1yJiYic3BsaWNlIiE9PXJ8fDAhPT1uLmxlbmd0aHx8ZGVsZXRlIG5bMF0sRyh0aGlzLG4pfX0pLGguZWFjaChbImNvbmNhdCIsImpvaW4iLCJzbGljZSJdLGZ1bmN0aW9uKG4pe3ZhciByPWVbbl07aC5wcm90b3R5cGVbbl09ZnVuY3Rpb24oKXtyZXR1cm4gRyh0aGlzLHIuYXBwbHkodGhpcy5fd3JhcHBlZCxhcmd1bWVudHMpKX19KSxoLnByb3RvdHlwZS52YWx1ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLl93cmFwcGVkfSxoLnByb3RvdHlwZS52YWx1ZU9mPWgucHJvdG90eXBlLnRvSlNPTj1oLnByb3RvdHlwZS52YWx1ZSxoLnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBTdHJpbmcodGhpcy5fd3JhcHBlZCl9LCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQmJmRlZmluZSgidW5kZXJzY29yZSIsW10sZnVuY3Rpb24oKXtyZXR1cm4gaH0pfSgpOw==","root/third-party-libs/underscore.string.min.js":"LyoKKiBVbmRlcnNjb3JlLnN0cmluZwoqIChjKSAyMDEwIEVzYS1NYXR0aSBTdXVyb25lbiA8ZXNhLW1hdHRpIGFldCBzdXVyb25lbiBkb3Qgb3JnPgoqIFVuZGVyc2NvcmUuc3RyaW5nIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UuCiogRG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2VwZWxpL3VuZGVyc2NvcmUuc3RyaW5nCiogU29tZSBjb2RlIGlzIGJvcnJvd2VkIGZyb20gTW9vVG9vbHMgYW5kIEFsZXhhbmRydSBNYXJhc3RlYW51LgoqIFZlcnNpb24gJzMuMy40JwoqIEBwcmVzZXJ2ZQoqLwooZnVuY3Rpb24oZil7aWYodHlwZW9mIGV4cG9ydHM9PT0ib2JqZWN0IiYmdHlwZW9mIG1vZHVsZSE9PSJ1bmRlZmluZWQiKXttb2R1bGUuZXhwb3J0cz1mKCl9ZWxzZSBpZih0eXBlb2YgZGVmaW5lPT09ImZ1bmN0aW9uIiYmZGVmaW5lLmFtZCl7ZGVmaW5lKFtdLGYpfWVsc2V7dmFyIGc7aWYodHlwZW9mIHdpbmRvdyE9PSJ1bmRlZmluZWQiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT0idW5kZWZpbmVkIil7Zz1nbG9iYWx9ZWxzZSBpZih0eXBlb2Ygc2VsZiE9PSJ1bmRlZmluZWQiKXtnPXNlbGZ9ZWxzZXtnPXRoaXN9Zy5zPWYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrbysiJyIpO3Rocm93IGYuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT0iZnVuY3Rpb24iJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KHsxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgdHJpbT1yZXF1aXJlKCIuL3RyaW0iKTt2YXIgZGVjYXA9cmVxdWlyZSgiLi9kZWNhcGl0YWxpemUiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBjYW1lbGl6ZShzdHIsZGVjYXBpdGFsaXplKXtzdHI9dHJpbShzdHIpLnJlcGxhY2UoL1stX1xzXSsoLik/L2csZnVuY3Rpb24obWF0Y2gsYyl7cmV0dXJuIGM/Yy50b1VwcGVyQ2FzZSgpOiIifSk7aWYoZGVjYXBpdGFsaXplPT09dHJ1ZSl7cmV0dXJuIGRlY2FwKHN0cil9ZWxzZXtyZXR1cm4gc3RyfX19LHsiLi9kZWNhcGl0YWxpemUiOjEwLCIuL3RyaW0iOjY1fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyLGxvd2VyY2FzZVJlc3Qpe3N0cj1tYWtlU3RyaW5nKHN0cik7dmFyIHJlbWFpbmluZ0NoYXJzPSFsb3dlcmNhc2VSZXN0P3N0ci5zbGljZSgxKTpzdHIuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtyZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3JlbWFpbmluZ0NoYXJzfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBjaGFycyhzdHIpe3JldHVybiBtYWtlU3RyaW5nKHN0cikuc3BsaXQoIiIpfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGNob3Aoc3RyLHN0ZXApe2lmKHN0cj09bnVsbClyZXR1cm5bXTtzdHI9U3RyaW5nKHN0cik7c3RlcD1+fnN0ZXA7cmV0dXJuIHN0ZXA+MD9zdHIubWF0Y2gobmV3IFJlZ0V4cCgiLnsxLCIrc3RlcCsifSIsImciKSk6W3N0cl19fSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIGNhcGl0YWxpemU9cmVxdWlyZSgiLi9jYXBpdGFsaXplIik7dmFyIGNhbWVsaXplPXJlcXVpcmUoIi4vY2FtZWxpemUiKTt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gY2xhc3NpZnkoc3RyKXtzdHI9bWFrZVN0cmluZyhzdHIpO3JldHVybiBjYXBpdGFsaXplKGNhbWVsaXplKHN0ci5yZXBsYWNlKC9bXFdfXS9nLCIgIikpLnJlcGxhY2UoL1xzL2csIiIpKX19LHsiLi9jYW1lbGl6ZSI6MSwiLi9jYXBpdGFsaXplIjoyLCIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciB0cmltPXJlcXVpcmUoIi4vdHJpbSIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGNsZWFuKHN0cil7cmV0dXJuIHRyaW0oc3RyKS5yZXBsYWNlKC9cc1xzKy9nLCIgIil9fSx7Ii4vdHJpbSI6NjV9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIGZyb209IsSFw6DDocOkw6LDo8Olw6bEg8SHxI3EicSZw6jDqcOrw6rEncSlw6zDrcOvw67EtcWCxL7FhMWIw7LDs8O2xZHDtMO1w7DDuMWbyJnFn8WhxZ3FpcibxaPFrcO5w7rDvMWxw7vDscO/w73Dp8W8xbrFviIsdG89ImFhYWFhYWFhYWNjY2VlZWVlZ2hpaWlpamxsbm5vb29vb29vb3Nzc3NzdHR0dXV1dXV1bnl5Y3p6eiI7ZnJvbSs9ZnJvbS50b1VwcGVyQ2FzZSgpO3RvKz10by50b1VwcGVyQ2FzZSgpO3RvPXRvLnNwbGl0KCIiKTtmcm9tKz0iw58iO3RvLnB1c2goInNzIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gY2xlYW5EaWFjcml0aWNzKHN0cil7cmV0dXJuIG1ha2VTdHJpbmcoc3RyKS5yZXBsYWNlKC8uezF9L2csZnVuY3Rpb24oYyl7dmFyIGluZGV4PWZyb20uaW5kZXhPZihjKTtyZXR1cm4gaW5kZXg9PT0tMT9jOnRvW2luZGV4XX0pfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihzdHIsc3Vic3RyKXtzdHI9bWFrZVN0cmluZyhzdHIpO3N1YnN0cj1tYWtlU3RyaW5nKHN1YnN0cik7aWYoc3RyLmxlbmd0aD09PTB8fHN1YnN0ci5sZW5ndGg9PT0wKXJldHVybiAwO3JldHVybiBzdHIuc3BsaXQoc3Vic3RyKS5sZW5ndGgtMX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgdHJpbT1yZXF1aXJlKCIuL3RyaW0iKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBkYXNoZXJpemUoc3RyKXtyZXR1cm4gdHJpbShzdHIpLnJlcGxhY2UoLyhbQS1aXSkvZywiLSQxIikucmVwbGFjZSgvWy1fXHNdKy9nLCItIikudG9Mb3dlckNhc2UoKX19LHsiLi90cmltIjo2NX1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gZGVjYXBpdGFsaXplKHN0cil7c3RyPW1ha2VTdHJpbmcoc3RyKTtyZXR1cm4gc3RyLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK3N0ci5zbGljZSgxKX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSwxMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO2Z1bmN0aW9uIGdldEluZGVudChzdHIpe3ZhciBtYXRjaGVzPXN0ci5tYXRjaCgvXltcc1xcdF0qL2dtKTt2YXIgaW5kZW50PW1hdGNoZXNbMF0ubGVuZ3RoO2Zvcih2YXIgaT0xO2k8bWF0Y2hlcy5sZW5ndGg7aSsrKXtpbmRlbnQ9TWF0aC5taW4obWF0Y2hlc1tpXS5sZW5ndGgsaW5kZW50KX1yZXR1cm4gaW5kZW50fW1vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGRlZGVudChzdHIscGF0dGVybil7c3RyPW1ha2VTdHJpbmcoc3RyKTt2YXIgaW5kZW50PWdldEluZGVudChzdHIpO3ZhciByZWc7aWYoaW5kZW50PT09MClyZXR1cm4gc3RyO2lmKHR5cGVvZiBwYXR0ZXJuPT09InN0cmluZyIpe3JlZz1uZXcgUmVnRXhwKCJeIitwYXR0ZXJuLCJnbSIpfWVsc2V7cmVnPW5ldyBSZWdFeHAoIl5bIFxcdF17IitpbmRlbnQrIn0iLCJnbSIpfXJldHVybiBzdHIucmVwbGFjZShyZWcsIiIpfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIHRvUG9zaXRpdmU9cmVxdWlyZSgiLi9oZWxwZXIvdG9Qb3NpdGl2ZSIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGVuZHNXaXRoKHN0cixlbmRzLHBvc2l0aW9uKXtzdHI9bWFrZVN0cmluZyhzdHIpO2VuZHM9IiIrZW5kcztpZih0eXBlb2YgcG9zaXRpb249PSJ1bmRlZmluZWQiKXtwb3NpdGlvbj1zdHIubGVuZ3RoLWVuZHMubGVuZ3RofWVsc2V7cG9zaXRpb249TWF0aC5taW4odG9Qb3NpdGl2ZShwb3NpdGlvbiksc3RyLmxlbmd0aCktZW5kcy5sZW5ndGh9cmV0dXJuIHBvc2l0aW9uPj0wJiZzdHIuaW5kZXhPZihlbmRzLHBvc2l0aW9uKT09PXBvc2l0aW9ufX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMCwiLi9oZWxwZXIvdG9Qb3NpdGl2ZSI6MjJ9XSwxMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO3ZhciBlc2NhcGVDaGFycz1yZXF1aXJlKCIuL2hlbHBlci9lc2NhcGVDaGFycyIpO3ZhciByZWdleFN0cmluZz0iWyI7Zm9yKHZhciBrZXkgaW4gZXNjYXBlQ2hhcnMpe3JlZ2V4U3RyaW5nKz1rZXl9cmVnZXhTdHJpbmcrPSJdIjt2YXIgcmVnZXg9bmV3IFJlZ0V4cChyZWdleFN0cmluZywiZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGVzY2FwZUhUTUwoc3RyKXtyZXR1cm4gbWFrZVN0cmluZyhzdHIpLnJlcGxhY2UocmVnZXgsZnVuY3Rpb24obSl7cmV0dXJuIiYiK2VzY2FwZUNoYXJzW21dKyI7In0pfX0seyIuL2hlbHBlci9lc2NhcGVDaGFycyI6MTcsIi4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sMTQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uKCl7dmFyIHJlc3VsdD17fTtmb3IodmFyIHByb3AgaW4gdGhpcyl7aWYoIXRoaXMuaGFzT3duUHJvcGVydHkocHJvcCl8fHByb3AubWF0Y2goL14oPzppbmNsdWRlfGNvbnRhaW5zfHJldmVyc2V8am9pbnxtYXB8d3JhcCkkLykpY29udGludWU7cmVzdWx0W3Byb3BdPXRoaXNbcHJvcF19cmV0dXJuIHJlc3VsdH19LHt9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gYWRqYWNlbnQoc3RyLGRpcmVjdGlvbil7c3RyPW1ha2VTdHJpbmcoc3RyKTtpZihzdHIubGVuZ3RoPT09MCl7cmV0dXJuIiJ9cmV0dXJuIHN0ci5zbGljZSgwLC0xKStTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KHN0ci5sZW5ndGgtMSkrZGlyZWN0aW9uKX19LHsiLi9tYWtlU3RyaW5nIjoyMH1dLDE2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgZXNjYXBlUmVnRXhwPXJlcXVpcmUoIi4vZXNjYXBlUmVnRXhwIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gZGVmYXVsdFRvV2hpdGVTcGFjZShjaGFyYWN0ZXJzKXtpZihjaGFyYWN0ZXJzPT1udWxsKXJldHVybiJcXHMiO2Vsc2UgaWYoY2hhcmFjdGVycy5zb3VyY2UpcmV0dXJuIGNoYXJhY3RlcnMuc291cmNlO2Vsc2UgcmV0dXJuIlsiK2VzY2FwZVJlZ0V4cChjaGFyYWN0ZXJzKSsiXSJ9fSx7Ii4vZXNjYXBlUmVnRXhwIjoxOH1dLDE3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgZXNjYXBlQ2hhcnM9eyLCoiI6ImNlbnQiLCLCoyI6InBvdW5kIiwiwqUiOiJ5ZW4iLCLigqwiOiJldXJvIiwiwqkiOiJjb3B5Iiwiwq4iOiJyZWciLCI8IjoibHQiLCI+IjoiZ3QiLCciJzoicXVvdCIsIiYiOiJhbXAiLCInIjoiIzM5In07bW9kdWxlLmV4cG9ydHM9ZXNjYXBlQ2hhcnN9LHt9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cil7cmV0dXJuIG1ha2VTdHJpbmcoc3RyKS5yZXBsYWNlKC8oWy4qKz9ePSE6JHt9KCl8W1xdXC9cXF0pL2csIlxcJDEiKX19LHsiLi9tYWtlU3RyaW5nIjoyMH1dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgaHRtbEVudGl0aWVzPXtuYnNwOiIgIixjZW50OiLCoiIscG91bmQ6IsKjIix5ZW46IsKlIixldXJvOiLigqwiLGNvcHk6IsKpIixyZWc6IsKuIixsdDoiPCIsZ3Q6Ij4iLHF1b3Q6JyInLGFtcDoiJiIsYXBvczoiJyJ9O21vZHVsZS5leHBvcnRzPWh0bWxFbnRpdGllc30se31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBtYWtlU3RyaW5nKG9iamVjdCl7aWYob2JqZWN0PT1udWxsKXJldHVybiIiO3JldHVybiIiK29iamVjdH19LHt9XSwyMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc3RyUmVwZWF0KHN0cixxdHkpe2lmKHF0eTwxKXJldHVybiIiO3ZhciByZXN1bHQ9IiI7d2hpbGUocXR5PjApe2lmKHF0eSYxKXJlc3VsdCs9c3RyO3F0eT4+PTEsc3RyKz1zdHJ9cmV0dXJuIHJlc3VsdH19LHt9XSwyMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdG9Qb3NpdGl2ZShudW1iZXIpe3JldHVybiBudW1iZXI8MD8wOitudW1iZXJ8fDB9fSx7fV0sMjM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBjYXBpdGFsaXplPXJlcXVpcmUoIi4vY2FwaXRhbGl6ZSIpO3ZhciB1bmRlcnNjb3JlZD1yZXF1aXJlKCIuL3VuZGVyc2NvcmVkIik7dmFyIHRyaW09cmVxdWlyZSgiLi90cmltIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gaHVtYW5pemUoc3RyKXtyZXR1cm4gY2FwaXRhbGl6ZSh0cmltKHVuZGVyc2NvcmVkKHN0cikucmVwbGFjZSgvX2lkJC8sIiIpLnJlcGxhY2UoL18vZywiICIpKSl9fSx7Ii4vY2FwaXRhbGl6ZSI6MiwiLi90cmltIjo2NSwiLi91bmRlcnNjb3JlZCI6Njd9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGluY2x1ZGUoc3RyLG5lZWRsZSl7aWYobmVlZGxlPT09IiIpcmV0dXJuIHRydWU7cmV0dXJuIG1ha2VTdHJpbmcoc3RyKS5pbmRleE9mKG5lZWRsZSkhPT0tMX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7LyoKKiBVbmRlcnNjb3JlLnN0cmluZwoqIChjKSAyMDEwIEVzYS1NYXR0aSBTdXVyb25lbiA8ZXNhLW1hdHRpIGFldCBzdXVyb25lbiBkb3Qgb3JnPgoqIFVuZGVyc2NvcmUuc3RyaW5nIGlzIGZyZWVseSBkaXN0cmlidXRhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgTUlUIGxpY2Vuc2UuCiogRG9jdW1lbnRhdGlvbjogaHR0cHM6Ly9naXRodWIuY29tL2VwZWxpL3VuZGVyc2NvcmUuc3RyaW5nCiogU29tZSBjb2RlIGlzIGJvcnJvd2VkIGZyb20gTW9vVG9vbHMgYW5kIEFsZXhhbmRydSBNYXJhc3RlYW51LgoqIFZlcnNpb24gJzMuMy40JwoqIEBwcmVzZXJ2ZQoqLwoidXNlIHN0cmljdCI7ZnVuY3Rpb24gcyh2YWx1ZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcykpcmV0dXJuIG5ldyBzKHZhbHVlKTt0aGlzLl93cmFwcGVkPXZhbHVlfXMuVkVSU0lPTj0iMy4zLjQiO3MuaXNCbGFuaz1yZXF1aXJlKCIuL2lzQmxhbmsiKTtzLnN0cmlwVGFncz1yZXF1aXJlKCIuL3N0cmlwVGFncyIpO3MuY2FwaXRhbGl6ZT1yZXF1aXJlKCIuL2NhcGl0YWxpemUiKTtzLmRlY2FwaXRhbGl6ZT1yZXF1aXJlKCIuL2RlY2FwaXRhbGl6ZSIpO3MuY2hvcD1yZXF1aXJlKCIuL2Nob3AiKTtzLnRyaW09cmVxdWlyZSgiLi90cmltIik7cy5jbGVhbj1yZXF1aXJlKCIuL2NsZWFuIik7cy5jbGVhbkRpYWNyaXRpY3M9cmVxdWlyZSgiLi9jbGVhbkRpYWNyaXRpY3MiKTtzLmNvdW50PXJlcXVpcmUoIi4vY291bnQiKTtzLmNoYXJzPXJlcXVpcmUoIi4vY2hhcnMiKTtzLnN3YXBDYXNlPXJlcXVpcmUoIi4vc3dhcENhc2UiKTtzLmVzY2FwZUhUTUw9cmVxdWlyZSgiLi9lc2NhcGVIVE1MIik7cy51bmVzY2FwZUhUTUw9cmVxdWlyZSgiLi91bmVzY2FwZUhUTUwiKTtzLnNwbGljZT1yZXF1aXJlKCIuL3NwbGljZSIpO3MuaW5zZXJ0PXJlcXVpcmUoIi4vaW5zZXJ0Iik7cy5yZXBsYWNlQWxsPXJlcXVpcmUoIi4vcmVwbGFjZUFsbCIpO3MuaW5jbHVkZT1yZXF1aXJlKCIuL2luY2x1ZGUiKTtzLmpvaW49cmVxdWlyZSgiLi9qb2luIik7cy5saW5lcz1yZXF1aXJlKCIuL2xpbmVzIik7cy5kZWRlbnQ9cmVxdWlyZSgiLi9kZWRlbnQiKTtzLnJldmVyc2U9cmVxdWlyZSgiLi9yZXZlcnNlIik7cy5zdGFydHNXaXRoPXJlcXVpcmUoIi4vc3RhcnRzV2l0aCIpO3MuZW5kc1dpdGg9cmVxdWlyZSgiLi9lbmRzV2l0aCIpO3MucHJlZD1yZXF1aXJlKCIuL3ByZWQiKTtzLnN1Y2M9cmVxdWlyZSgiLi9zdWNjIik7cy50aXRsZWl6ZT1yZXF1aXJlKCIuL3RpdGxlaXplIik7cy5jYW1lbGl6ZT1yZXF1aXJlKCIuL2NhbWVsaXplIik7cy51bmRlcnNjb3JlZD1yZXF1aXJlKCIuL3VuZGVyc2NvcmVkIik7cy5kYXNoZXJpemU9cmVxdWlyZSgiLi9kYXNoZXJpemUiKTtzLmNsYXNzaWZ5PXJlcXVpcmUoIi4vY2xhc3NpZnkiKTtzLmh1bWFuaXplPXJlcXVpcmUoIi4vaHVtYW5pemUiKTtzLmx0cmltPXJlcXVpcmUoIi4vbHRyaW0iKTtzLnJ0cmltPXJlcXVpcmUoIi4vcnRyaW0iKTtzLnRydW5jYXRlPXJlcXVpcmUoIi4vdHJ1bmNhdGUiKTtzLnBydW5lPXJlcXVpcmUoIi4vcHJ1bmUiKTtzLndvcmRzPXJlcXVpcmUoIi4vd29yZHMiKTtzLnBhZD1yZXF1aXJlKCIuL3BhZCIpO3MubHBhZD1yZXF1aXJlKCIuL2xwYWQiKTtzLnJwYWQ9cmVxdWlyZSgiLi9ycGFkIik7cy5scnBhZD1yZXF1aXJlKCIuL2xycGFkIik7cy5zcHJpbnRmPXJlcXVpcmUoIi4vc3ByaW50ZiIpO3MudnNwcmludGY9cmVxdWlyZSgiLi92c3ByaW50ZiIpO3MudG9OdW1iZXI9cmVxdWlyZSgiLi90b051bWJlciIpO3MubnVtYmVyRm9ybWF0PXJlcXVpcmUoIi4vbnVtYmVyRm9ybWF0Iik7cy5zdHJSaWdodD1yZXF1aXJlKCIuL3N0clJpZ2h0Iik7cy5zdHJSaWdodEJhY2s9cmVxdWlyZSgiLi9zdHJSaWdodEJhY2siKTtzLnN0ckxlZnQ9cmVxdWlyZSgiLi9zdHJMZWZ0Iik7cy5zdHJMZWZ0QmFjaz1yZXF1aXJlKCIuL3N0ckxlZnRCYWNrIik7cy50b1NlbnRlbmNlPXJlcXVpcmUoIi4vdG9TZW50ZW5jZSIpO3MudG9TZW50ZW5jZVNlcmlhbD1yZXF1aXJlKCIuL3RvU2VudGVuY2VTZXJpYWwiKTtzLnNsdWdpZnk9cmVxdWlyZSgiLi9zbHVnaWZ5Iik7cy5zdXJyb3VuZD1yZXF1aXJlKCIuL3N1cnJvdW5kIik7cy5xdW90ZT1yZXF1aXJlKCIuL3F1b3RlIik7cy51bnF1b3RlPXJlcXVpcmUoIi4vdW5xdW90ZSIpO3MucmVwZWF0PXJlcXVpcmUoIi4vcmVwZWF0Iik7cy5uYXR1cmFsQ21wPXJlcXVpcmUoIi4vbmF0dXJhbENtcCIpO3MubGV2ZW5zaHRlaW49cmVxdWlyZSgiLi9sZXZlbnNodGVpbiIpO3MudG9Cb29sZWFuPXJlcXVpcmUoIi4vdG9Cb29sZWFuIik7cy5leHBvcnRzPXJlcXVpcmUoIi4vZXhwb3J0cyIpO3MuZXNjYXBlUmVnRXhwPXJlcXVpcmUoIi4vaGVscGVyL2VzY2FwZVJlZ0V4cCIpO3Mud3JhcD1yZXF1aXJlKCIuL3dyYXAiKTtzLm1hcD1yZXF1aXJlKCIuL21hcCIpO3Muc3RyaXA9cy50cmltO3MubHN0cmlwPXMubHRyaW07cy5yc3RyaXA9cy5ydHJpbTtzLmNlbnRlcj1zLmxycGFkO3Mucmp1c3Q9cy5scGFkO3MubGp1c3Q9cy5ycGFkO3MuY29udGFpbnM9cy5pbmNsdWRlO3MucT1zLnF1b3RlO3MudG9Cb29sPXMudG9Cb29sZWFuO3MuY2FtZWxjYXNlPXMuY2FtZWxpemU7cy5tYXBDaGFycz1zLm1hcDtzLnByb3RvdHlwZT17dmFsdWU6ZnVuY3Rpb24gdmFsdWUoKXtyZXR1cm4gdGhpcy5fd3JhcHBlZH19O2Z1bmN0aW9uIGZuMm1ldGhvZChrZXksZm4pe2lmKHR5cGVvZiBmbiE9PSJmdW5jdGlvbiIpcmV0dXJuO3MucHJvdG90eXBlW2tleV09ZnVuY3Rpb24oKXt2YXIgYXJncz1bdGhpcy5fd3JhcHBlZF0uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO3ZhciByZXM9Zm4uYXBwbHkobnVsbCxhcmdzKTtyZXR1cm4gdHlwZW9mIHJlcz09PSJzdHJpbmciP25ldyBzKHJlcyk6cmVzfX1mb3IodmFyIGtleSBpbiBzKWZuMm1ldGhvZChrZXksc1trZXldKTtmbjJtZXRob2QoInRhcCIsZnVuY3Rpb24gdGFwKHN0cmluZyxmbil7cmV0dXJuIGZuKHN0cmluZyl9KTtmdW5jdGlvbiBwcm90b3R5cGUybWV0aG9kKG1ldGhvZE5hbWUpe2ZuMm1ldGhvZChtZXRob2ROYW1lLGZ1bmN0aW9uKGNvbnRleHQpe3ZhciBhcmdzPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywxKTtyZXR1cm4gU3RyaW5nLnByb3RvdHlwZVttZXRob2ROYW1lXS5hcHBseShjb250ZXh0LGFyZ3MpfSl9dmFyIHByb3RvdHlwZU1ldGhvZHM9WyJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwic3BsaXQiLCJyZXBsYWNlIiwic2xpY2UiLCJzdWJzdHJpbmciLCJzdWJzdHIiLCJjb25jYXQiXTtmb3IodmFyIG1ldGhvZCBpbiBwcm90b3R5cGVNZXRob2RzKXByb3RvdHlwZTJtZXRob2QocHJvdG90eXBlTWV0aG9kc1ttZXRob2RdKTttb2R1bGUuZXhwb3J0cz1zfSx7Ii4vY2FtZWxpemUiOjEsIi4vY2FwaXRhbGl6ZSI6MiwiLi9jaGFycyI6MywiLi9jaG9wIjo0LCIuL2NsYXNzaWZ5Ijo1LCIuL2NsZWFuIjo2LCIuL2NsZWFuRGlhY3JpdGljcyI6NywiLi9jb3VudCI6OCwiLi9kYXNoZXJpemUiOjksIi4vZGVjYXBpdGFsaXplIjoxMCwiLi9kZWRlbnQiOjExLCIuL2VuZHNXaXRoIjoxMiwiLi9lc2NhcGVIVE1MIjoxMywiLi9leHBvcnRzIjoxNCwiLi9oZWxwZXIvZXNjYXBlUmVnRXhwIjoxOCwiLi9odW1hbml6ZSI6MjMsIi4vaW5jbHVkZSI6MjQsIi4vaW5zZXJ0IjoyNiwiLi9pc0JsYW5rIjoyNywiLi9qb2luIjoyOCwiLi9sZXZlbnNodGVpbiI6MjksIi4vbGluZXMiOjMwLCIuL2xwYWQiOjMxLCIuL2xycGFkIjozMiwiLi9sdHJpbSI6MzMsIi4vbWFwIjozNCwiLi9uYXR1cmFsQ21wIjozNSwiLi9udW1iZXJGb3JtYXQiOjM4LCIuL3BhZCI6MzksIi4vcHJlZCI6NDAsIi4vcHJ1bmUiOjQxLCIuL3F1b3RlIjo0MiwiLi9yZXBlYXQiOjQzLCIuL3JlcGxhY2VBbGwiOjQ0LCIuL3JldmVyc2UiOjQ1LCIuL3JwYWQiOjQ2LCIuL3J0cmltIjo0NywiLi9zbHVnaWZ5Ijo0OCwiLi9zcGxpY2UiOjQ5LCIuL3NwcmludGYiOjUwLCIuL3N0YXJ0c1dpdGgiOjUxLCIuL3N0ckxlZnQiOjUyLCIuL3N0ckxlZnRCYWNrIjo1MywiLi9zdHJSaWdodCI6NTQsIi4vc3RyUmlnaHRCYWNrIjo1NSwiLi9zdHJpcFRhZ3MiOjU2LCIuL3N1Y2MiOjU3LCIuL3N1cnJvdW5kIjo1OCwiLi9zd2FwQ2FzZSI6NTksIi4vdGl0bGVpemUiOjYwLCIuL3RvQm9vbGVhbiI6NjEsIi4vdG9OdW1iZXIiOjYyLCIuL3RvU2VudGVuY2UiOjYzLCIuL3RvU2VudGVuY2VTZXJpYWwiOjY0LCIuL3RyaW0iOjY1LCIuL3RydW5jYXRlIjo2NiwiLi91bmRlcnNjb3JlZCI6NjcsIi4vdW5lc2NhcGVIVE1MIjo2OCwiLi91bnF1b3RlIjo2OSwiLi92c3ByaW50ZiI6NzAsIi4vd29yZHMiOjcxLCIuL3dyYXAiOjcyfV0sMjY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBzcGxpY2U9cmVxdWlyZSgiLi9zcGxpY2UiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpbnNlcnQoc3RyLGksc3Vic3RyKXtyZXR1cm4gc3BsaWNlKHN0cixpLDAsc3Vic3RyKX19LHsiLi9zcGxpY2UiOjQ5fV0sMjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBpc0JsYW5rKHN0cil7cmV0dXJuL15ccyokLy50ZXN0KG1ha2VTdHJpbmcoc3RyKSl9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sMjg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTt2YXIgc2xpY2U9W10uc2xpY2U7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gam9pbigpe3ZhciBhcmdzPXNsaWNlLmNhbGwoYXJndW1lbnRzKSxzZXBhcmF0b3I9YXJncy5zaGlmdCgpO3JldHVybiBhcmdzLmpvaW4obWFrZVN0cmluZyhzZXBhcmF0b3IpKX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSwyOTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGxldmVuc2h0ZWluKHN0cjEsc3RyMil7InVzZSBzdHJpY3QiO3N0cjE9bWFrZVN0cmluZyhzdHIxKTtzdHIyPW1ha2VTdHJpbmcoc3RyMik7aWYoc3RyMT09PXN0cjIpcmV0dXJuIDA7aWYoIXN0cjF8fCFzdHIyKXJldHVybiBNYXRoLm1heChzdHIxLmxlbmd0aCxzdHIyLmxlbmd0aCk7dmFyIHByZXZSb3c9bmV3IEFycmF5KHN0cjIubGVuZ3RoKzEpO2Zvcih2YXIgaT0wO2k8cHJldlJvdy5sZW5ndGg7KytpKXtwcmV2Um93W2ldPWl9Zm9yKGk9MDtpPHN0cjEubGVuZ3RoOysraSl7dmFyIG5leHRDb2w9aSsxO2Zvcih2YXIgaj0wO2o8c3RyMi5sZW5ndGg7KytqKXt2YXIgY3VyQ29sPW5leHRDb2w7bmV4dENvbD1wcmV2Um93W2pdKyhzdHIxLmNoYXJBdChpKT09PXN0cjIuY2hhckF0KGopPzA6MSk7dmFyIHRtcD1jdXJDb2wrMTtpZihuZXh0Q29sPnRtcCl7bmV4dENvbD10bXB9dG1wPXByZXZSb3dbaisxXSsxO2lmKG5leHRDb2w+dG1wKXtuZXh0Q29sPXRtcH1wcmV2Um93W2pdPWN1ckNvbH1wcmV2Um93W2pdPW5leHRDb2x9cmV0dXJuIG5leHRDb2x9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGxpbmVzKHN0cil7aWYoc3RyPT1udWxsKXJldHVybltdO3JldHVybiBTdHJpbmcoc3RyKS5zcGxpdCgvXHJcbj98XG4vKX19LHt9XSwzMTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHBhZD1yZXF1aXJlKCIuL3BhZCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGxwYWQoc3RyLGxlbmd0aCxwYWRTdHIpe3JldHVybiBwYWQoc3RyLGxlbmd0aCxwYWRTdHIpfX0seyIuL3BhZCI6Mzl9XSwzMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHBhZD1yZXF1aXJlKCIuL3BhZCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGxycGFkKHN0cixsZW5ndGgscGFkU3RyKXtyZXR1cm4gcGFkKHN0cixsZW5ndGgscGFkU3RyLCJib3RoIil9fSx7Ii4vcGFkIjozOX1dLDMzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIGRlZmF1bHRUb1doaXRlU3BhY2U9cmVxdWlyZSgiLi9oZWxwZXIvZGVmYXVsdFRvV2hpdGVTcGFjZSIpO3ZhciBuYXRpdmVUcmltTGVmdD1TdHJpbmcucHJvdG90eXBlLnRyaW1MZWZ0O21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIGx0cmltKHN0cixjaGFyYWN0ZXJzKXtzdHI9bWFrZVN0cmluZyhzdHIpO2lmKCFjaGFyYWN0ZXJzJiZuYXRpdmVUcmltTGVmdClyZXR1cm4gbmF0aXZlVHJpbUxlZnQuY2FsbChzdHIpO2NoYXJhY3RlcnM9ZGVmYXVsdFRvV2hpdGVTcGFjZShjaGFyYWN0ZXJzKTtyZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cCgiXiIrY2hhcmFjdGVycysiKyIpLCIiKX19LHsiLi9oZWxwZXIvZGVmYXVsdFRvV2hpdGVTcGFjZSI6MTYsIi4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sMzQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbihzdHIsY2FsbGJhY2spe3N0cj1tYWtlU3RyaW5nKHN0cik7aWYoc3RyLmxlbmd0aD09PTB8fHR5cGVvZiBjYWxsYmFjayE9PSJmdW5jdGlvbiIpcmV0dXJuIHN0cjtyZXR1cm4gc3RyLnJlcGxhY2UoLy4vZyxjYWxsYmFjayl9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIG5hdHVyYWxDbXAoc3RyMSxzdHIyKXtpZihzdHIxPT1zdHIyKXJldHVybiAwO2lmKCFzdHIxKXJldHVybi0xO2lmKCFzdHIyKXJldHVybiAxO3ZhciBjbXBSZWdleD0vKFwuXGQrfFxkK3xcRCspL2csdG9rZW5zMT1TdHJpbmcoc3RyMSkubWF0Y2goY21wUmVnZXgpLHRva2VuczI9U3RyaW5nKHN0cjIpLm1hdGNoKGNtcFJlZ2V4KSxjb3VudD1NYXRoLm1pbih0b2tlbnMxLmxlbmd0aCx0b2tlbnMyLmxlbmd0aCk7Zm9yKHZhciBpPTA7aTxjb3VudDtpKyspe3ZhciBhPXRva2VuczFbaV0sYj10b2tlbnMyW2ldO2lmKGEhPT1iKXt2YXIgbnVtMT0rYTt2YXIgbnVtMj0rYjtpZihudW0xPT09bnVtMSYmbnVtMj09PW51bTIpe3JldHVybiBudW0xPm51bTI/MTotMX1yZXR1cm4gYTxiPy0xOjF9fWlmKHRva2VuczEubGVuZ3RoIT10b2tlbnMyLmxlbmd0aClyZXR1cm4gdG9rZW5zMS5sZW5ndGgtdG9rZW5zMi5sZW5ndGg7cmV0dXJuIHN0cjE8c3RyMj8tMToxfX0se31dLDM2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXsoZnVuY3Rpb24od2luZG93KXt2YXIgcmU9e25vdF9zdHJpbmc6L1tec10vLG51bWJlcjovW2RpZWZnXS8sanNvbjovW2pdLyxub3RfanNvbjovW15qXS8sdGV4dDovXlteXHgyNV0rLyxtb2R1bG86L15ceDI1ezJ9LyxwbGFjZWhvbGRlcjovXlx4MjUoPzooWzEtOV1cZCopXCR8XCgoW15cKV0rKVwpKT8oXCspPygwfCdbXiRdKT8oLSk/KFxkKyk/KD86XC4oXGQrKSk/KFtiLWdpam9zdXhYXSkvLGtleTovXihbYS16X11bYS16X1xkXSopL2ksa2V5X2FjY2VzczovXlwuKFthLXpfXVthLXpfXGRdKikvaSxpbmRleF9hY2Nlc3M6L15cWyhcZCspXF0vLHNpZ246L15bXCtcLV0vfTtmdW5jdGlvbiBzcHJpbnRmKCl7dmFyIGtleT1hcmd1bWVudHNbMF0sY2FjaGU9c3ByaW50Zi5jYWNoZTtpZighKGNhY2hlW2tleV0mJmNhY2hlLmhhc093blByb3BlcnR5KGtleSkpKXtjYWNoZVtrZXldPXNwcmludGYucGFyc2Uoa2V5KX1yZXR1cm4gc3ByaW50Zi5mb3JtYXQuY2FsbChudWxsLGNhY2hlW2tleV0sYXJndW1lbnRzKX1zcHJpbnRmLmZvcm1hdD1mdW5jdGlvbihwYXJzZV90cmVlLGFyZ3Ype3ZhciBjdXJzb3I9MSx0cmVlX2xlbmd0aD1wYXJzZV90cmVlLmxlbmd0aCxub2RlX3R5cGU9IiIsYXJnLG91dHB1dD1bXSxpLGssbWF0Y2gscGFkLHBhZF9jaGFyYWN0ZXIscGFkX2xlbmd0aCxpc19wb3NpdGl2ZT10cnVlLHNpZ249IiI7Zm9yKGk9MDtpPHRyZWVfbGVuZ3RoO2krKyl7bm9kZV90eXBlPWdldF90eXBlKHBhcnNlX3RyZWVbaV0pO2lmKG5vZGVfdHlwZT09PSJzdHJpbmciKXtvdXRwdXRbb3V0cHV0Lmxlbmd0aF09cGFyc2VfdHJlZVtpXX1lbHNlIGlmKG5vZGVfdHlwZT09PSJhcnJheSIpe21hdGNoPXBhcnNlX3RyZWVbaV07aWYobWF0Y2hbMl0pe2FyZz1hcmd2W2N1cnNvcl07Zm9yKGs9MDtrPG1hdGNoWzJdLmxlbmd0aDtrKyspe2lmKCFhcmcuaGFzT3duUHJvcGVydHkobWF0Y2hbMl1ba10pKXt0aHJvdyBuZXcgRXJyb3Ioc3ByaW50ZigiW3NwcmludGZdIHByb3BlcnR5ICclcycgZG9lcyBub3QgZXhpc3QiLG1hdGNoWzJdW2tdKSl9YXJnPWFyZ1ttYXRjaFsyXVtrXV19fWVsc2UgaWYobWF0Y2hbMV0pe2FyZz1hcmd2W21hdGNoWzFdXX1lbHNle2FyZz1hcmd2W2N1cnNvcisrXX1pZihnZXRfdHlwZShhcmcpPT0iZnVuY3Rpb24iKXthcmc9YXJnKCl9aWYocmUubm90X3N0cmluZy50ZXN0KG1hdGNoWzhdKSYmcmUubm90X2pzb24udGVzdChtYXRjaFs4XSkmJihnZXRfdHlwZShhcmcpIT0ibnVtYmVyIiYmaXNOYU4oYXJnKSkpe3Rocm93IG5ldyBUeXBlRXJyb3Ioc3ByaW50ZigiW3NwcmludGZdIGV4cGVjdGluZyBudW1iZXIgYnV0IGZvdW5kICVzIixnZXRfdHlwZShhcmcpKSl9aWYocmUubnVtYmVyLnRlc3QobWF0Y2hbOF0pKXtpc19wb3NpdGl2ZT1hcmc+PTB9c3dpdGNoKG1hdGNoWzhdKXtjYXNlImIiOmFyZz1hcmcudG9TdHJpbmcoMik7YnJlYWs7Y2FzZSJjIjphcmc9U3RyaW5nLmZyb21DaGFyQ29kZShhcmcpO2JyZWFrO2Nhc2UiZCI6Y2FzZSJpIjphcmc9cGFyc2VJbnQoYXJnLDEwKTticmVhaztjYXNlImoiOmFyZz1KU09OLnN0cmluZ2lmeShhcmcsbnVsbCxtYXRjaFs2XT9wYXJzZUludChtYXRjaFs2XSk6MCk7YnJlYWs7Y2FzZSJlIjphcmc9bWF0Y2hbN10/YXJnLnRvRXhwb25lbnRpYWwobWF0Y2hbN10pOmFyZy50b0V4cG9uZW50aWFsKCk7YnJlYWs7Y2FzZSJmIjphcmc9bWF0Y2hbN10/cGFyc2VGbG9hdChhcmcpLnRvRml4ZWQobWF0Y2hbN10pOnBhcnNlRmxvYXQoYXJnKTticmVhaztjYXNlImciOmFyZz1tYXRjaFs3XT9wYXJzZUZsb2F0KGFyZykudG9QcmVjaXNpb24obWF0Y2hbN10pOnBhcnNlRmxvYXQoYXJnKTticmVhaztjYXNlIm8iOmFyZz1hcmcudG9TdHJpbmcoOCk7YnJlYWs7Y2FzZSJzIjphcmc9KGFyZz1TdHJpbmcoYXJnKSkmJm1hdGNoWzddP2FyZy5zdWJzdHJpbmcoMCxtYXRjaFs3XSk6YXJnO2JyZWFrO2Nhc2UidSI6YXJnPWFyZz4+PjA7YnJlYWs7Y2FzZSJ4Ijphcmc9YXJnLnRvU3RyaW5nKDE2KTticmVhaztjYXNlIlgiOmFyZz1hcmcudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7YnJlYWt9aWYocmUuanNvbi50ZXN0KG1hdGNoWzhdKSl7b3V0cHV0W291dHB1dC5sZW5ndGhdPWFyZ31lbHNle2lmKHJlLm51bWJlci50ZXN0KG1hdGNoWzhdKSYmKCFpc19wb3NpdGl2ZXx8bWF0Y2hbM10pKXtzaWduPWlzX3Bvc2l0aXZlPyIrIjoiLSI7YXJnPWFyZy50b1N0cmluZygpLnJlcGxhY2UocmUuc2lnbiwiIil9ZWxzZXtzaWduPSIifXBhZF9jaGFyYWN0ZXI9bWF0Y2hbNF0/bWF0Y2hbNF09PT0iMCI/IjAiOm1hdGNoWzRdLmNoYXJBdCgxKToiICI7cGFkX2xlbmd0aD1tYXRjaFs2XS0oc2lnbithcmcpLmxlbmd0aDtwYWQ9bWF0Y2hbNl0/cGFkX2xlbmd0aD4wP3N0cl9yZXBlYXQocGFkX2NoYXJhY3RlcixwYWRfbGVuZ3RoKToiIjoiIjtvdXRwdXRbb3V0cHV0Lmxlbmd0aF09bWF0Y2hbNV0/c2lnbithcmcrcGFkOnBhZF9jaGFyYWN0ZXI9PT0iMCI/c2lnbitwYWQrYXJnOnBhZCtzaWduK2FyZ319fXJldHVybiBvdXRwdXQuam9pbigiIil9O3NwcmludGYuY2FjaGU9e307c3ByaW50Zi5wYXJzZT1mdW5jdGlvbihmbXQpe3ZhciBfZm10PWZtdCxtYXRjaD1bXSxwYXJzZV90cmVlPVtdLGFyZ19uYW1lcz0wO3doaWxlKF9mbXQpe2lmKChtYXRjaD1yZS50ZXh0LmV4ZWMoX2ZtdCkpIT09bnVsbCl7cGFyc2VfdHJlZVtwYXJzZV90cmVlLmxlbmd0aF09bWF0Y2hbMF19ZWxzZSBpZigobWF0Y2g9cmUubW9kdWxvLmV4ZWMoX2ZtdCkpIT09bnVsbCl7cGFyc2VfdHJlZVtwYXJzZV90cmVlLmxlbmd0aF09IiUifWVsc2UgaWYoKG1hdGNoPXJlLnBsYWNlaG9sZGVyLmV4ZWMoX2ZtdCkpIT09bnVsbCl7aWYobWF0Y2hbMl0pe2FyZ19uYW1lc3w9MTt2YXIgZmllbGRfbGlzdD1bXSxyZXBsYWNlbWVudF9maWVsZD1tYXRjaFsyXSxmaWVsZF9tYXRjaD1bXTtpZigoZmllbGRfbWF0Y2g9cmUua2V5LmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSE9PW51bGwpe2ZpZWxkX2xpc3RbZmllbGRfbGlzdC5sZW5ndGhdPWZpZWxkX21hdGNoWzFdO3doaWxlKChyZXBsYWNlbWVudF9maWVsZD1yZXBsYWNlbWVudF9maWVsZC5zdWJzdHJpbmcoZmllbGRfbWF0Y2hbMF0ubGVuZ3RoKSkhPT0iIil7aWYoKGZpZWxkX21hdGNoPXJlLmtleV9hY2Nlc3MuZXhlYyhyZXBsYWNlbWVudF9maWVsZCkpIT09bnVsbCl7ZmllbGRfbGlzdFtmaWVsZF9saXN0Lmxlbmd0aF09ZmllbGRfbWF0Y2hbMV19ZWxzZSBpZigoZmllbGRfbWF0Y2g9cmUuaW5kZXhfYWNjZXNzLmV4ZWMocmVwbGFjZW1lbnRfZmllbGQpKSE9PW51bGwpe2ZpZWxkX2xpc3RbZmllbGRfbGlzdC5sZW5ndGhdPWZpZWxkX21hdGNoWzFdfWVsc2V7dGhyb3cgbmV3IFN5bnRheEVycm9yKCJbc3ByaW50Zl0gZmFpbGVkIHRvIHBhcnNlIG5hbWVkIGFyZ3VtZW50IGtleSIpfX19ZWxzZXt0aHJvdyBuZXcgU3ludGF4RXJyb3IoIltzcHJpbnRmXSBmYWlsZWQgdG8gcGFyc2UgbmFtZWQgYXJndW1lbnQga2V5Iil9bWF0Y2hbMl09ZmllbGRfbGlzdH1lbHNle2FyZ19uYW1lc3w9Mn1pZihhcmdfbmFtZXM9PT0zKXt0aHJvdyBuZXcgRXJyb3IoIltzcHJpbnRmXSBtaXhpbmcgcG9zaXRpb25hbCBhbmQgbmFtZWQgcGxhY2Vob2xkZXJzIGlzIG5vdCAoeWV0KSBzdXBwb3J0ZWQiKX1wYXJzZV90cmVlW3BhcnNlX3RyZWUubGVuZ3RoXT1tYXRjaH1lbHNle3Rocm93IG5ldyBTeW50YXhFcnJvcigiW3NwcmludGZdIHVuZXhwZWN0ZWQgcGxhY2Vob2xkZXIiKX1fZm10PV9mbXQuc3Vic3RyaW5nKG1hdGNoWzBdLmxlbmd0aCl9cmV0dXJuIHBhcnNlX3RyZWV9O3ZhciB2c3ByaW50Zj1mdW5jdGlvbihmbXQsYXJndixfYXJndil7X2FyZ3Y9KGFyZ3Z8fFtdKS5zbGljZSgwKTtfYXJndi5zcGxpY2UoMCwwLGZtdCk7cmV0dXJuIHNwcmludGYuYXBwbHkobnVsbCxfYXJndil9O2Z1bmN0aW9uIGdldF90eXBlKHZhcmlhYmxlKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhcmlhYmxlKS5zbGljZSg4LC0xKS50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIHN0cl9yZXBlYXQoaW5wdXQsbXVsdGlwbGllcil7cmV0dXJuIEFycmF5KG11bHRpcGxpZXIrMSkuam9pbihpbnB1dCl9aWYodHlwZW9mIGV4cG9ydHMhPT0idW5kZWZpbmVkIil7ZXhwb3J0cy5zcHJpbnRmPXNwcmludGY7ZXhwb3J0cy52c3ByaW50Zj12c3ByaW50Zn1lbHNle3dpbmRvdy5zcHJpbnRmPXNwcmludGY7d2luZG93LnZzcHJpbnRmPXZzcHJpbnRmO2lmKHR5cGVvZiBkZWZpbmU9PT0iZnVuY3Rpb24iJiZkZWZpbmUuYW1kKXtkZWZpbmUoZnVuY3Rpb24oKXtyZXR1cm57c3ByaW50ZjpzcHJpbnRmLHZzcHJpbnRmOnZzcHJpbnRmfX0pfX19KSh0eXBlb2Ygd2luZG93PT09InVuZGVmaW5lZCI/dGhpczp3aW5kb3cpfSx7fV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpeyhmdW5jdGlvbihnbG9iYWwpe21vZHVsZS5leHBvcnRzPWRlcHJlY2F0ZTtmdW5jdGlvbiBkZXByZWNhdGUoZm4sbXNnKXtpZihjb25maWcoIm5vRGVwcmVjYXRpb24iKSl7cmV0dXJuIGZufXZhciB3YXJuZWQ9ZmFsc2U7ZnVuY3Rpb24gZGVwcmVjYXRlZCgpe2lmKCF3YXJuZWQpe2lmKGNvbmZpZygidGhyb3dEZXByZWNhdGlvbiIpKXt0aHJvdyBuZXcgRXJyb3IobXNnKX1lbHNlIGlmKGNvbmZpZygidHJhY2VEZXByZWNhdGlvbiIpKXtjb25zb2xlLnRyYWNlKG1zZyl9ZWxzZXtjb25zb2xlLndhcm4obXNnKX13YXJuZWQ9dHJ1ZX1yZXR1cm4gZm4uYXBwbHkodGhpcyxhcmd1bWVudHMpfXJldHVybiBkZXByZWNhdGVkfWZ1bmN0aW9uIGNvbmZpZyhuYW1lKXt0cnl7aWYoIWdsb2JhbC5sb2NhbFN0b3JhZ2UpcmV0dXJuIGZhbHNlfWNhdGNoKF8pe3JldHVybiBmYWxzZX12YXIgdmFsPWdsb2JhbC5sb2NhbFN0b3JhZ2VbbmFtZV07aWYobnVsbD09dmFsKXJldHVybiBmYWxzZTtyZXR1cm4gU3RyaW5nKHZhbCkudG9Mb3dlckNhc2UoKT09PSJ0cnVlIn19KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCE9PSJ1bmRlZmluZWQiP2dsb2JhbDp0eXBlb2Ygc2VsZiE9PSJ1bmRlZmluZWQiP3NlbGY6dHlwZW9mIHdpbmRvdyE9PSJ1bmRlZmluZWQiP3dpbmRvdzp7fSl9LHt9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gbnVtYmVyRm9ybWF0KG51bWJlcixkZWMsZHNlcCx0c2VwKXtpZihpc05hTihudW1iZXIpfHxudW1iZXI9PW51bGwpcmV0dXJuIiI7bnVtYmVyPW51bWJlci50b0ZpeGVkKH5+ZGVjKTt0c2VwPXR5cGVvZiB0c2VwPT0ic3RyaW5nIj90c2VwOiIsIjt2YXIgcGFydHM9bnVtYmVyLnNwbGl0KCIuIiksZm51bXM9cGFydHNbMF0sZGVjaW1hbHM9cGFydHNbMV0/KGRzZXB8fCIuIikrcGFydHNbMV06IiI7cmV0dXJuIGZudW1zLnJlcGxhY2UoLyhcZCkoPz0oPzpcZHszfSkrJCkvZywiJDEiK3RzZXApK2RlY2ltYWxzfX0se31dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIHN0clJlcGVhdD1yZXF1aXJlKCIuL2hlbHBlci9zdHJSZXBlYXQiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBwYWQoc3RyLGxlbmd0aCxwYWRTdHIsdHlwZSl7c3RyPW1ha2VTdHJpbmcoc3RyKTtsZW5ndGg9fn5sZW5ndGg7dmFyIHBhZGxlbj0wO2lmKCFwYWRTdHIpcGFkU3RyPSIgIjtlbHNlIGlmKHBhZFN0ci5sZW5ndGg+MSlwYWRTdHI9cGFkU3RyLmNoYXJBdCgwKTtzd2l0Y2godHlwZSl7Y2FzZSJyaWdodCI6cGFkbGVuPWxlbmd0aC1zdHIubGVuZ3RoO3JldHVybiBzdHIrc3RyUmVwZWF0KHBhZFN0cixwYWRsZW4pO2Nhc2UiYm90aCI6cGFkbGVuPWxlbmd0aC1zdHIubGVuZ3RoO3JldHVybiBzdHJSZXBlYXQocGFkU3RyLE1hdGguY2VpbChwYWRsZW4vMikpK3N0citzdHJSZXBlYXQocGFkU3RyLE1hdGguZmxvb3IocGFkbGVuLzIpKTtkZWZhdWx0OnBhZGxlbj1sZW5ndGgtc3RyLmxlbmd0aDtyZXR1cm4gc3RyUmVwZWF0KHBhZFN0cixwYWRsZW4pK3N0cn19fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwLCIuL2hlbHBlci9zdHJSZXBlYXQiOjIxfV0sNDA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBhZGphY2VudD1yZXF1aXJlKCIuL2hlbHBlci9hZGphY2VudCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHN1Y2Moc3RyKXtyZXR1cm4gYWRqYWNlbnQoc3RyLC0xKX19LHsiLi9oZWxwZXIvYWRqYWNlbnQiOjE1fV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTt2YXIgcnRyaW09cmVxdWlyZSgiLi9ydHJpbSIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHBydW5lKHN0cixsZW5ndGgscHJ1bmVTdHIpe3N0cj1tYWtlU3RyaW5nKHN0cik7bGVuZ3RoPX5+bGVuZ3RoO3BydW5lU3RyPXBydW5lU3RyIT1udWxsP1N0cmluZyhwcnVuZVN0cik6Ii4uLiI7aWYoc3RyLmxlbmd0aDw9bGVuZ3RoKXJldHVybiBzdHI7dmFyIHRtcGw9ZnVuY3Rpb24oYyl7cmV0dXJuIGMudG9VcHBlckNhc2UoKSE9PWMudG9Mb3dlckNhc2UoKT8iQSI6IiAifSx0ZW1wbGF0ZT1zdHIuc2xpY2UoMCxsZW5ndGgrMSkucmVwbGFjZSgvLig/PVxXKlx3KiQpL2csdG1wbCk7aWYodGVtcGxhdGUuc2xpY2UodGVtcGxhdGUubGVuZ3RoLTIpLm1hdGNoKC9cd1x3LykpdGVtcGxhdGU9dGVtcGxhdGUucmVwbGFjZSgvXHMqXFMrJC8sIiIpO2Vsc2UgdGVtcGxhdGU9cnRyaW0odGVtcGxhdGUuc2xpY2UoMCx0ZW1wbGF0ZS5sZW5ndGgtMSkpO3JldHVybih0ZW1wbGF0ZStwcnVuZVN0cikubGVuZ3RoPnN0ci5sZW5ndGg/c3RyOnN0ci5zbGljZSgwLHRlbXBsYXRlLmxlbmd0aCkrcHJ1bmVTdHJ9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwLCIuL3J0cmltIjo0N31dLDQyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgc3Vycm91bmQ9cmVxdWlyZSgiLi9zdXJyb3VuZCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHF1b3RlKHN0cixxdW90ZUNoYXIpe3JldHVybiBzdXJyb3VuZChzdHIscXVvdGVDaGFyfHwnIicpfX0seyIuL3N1cnJvdW5kIjo1OH1dLDQzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIHN0clJlcGVhdD1yZXF1aXJlKCIuL2hlbHBlci9zdHJSZXBlYXQiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiByZXBlYXQoc3RyLHF0eSxzZXBhcmF0b3Ipe3N0cj1tYWtlU3RyaW5nKHN0cik7cXR5PX5+cXR5O2lmKHNlcGFyYXRvcj09bnVsbClyZXR1cm4gc3RyUmVwZWF0KHN0cixxdHkpO2Zvcih2YXIgcmVwZWF0PVtdO3F0eT4wO3JlcGVhdFstLXF0eV09c3RyKXt9cmV0dXJuIHJlcGVhdC5qb2luKHNlcGFyYXRvcil9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwLCIuL2hlbHBlci9zdHJSZXBlYXQiOjIxfV0sNDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiByZXBsYWNlQWxsKHN0cixmaW5kLHJlcGxhY2UsaWdub3JlY2FzZSl7dmFyIGZsYWdzPWlnbm9yZWNhc2U9PT10cnVlPyJnaSI6ImciO3ZhciByZWc9bmV3IFJlZ0V4cChmaW5kLGZsYWdzKTtyZXR1cm4gbWFrZVN0cmluZyhzdHIpLnJlcGxhY2UocmVnLHJlcGxhY2UpfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgY2hhcnM9cmVxdWlyZSgiLi9jaGFycyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHJldmVyc2Uoc3RyKXtyZXR1cm4gY2hhcnMoc3RyKS5yZXZlcnNlKCkuam9pbigiIil9fSx7Ii4vY2hhcnMiOjN9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHBhZD1yZXF1aXJlKCIuL3BhZCIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHJwYWQoc3RyLGxlbmd0aCxwYWRTdHIpe3JldHVybiBwYWQoc3RyLGxlbmd0aCxwYWRTdHIsInJpZ2h0Iil9fSx7Ii4vcGFkIjozOX1dLDQ3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIGRlZmF1bHRUb1doaXRlU3BhY2U9cmVxdWlyZSgiLi9oZWxwZXIvZGVmYXVsdFRvV2hpdGVTcGFjZSIpO3ZhciBuYXRpdmVUcmltUmlnaHQ9U3RyaW5nLnByb3RvdHlwZS50cmltUmlnaHQ7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gcnRyaW0oc3RyLGNoYXJhY3RlcnMpe3N0cj1tYWtlU3RyaW5nKHN0cik7aWYoIWNoYXJhY3RlcnMmJm5hdGl2ZVRyaW1SaWdodClyZXR1cm4gbmF0aXZlVHJpbVJpZ2h0LmNhbGwoc3RyKTtjaGFyYWN0ZXJzPWRlZmF1bHRUb1doaXRlU3BhY2UoY2hhcmFjdGVycyk7cmV0dXJuIHN0ci5yZXBsYWNlKG5ldyBSZWdFeHAoY2hhcmFjdGVycysiKyQiKSwiIil9fSx7Ii4vaGVscGVyL2RlZmF1bHRUb1doaXRlU3BhY2UiOjE2LCIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDQ4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgdHJpbT1yZXF1aXJlKCIuL3RyaW0iKTt2YXIgZGFzaGVyaXplPXJlcXVpcmUoIi4vZGFzaGVyaXplIik7dmFyIGNsZWFuRGlhY3JpdGljcz1yZXF1aXJlKCIuL2NsZWFuRGlhY3JpdGljcyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHNsdWdpZnkoc3RyKXtyZXR1cm4gdHJpbShkYXNoZXJpemUoY2xlYW5EaWFjcml0aWNzKHN0cikucmVwbGFjZSgvW15cd1xzLV0vZywiLSIpLnRvTG93ZXJDYXNlKCkpLCItIil9fSx7Ii4vY2xlYW5EaWFjcml0aWNzIjo3LCIuL2Rhc2hlcml6ZSI6OSwiLi90cmltIjo2NX1dLDQ5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgY2hhcnM9cmVxdWlyZSgiLi9jaGFycyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHNwbGljZShzdHIsaSxob3dtYW55LHN1YnN0cil7dmFyIGFycj1jaGFycyhzdHIpO2Fyci5zcGxpY2Uofn5pLH5+aG93bWFueSxzdWJzdHIpO3JldHVybiBhcnIuam9pbigiIil9fSx7Ii4vY2hhcnMiOjN9XSw1MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIGRlcHJlY2F0ZT1yZXF1aXJlKCJ1dGlsLWRlcHJlY2F0ZSIpO21vZHVsZS5leHBvcnRzPWRlcHJlY2F0ZShyZXF1aXJlKCJzcHJpbnRmLWpzIikuc3ByaW50Ziwic3ByaW50ZigpIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLCB1c2UgdGhlIHNwcmludGYtanMgcGFja2FnZSBpbnN0ZWFkLiIpfSx7InNwcmludGYtanMiOjM2LCJ1dGlsLWRlcHJlY2F0ZSI6Mzd9XSw1MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO3ZhciB0b1Bvc2l0aXZlPXJlcXVpcmUoIi4vaGVscGVyL3RvUG9zaXRpdmUiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBzdGFydHNXaXRoKHN0cixzdGFydHMscG9zaXRpb24pe3N0cj1tYWtlU3RyaW5nKHN0cik7c3RhcnRzPSIiK3N0YXJ0cztwb3NpdGlvbj1wb3NpdGlvbj09bnVsbD8wOk1hdGgubWluKHRvUG9zaXRpdmUocG9zaXRpb24pLHN0ci5sZW5ndGgpO3JldHVybiBzdHIubGFzdEluZGV4T2Yoc3RhcnRzLHBvc2l0aW9uKT09PXBvc2l0aW9ufX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMCwiLi9oZWxwZXIvdG9Qb3NpdGl2ZSI6MjJ9XSw1MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHN0ckxlZnQoc3RyLHNlcCl7c3RyPW1ha2VTdHJpbmcoc3RyKTtzZXA9bWFrZVN0cmluZyhzZXApO3ZhciBwb3M9IXNlcD8tMTpzdHIuaW5kZXhPZihzZXApO3JldHVybn5wb3M/c3RyLnNsaWNlKDAscG9zKTpzdHJ9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBzdHJMZWZ0QmFjayhzdHIsc2VwKXtzdHI9bWFrZVN0cmluZyhzdHIpO3NlcD1tYWtlU3RyaW5nKHNlcCk7dmFyIHBvcz1zdHIubGFzdEluZGV4T2Yoc2VwKTtyZXR1cm5+cG9zP3N0ci5zbGljZSgwLHBvcyk6c3RyfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDU0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc3RyUmlnaHQoc3RyLHNlcCl7c3RyPW1ha2VTdHJpbmcoc3RyKTtzZXA9bWFrZVN0cmluZyhzZXApO3ZhciBwb3M9IXNlcD8tMTpzdHIuaW5kZXhPZihzZXApO3JldHVybn5wb3M/c3RyLnNsaWNlKHBvcytzZXAubGVuZ3RoLHN0ci5sZW5ndGgpOnN0cn19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw1NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHN0clJpZ2h0QmFjayhzdHIsc2VwKXtzdHI9bWFrZVN0cmluZyhzdHIpO3NlcD1tYWtlU3RyaW5nKHNlcCk7dmFyIHBvcz0hc2VwPy0xOnN0ci5sYXN0SW5kZXhPZihzZXApO3JldHVybn5wb3M/c3RyLnNsaWNlKHBvcytzZXAubGVuZ3RoLHN0ci5sZW5ndGgpOnN0cn19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw1NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHN0cmlwVGFncyhzdHIpe3JldHVybiBtYWtlU3RyaW5nKHN0cikucmVwbGFjZSgvPFwvP1tePl0rPi9nLCIiKX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw1NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIGFkamFjZW50PXJlcXVpcmUoIi4vaGVscGVyL2FkamFjZW50Iik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc3VjYyhzdHIpe3JldHVybiBhZGphY2VudChzdHIsMSl9fSx7Ii4vaGVscGVyL2FkamFjZW50IjoxNX1dLDU4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiBzdXJyb3VuZChzdHIsd3JhcHBlcil7cmV0dXJuW3dyYXBwZXIsc3RyLHdyYXBwZXJdLmpvaW4oIiIpfX0se31dLDU5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gc3dhcENhc2Uoc3RyKXtyZXR1cm4gbWFrZVN0cmluZyhzdHIpLnJlcGxhY2UoL1xTL2csZnVuY3Rpb24oYyl7cmV0dXJuIGM9PT1jLnRvVXBwZXJDYXNlKCk/Yy50b0xvd2VyQ2FzZSgpOmMudG9VcHBlckNhc2UoKX0pfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDYwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdGl0bGVpemUoc3RyKXtyZXR1cm4gbWFrZVN0cmluZyhzdHIpLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKD86Xnxcc3wtKVxTL2csZnVuY3Rpb24oYyl7cmV0dXJuIGMudG9VcHBlckNhc2UoKX0pfX0seyIuL2hlbHBlci9tYWtlU3RyaW5nIjoyMH1dLDYxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgdHJpbT1yZXF1aXJlKCIuL3RyaW0iKTtmdW5jdGlvbiBib29sTWF0Y2gocyxtYXRjaGVycyl7dmFyIGksbWF0Y2hlcixkb3duPXMudG9Mb3dlckNhc2UoKTttYXRjaGVycz1bXS5jb25jYXQobWF0Y2hlcnMpO2ZvcihpPTA7aTxtYXRjaGVycy5sZW5ndGg7aSs9MSl7bWF0Y2hlcj1tYXRjaGVyc1tpXTtpZighbWF0Y2hlciljb250aW51ZTtpZihtYXRjaGVyLnRlc3QmJm1hdGNoZXIudGVzdChzKSlyZXR1cm4gdHJ1ZTtpZihtYXRjaGVyLnRvTG93ZXJDYXNlKCk9PT1kb3duKXJldHVybiB0cnVlfX1tb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiB0b0Jvb2xlYW4oc3RyLHRydWVWYWx1ZXMsZmFsc2VWYWx1ZXMpe2lmKHR5cGVvZiBzdHI9PT0ibnVtYmVyIilzdHI9IiIrc3RyO2lmKHR5cGVvZiBzdHIhPT0ic3RyaW5nIilyZXR1cm4hIXN0cjtzdHI9dHJpbShzdHIpO2lmKGJvb2xNYXRjaChzdHIsdHJ1ZVZhbHVlc3x8WyJ0cnVlIiwiMSJdKSlyZXR1cm4gdHJ1ZTtpZihib29sTWF0Y2goc3RyLGZhbHNlVmFsdWVzfHxbImZhbHNlIiwiMCJdKSlyZXR1cm4gZmFsc2V9fSx7Ii4vdHJpbSI6NjV9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdG9OdW1iZXIobnVtLHByZWNpc2lvbil7aWYobnVtPT1udWxsKXJldHVybiAwO3ZhciBmYWN0b3I9TWF0aC5wb3coMTAsaXNGaW5pdGUocHJlY2lzaW9uKT9wcmVjaXNpb246MCk7cmV0dXJuIE1hdGgucm91bmQobnVtKmZhY3RvcikvZmFjdG9yfX0se31dLDYzOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgcnRyaW09cmVxdWlyZSgiLi9ydHJpbSIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHRvU2VudGVuY2UoYXJyYXksc2VwYXJhdG9yLGxhc3RTZXBhcmF0b3Isc2VyaWFsKXtzZXBhcmF0b3I9c2VwYXJhdG9yfHwiLCAiO2xhc3RTZXBhcmF0b3I9bGFzdFNlcGFyYXRvcnx8IiBhbmQgIjt2YXIgYT1hcnJheS5zbGljZSgpLGxhc3RNZW1iZXI9YS5wb3AoKTtpZihhcnJheS5sZW5ndGg+MiYmc2VyaWFsKWxhc3RTZXBhcmF0b3I9cnRyaW0oc2VwYXJhdG9yKStsYXN0U2VwYXJhdG9yO3JldHVybiBhLmxlbmd0aD9hLmpvaW4oc2VwYXJhdG9yKStsYXN0U2VwYXJhdG9yK2xhc3RNZW1iZXI6bGFzdE1lbWJlcn19LHsiLi9ydHJpbSI6NDd9XSw2NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIHRvU2VudGVuY2U9cmVxdWlyZSgiLi90b1NlbnRlbmNlIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdG9TZW50ZW5jZVNlcmlhbChhcnJheSxzZXAsbGFzdFNlcCl7cmV0dXJuIHRvU2VudGVuY2UoYXJyYXksc2VwLGxhc3RTZXAsdHJ1ZSl9fSx7Ii4vdG9TZW50ZW5jZSI6NjN9XSw2NTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO3ZhciBkZWZhdWx0VG9XaGl0ZVNwYWNlPXJlcXVpcmUoIi4vaGVscGVyL2RlZmF1bHRUb1doaXRlU3BhY2UiKTt2YXIgbmF0aXZlVHJpbT1TdHJpbmcucHJvdG90eXBlLnRyaW07bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdHJpbShzdHIsY2hhcmFjdGVycyl7c3RyPW1ha2VTdHJpbmcoc3RyKTtpZighY2hhcmFjdGVycyYmbmF0aXZlVHJpbSlyZXR1cm4gbmF0aXZlVHJpbS5jYWxsKHN0cik7Y2hhcmFjdGVycz1kZWZhdWx0VG9XaGl0ZVNwYWNlKGNoYXJhY3RlcnMpO3JldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKCJeIitjaGFyYWN0ZXJzKyIrfCIrY2hhcmFjdGVycysiKyQiLCJnIiksIiIpfX0seyIuL2hlbHBlci9kZWZhdWx0VG9XaGl0ZVNwYWNlIjoxNiwiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw2NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIG1ha2VTdHJpbmc9cmVxdWlyZSgiLi9oZWxwZXIvbWFrZVN0cmluZyIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHRydW5jYXRlKHN0cixsZW5ndGgsdHJ1bmNhdGVTdHIpe3N0cj1tYWtlU3RyaW5nKHN0cik7dHJ1bmNhdGVTdHI9dHJ1bmNhdGVTdHJ8fCIuLi4iO2xlbmd0aD1+fmxlbmd0aDtyZXR1cm4gc3RyLmxlbmd0aD5sZW5ndGg/c3RyLnNsaWNlKDAsbGVuZ3RoKSt0cnVuY2F0ZVN0cjpzdHJ9fSx7Ii4vaGVscGVyL21ha2VTdHJpbmciOjIwfV0sNjc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciB0cmltPXJlcXVpcmUoIi4vdHJpbSIpO21vZHVsZS5leHBvcnRzPWZ1bmN0aW9uIHVuZGVyc2NvcmVkKHN0cil7cmV0dXJuIHRyaW0oc3RyKS5yZXBsYWNlKC8oW2EtelxkXSkoW0EtWl0rKS9nLCIkMV8kMiIpLnJlcGxhY2UoL1stXHNdKy9nLCJfIikudG9Mb3dlckNhc2UoKX19LHsiLi90cmltIjo2NX1dLDY4OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXt2YXIgbWFrZVN0cmluZz1yZXF1aXJlKCIuL2hlbHBlci9tYWtlU3RyaW5nIik7dmFyIGh0bWxFbnRpdGllcz1yZXF1aXJlKCIuL2hlbHBlci9odG1sRW50aXRpZXMiKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiB1bmVzY2FwZUhUTUwoc3RyKXtyZXR1cm4gbWFrZVN0cmluZyhzdHIpLnJlcGxhY2UoL1wmKFteO10rKTsvZyxmdW5jdGlvbihlbnRpdHksZW50aXR5Q29kZSl7dmFyIG1hdGNoO2lmKGVudGl0eUNvZGUgaW4gaHRtbEVudGl0aWVzKXtyZXR1cm4gaHRtbEVudGl0aWVzW2VudGl0eUNvZGVdfWVsc2UgaWYobWF0Y2g9ZW50aXR5Q29kZS5tYXRjaCgvXiN4KFtcZGEtZkEtRl0rKSQvKSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUocGFyc2VJbnQobWF0Y2hbMV0sMTYpKX1lbHNlIGlmKG1hdGNoPWVudGl0eUNvZGUubWF0Y2goL14jKFxkKykkLykpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKH5+bWF0Y2hbMV0pfWVsc2V7cmV0dXJuIGVudGl0eX19KX19LHsiLi9oZWxwZXIvaHRtbEVudGl0aWVzIjoxOSwiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XSw2OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gdW5xdW90ZShzdHIscXVvdGVDaGFyKXtxdW90ZUNoYXI9cXVvdGVDaGFyfHwnIic7aWYoc3RyWzBdPT09cXVvdGVDaGFyJiZzdHJbc3RyLmxlbmd0aC0xXT09PXF1b3RlQ2hhcilyZXR1cm4gc3RyLnNsaWNlKDEsc3RyLmxlbmd0aC0xKTtlbHNlIHJldHVybiBzdHJ9fSx7fV0sNzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBkZXByZWNhdGU9cmVxdWlyZSgidXRpbC1kZXByZWNhdGUiKTttb2R1bGUuZXhwb3J0cz1kZXByZWNhdGUocmVxdWlyZSgic3ByaW50Zi1qcyIpLnZzcHJpbnRmLCJ2c3ByaW50ZigpIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLCB1c2UgdGhlIHNwcmludGYtanMgcGFja2FnZSBpbnN0ZWFkLiIpfSx7InNwcmludGYtanMiOjM2LCJ1dGlsLWRlcHJlY2F0ZSI6Mzd9XSw3MTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7dmFyIGlzQmxhbms9cmVxdWlyZSgiLi9pc0JsYW5rIik7dmFyIHRyaW09cmVxdWlyZSgiLi90cmltIik7bW9kdWxlLmV4cG9ydHM9ZnVuY3Rpb24gd29yZHMoc3RyLGRlbGltaXRlcil7aWYoaXNCbGFuayhzdHIpKXJldHVybltdO3JldHVybiB0cmltKHN0cixkZWxpbWl0ZXIpLnNwbGl0KGRlbGltaXRlcnx8L1xzKy8pfX0seyIuL2lzQmxhbmsiOjI3LCIuL3RyaW0iOjY1fV0sNzI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe3ZhciBtYWtlU3RyaW5nPXJlcXVpcmUoIi4vaGVscGVyL21ha2VTdHJpbmciKTttb2R1bGUuZXhwb3J0cz1mdW5jdGlvbiB3cmFwKHN0cixvcHRpb25zKXtzdHI9bWFrZVN0cmluZyhzdHIpO29wdGlvbnM9b3B0aW9uc3x8e307dmFyIHdpZHRoPW9wdGlvbnMud2lkdGh8fDc1O3ZhciBzZXBlcmF0b3I9b3B0aW9ucy5zZXBlcmF0b3J8fCJcbiI7dmFyIGN1dD1vcHRpb25zLmN1dHx8ZmFsc2U7dmFyIHByZXNlcnZlU3BhY2VzPW9wdGlvbnMucHJlc2VydmVTcGFjZXN8fGZhbHNlO3ZhciB0cmFpbGluZ1NwYWNlcz1vcHRpb25zLnRyYWlsaW5nU3BhY2VzfHxmYWxzZTt2YXIgcmVzdWx0O2lmKHdpZHRoPD0wKXtyZXR1cm4gc3RyfWVsc2UgaWYoIWN1dCl7dmFyIHdvcmRzPXN0ci5zcGxpdCgiICIpO3ZhciBjdXJyZW50X2NvbHVtbj0wO3Jlc3VsdD0iIjt3aGlsZSh3b3Jkcy5sZW5ndGg+MCl7aWYoMSt3b3Jkc1swXS5sZW5ndGgrY3VycmVudF9jb2x1bW4+d2lkdGgpe2lmKGN1cnJlbnRfY29sdW1uPjApe2lmKHByZXNlcnZlU3BhY2VzKXtyZXN1bHQrPSIgIjtjdXJyZW50X2NvbHVtbisrfWVsc2UgaWYodHJhaWxpbmdTcGFjZXMpe3doaWxlKGN1cnJlbnRfY29sdW1uPHdpZHRoKXtyZXN1bHQrPSIgIjtjdXJyZW50X2NvbHVtbisrfX1yZXN1bHQrPXNlcGVyYXRvcjtjdXJyZW50X2NvbHVtbj0wfX1pZihjdXJyZW50X2NvbHVtbj4wKXtyZXN1bHQrPSIgIjtjdXJyZW50X2NvbHVtbisrfXJlc3VsdCs9d29yZHNbMF07Y3VycmVudF9jb2x1bW4rPXdvcmRzWzBdLmxlbmd0aDt3b3Jkcy5zaGlmdCgpfWlmKHRyYWlsaW5nU3BhY2VzKXt3aGlsZShjdXJyZW50X2NvbHVtbjx3aWR0aCl7cmVzdWx0Kz0iICI7Y3VycmVudF9jb2x1bW4rK319cmV0dXJuIHJlc3VsdH1lbHNle3ZhciBpbmRleD0wO3Jlc3VsdD0iIjt3aGlsZShpbmRleDxzdHIubGVuZ3RoKXtpZihpbmRleCV3aWR0aD09MCYmaW5kZXg+MCl7cmVzdWx0Kz1zZXBlcmF0b3J9cmVzdWx0Kz1zdHIuY2hhckF0KGluZGV4KTtpbmRleCsrfWlmKHRyYWlsaW5nU3BhY2VzKXt3aGlsZShpbmRleCV3aWR0aD4wKXtyZXN1bHQrPSIgIjtpbmRleCsrfX1yZXR1cm4gcmVzdWx0fX19LHsiLi9oZWxwZXIvbWFrZVN0cmluZyI6MjB9XX0se30sWzI1XSkoMjUpfSk7","root/biwascheme/version.js":"LyoKICogQml3YVNjaGVtZSAwLjYuOSAtIFI2UlMgU2NoZW1lIGluIEphdmFTY3JpcHQKICoKICogQ29weXJpZ2h0IChjKSAyMDA3LTIwMTQgWXV0YWthIEhBUkEgKGh0dHA6Ly93d3cuYml3YXNjaGVtZS5vcmcvKQogKiBAbGljZW5zZSBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuCiAqLwoKdmFyIEJpd2FTY2hlbWUgPSBCaXdhU2NoZW1lIHx8IHt9OwoKQml3YVNjaGVtZS5WZXJzaW9uID0gIjAuNi45IjsgIC8vIFRPRE86IGRlcHJlY2F0ZSB0aGlzCkJpd2FTY2hlbWUuVkVSU0lPTiA9ICIwLjYuOSI7CkJpd2FTY2hlbWUuR2l0Q29tbWl0ID0gImQ3OTg1ZTA4YjllMzQxYTJhNTIxZDZhZTg0YWNjYjEyOGQxNDM4ZDYiOwo=","root/biwascheme/header.js":"Ly8gCi8vIEhlYXAgYmFzZWQgc2NoZW1lIGZyb20gM2ltcC5wZGYKLy8KCi8vCi8vIHZhcmlhYmxlcwovLwpCaXdhU2NoZW1lLlRvcEVudiA9IHt9OwpCaXdhU2NoZW1lLkNvcmVFbnYgPSB7fTsKCi8vCi8vIE5pbAovLyBqYXZhc2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIGVtcHR5IGxpc3QoICcoKSApCi8vCkJpd2FTY2hlbWUubmlsID0gewogIHRvU3RyaW5nOiBmdW5jdGlvbigpIHsgcmV0dXJuICJuaWwiOyB9LAogIHRvX3dyaXRlOiBmdW5jdGlvbigpIHsgcmV0dXJuICIoKSI7IH0sCiAgdG9fYXJyYXk6IGZ1bmN0aW9uKCkgeyByZXR1cm4gW107IH0sCiAgdG9fc2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG5ldyBCaXdhU2NoZW1lLlNldCgpOyB9LAogIGxlbmd0aDogZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9Cn07CgovLwovLyAjPHVuZGVmPiAoVGhlIHVuZGVmaW5lZCB2YWx1ZSkKLy8gYWxzbyB1c2VkIGFzICM8dW5zcGVjaWZpZWQ+IHZhbHVlcwovLwpCaXdhU2NoZW1lLnVuZGVmID0gbmV3IE9iamVjdCgpOwpCaXdhU2NoZW1lLnVuZGVmLnRvU3RyaW5nID0gZnVuY3Rpb24oKXsgcmV0dXJuICIjPHVuZGVmPiI7IH0KCi8vIFByaW50cyB0aGUgYXJndW1lbnRzIHRvIGNvbnNvbGUuZGVidWcuCkJpd2FTY2hlbWUuZGVidWcgPSBmdW5jdGlvbigvKmFyZ3VtZW50cyovKXsKICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpOwogIGNvbnNvbGUuZGVidWcuYXBwbHkoY29uc29sZSwgXy5tYXAoYXJncywgQml3YVNjaGVtZS5pbnNwZWN0KSk7Cn0KCi8vCi8vIEFzc2VydGlvbgovLwpCaXdhU2NoZW1lLmFzc2VydCA9IGZ1bmN0aW9uKGNvbmQsIGRlc2MpIHsKICBpZiAoIWNvbmQpIHsKICAgIHRocm93IG5ldyBCaXdhU2NoZW1lLkJ1ZygiW0JVR10gQXNzZXJ0aW9uIGZhaWxlZDogIitkZXNjKTsKICB9Cn0KCi8vCi8vIENvbmZpZ3VyYXRpb25zCi8vCgovLyBNYXhpbXVtIGRlcHRoIG9mIHN0YWNrIHRyYWNlCi8vIChZb3UgY2FuIGFsc28gc2V0IEludGVycHJldGVyI21heF90cmFjZV9zaXplIGZvciBlYWNoIEludGVycHJldGVyKQpCaXdhU2NoZW1lLm1heF90cmFjZV9zaXplID0gNDA7CgovLyBTdG9wIHNob3dpbmcgZGVwcmVjYXRpb24gd2FybmluZwpCaXdhU2NoZW1lLnN1cHByZXNzX2RlcHJlY2F0aW9uX3dhcm5pbmcgPSBmYWxzZTsK","root/biwascheme/system/class.js":"Ly8KLy8gU3VwZXItc2ltcGxlIGNsYXNzIGltcGxlbWVudGF0aW9uCi8vCi8vIEV4YW1wbGUgdXNhZ2U6Ci8vCi8vIEJpd2FTY2hlbWUuRm9vID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewovLyAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGEpewovLyAgICAgdGhpcy5hID0gYTsKLy8gICB9LAovLwovLyAgIHRvU3RyaW5nOiBmdW5jdGlvbigpewovLyAgICAgcmV0dXJuICJmb29bIiArIHRoaXMuYSArICJdIjsKLy8gICB9Ci8vIH0pOwovLwovLyBCaXdhU2NoZW1lLkJhciA9IEJpd2FTY2hlbWUuQ2xhc3MuZXh0ZW5kKG5ldyBCaXdhU2NoZW1lLkZvbygiaGVsbG8xIiksIHsKLy8gICBpbml0aWFsaXplOiBmdW5jdGlvbihiKXsKLy8gICAgIHRoaXMuYiA9IGI7Ci8vICAgfSwKLy8KLy8gICBwcmludEV2ZXJ5dGhpbmc6IGZ1bmN0aW9uKCl7Ci8vICAgICBjb25zb2xlLmxvZygiYSA9ICIsIHRoaXMuYSwgImIgPSAiLCB0aGlzLmIpOwovLyAgIH0sCi8vCi8vICAgdG9TdHJpbmc6IGZ1bmN0aW9uKCl7Ci8vICAgICByZXR1cm4gImJhclsiICsgdGhpcy5iICsgIl0iOwovLyAgIH0KLy8gfSk7CgpCaXdhU2NoZW1lLkNsYXNzID0gewogIGNyZWF0ZTogZnVuY3Rpb24obWV0aG9kcykgewogICAgdmFyIGtsYXNzID0gZnVuY3Rpb24oKXsgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07CiAgICBfLmV4dGVuZChrbGFzcy5wcm90b3R5cGUsIG1ldGhvZHMpOwogICAgcmV0dXJuIGtsYXNzOwogIH0sCgogIGV4dGVuZDogZnVuY3Rpb24ocGFyZW50LCBtZXRob2RzKSB7CiAgICB2YXIga2xhc3MgPSBmdW5jdGlvbigpeyB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfTsKICAgIGtsYXNzLnByb3RvdHlwZSA9IHBhcmVudDsKICAgIF8uZXh0ZW5kKGtsYXNzLnByb3RvdHlwZSwgbWV0aG9kcyk7CiAgICByZXR1cm4ga2xhc3M7CiAgfQp9OwoKLy8gVXBkYXRlIHRoZSBnaXZlbiBtZXRob2QgdG8gbWVtb2l6ZWQgdmVyc2lvbi4KLy8KLy8gLSBrbGFzcyA6IGEgY2xhc3MgZGVmaW5lZCBieSBCaXdhU2NoZW1lLkNsYXNzLmNyZWF0ZQovLyAtIG5hbWVfb3JfbmFtZXMgOiBtZXRob2QgbmFtZSAoYSBzdHJpbmcgb3IgYW4gYXJyYXkgb2Ygc3RyaW5ncykKLy8KLy8gRXhhbXBsZQovLwovLyAgIC8vIEdpdmVuIHRoaXMgbWV0aG9kCi8vICAgQml3YVNjaGVtZS5FbnVtZXJhdGlvbi5FbnVtVHlwZSA9IC4uLgovLyAgICAgdW5pdmVyc2U6IGZ1bmN0aW9uKCl7Ci8vICAgICAgIHJldHVybiAuLi4KLy8gICAgIH0KLy8gICAuLi4KLy8gICAvLyBNZW1vaXplCi8vICAgQml3YVNjaGVtZS5DbGFzcy5tZW1vaXplKEJpd2FTY2hlbWUuRW51bWVyYXRpb24uRW51bVR5cGUsCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICJfdW5pdmVyc2UiKTsgCi8vCi8vICAgLy8gRXF1YWwgdG86Ci8vICAgQml3YVNjaGVtZS5FbnVtZXJhdGlvbi5FbnVtVHlwZSA9IC4uLgovLyAgICAgdW5pdmVyc2U6IGZ1bmN0aW9uKCl7Ci8vICAgICAgIGlmKCF0aGlzLmhhc093blByb3BlcnR5KCJjYWNoZWRfdW5pdmVyc2UiKSl7Ci8vICAgICAgICAgdGhpcy5jYWNoZWRfdW5pdmVyc2UgPSB0aGlzLmNvbXB1dGVfdW5pdmVyc2UoKTsKLy8gICAgICAgfQovLyAgICAgICByZXR1cm4gdGhpcy5jYWNoZWRfdW5pdmVyc2U7Ci8vICAgICB9LAovLyAgICAgY29tcHV0ZV91bml2ZXJzZTogZnVuY3Rpb24oKXsgCi8vICAgICAgIC8vIE9yaWdpbmFsIGZ1bmN0aW9uLCByZW5hbWVkIHRvIGNvbXB1dGVfKgovLyAgICAgICByZXR1cm4gLi4uCi8vICAgICB9Ci8vICAgLi4uCkJpd2FTY2hlbWUuQ2xhc3MubWVtb2l6ZSA9IGZ1bmN0aW9uKGtsYXNzLCBuYW1lX29yX25hbWVzKXsKICB2YXIgcHJvdG8gPSBrbGFzcy5wcm90b3R5cGU7CiAgdmFyIG5hbWVzID0gXy5pc0FycmF5KG5hbWVfb3JfbmFtZXMpID8gbmFtZV9vcl9uYW1lcyA6IFtuYW1lX29yX25hbWVzXTsKCiAgXy5lYWNoKG5hbWVzLCBmdW5jdGlvbihuYW1lKXsKICAgIC8vIENvcHkgb3JpZ2luYWwgZnVuY3Rpb24gZm9vIGFzICdjb21wdXRlX2ZvbycKICAgIHByb3RvWyJjb21wdXRlXyIrbmFtZV0gPSBwcm90b1tuYW1lXTsKCiAgICAvLyBEZWZpbmUgbWVtb2l6aW5nIHZlcnNpb24KICAgIHByb3RvW25hbWVdID0gZnVuY3Rpb24oLyphcmd1bWVudHMqLyl7CiAgICAgIGlmKCF0aGlzLmhhc093blByb3BlcnR5KCJjYWNoZWRfIituYW1lKSl7CiAgICAgICAgdGhpc1siY2FjaGVkXyIrbmFtZV0gPSB0aGlzWyJjb21wdXRlXyIrbmFtZV0uYXBwbHkodGhpcywgXy50b0FycmF5KGFyZ3VtZW50cykpOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzWyJjYWNoZWRfIituYW1lXTsKICAgIH0KICB9KTsKfQo=","root/biwascheme/system/_writer.js":"Ly8KLy8gd3JpdGUuanM6IEZ1bmN0aW9ucyB0byBjb252ZXJ0IG9iamVjdHMgdG8gc3RyaW5ncwovLwoKLy8KLy8gd3JpdGUKLy8KCkJpd2FTY2hlbWUudG9fd3JpdGUgPSBmdW5jdGlvbihvYmopewogIGlmKG9iaiA9PT0gdW5kZWZpbmVkKQogICAgcmV0dXJuICJ1bmRlZmluZWQiOwogIGVsc2UgaWYob2JqID09PSBudWxsKQogICAgcmV0dXJuICJudWxsIjsKICBlbHNlIGlmKF8uaXNGdW5jdGlvbihvYmopKQogICAgcmV0dXJuICIjPEZ1bmN0aW9uICIrKG9iai5mbmFtZSA/IG9iai5mbmFtZSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRvU291cmNlID8gXy5zdHIudHJ1bmNhdGUob2JqLnRvU291cmNlKCksIDQwKSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgIiIpKyI+IjsKICBlbHNlIGlmKF8uaXNTdHJpbmcob2JqKSkKICAgIHJldHVybiAnIicgKwogICAgICAgICAgIG9iai5yZXBsYWNlKC9cXHxcIi9nLGZ1bmN0aW9uKCQwKXtyZXR1cm4nXFwnKyQwO30pCiAgICAgICAgICAgICAgLnJlcGxhY2UoL1x4MDcvZywgIlxcYSIpCiAgICAgICAgICAgICAgLnJlcGxhY2UoL1x4MDgvZywgIlxcYiIpCiAgICAgICAgICAgICAgLnJlcGxhY2UoL1x0L2csICJcXHQiKQogICAgICAgICAgICAgIC5yZXBsYWNlKC9cbi9nLCAiXFxuIikKICAgICAgICAgICAgICAucmVwbGFjZSgvXHYvZywgIlxcdiIpCiAgICAgICAgICAgICAgLnJlcGxhY2UoL1xmL2csICJcXGYiKQogICAgICAgICAgICAgIC5yZXBsYWNlKC9cci9nLCAiXFxyIikgKwogICAgICAgICAgICciJzsKICBlbHNlIGlmKEJpd2FTY2hlbWUuaXNDbG9zdXJlKG9iaikpCiAgICByZXR1cm4gIiM8Q2xvc3VyZT4iOwogIGVsc2UgaWYoXy5pc0FycmF5KG9iaikpCiAgICByZXR1cm4gIiMoIiArIF8ubWFwKG9iaiwgZnVuY3Rpb24oZSkgeyByZXR1cm4gQml3YVNjaGVtZS50b193cml0ZShlKTsgfSkuam9pbigiICIpICsgIikiOwogIGVsc2UgaWYodHlwZW9mKG9iai50b193cml0ZSkgPT0gJ2Z1bmN0aW9uJykKICAgIHJldHVybiBvYmoudG9fd3JpdGUoKTsKICBlbHNlIGlmKGlzTmFOKG9iaikgJiYgdHlwZW9mKG9iaikgPT0gJ251bWJlcicpCiAgICByZXR1cm4gIituYW4uMCI7CiAgZWxzZXsKICAgIHN3aXRjaChvYmopewogICAgICBjYXNlIHRydWU6IHJldHVybiAiI3QiOwogICAgICBjYXNlIGZhbHNlOiByZXR1cm4gIiNmIjsKICAgICAgY2FzZSBJbmZpbml0eTogcmV0dXJuICIraW5mLjAiOwogICAgICBjYXNlIC1JbmZpbml0eTogcmV0dXJuICItaW5mLjAiOwogICAgfQogIH0KICByZXR1cm4gQml3YVNjaGVtZS5pbnNwZWN0KG9iaik7Cn0KCi8vCi8vIGRpc3BsYXkKLy8KCkJpd2FTY2hlbWUudG9fZGlzcGxheSA9IGZ1bmN0aW9uKG9iail7CiAgaWYoXy5pc1VuZGVmaW5lZChvYmopKQogICAgcmV0dXJuICd1bmRlZmluZWQnOwogIGVsc2UgaWYoXy5pc051bGwob2JqKSkKICAgIHJldHVybiAnbnVsbCc7CiAgZWxzZSBpZih0eXBlb2Yob2JqLnZhbHVlT2YoKSkgPT0gInN0cmluZyIpCiAgICByZXR1cm4gb2JqOwogIGVsc2UgaWYob2JqIGluc3RhbmNlb2YgQml3YVNjaGVtZS5TeW1ib2wpCiAgICByZXR1cm4gb2JqLm5hbWU7CiAgZWxzZSBpZihvYmogaW5zdGFuY2VvZiBBcnJheSkKICAgIHJldHVybiAnIygnICsgXy5tYXAob2JqLCBCaXdhU2NoZW1lLnRvX2Rpc3BsYXkpLmpvaW4oJyAnKSArICcpJzsKICBlbHNlIGlmKG9iaiBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUGFpcikKICAgIHJldHVybiBvYmouaW5zcGVjdChCaXdhU2NoZW1lLnRvX2Rpc3BsYXkpOwogIGVsc2UgaWYob2JqIGluc3RhbmNlb2YgQml3YVNjaGVtZS5DaGFyKQogICAgcmV0dXJuIG9iai52YWx1ZTsKICBlbHNlCiAgICByZXR1cm4gQml3YVNjaGVtZS50b193cml0ZShvYmopOwp9CgovLwovLyB3cml0ZS9zcyAod3JpdGUgd2l0aCBzdWJzdHJ1Y3R1cmUpCi8vCgovLyBleGFtcGxlOiAgPiAobGV0ICgoeCAobGlzdCAnYSkpKSAobGlzdCB4IHgpKSAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgKCMwPShhKSAjMCMpCi8vIDItcGFzcyBhbGdvcml0aG0uCi8vICgxKSBkZXRlY3QgYWxsIHRoZSBvYmplY3RzIHdoaWNoIGFwcGVhcnMgbW9yZSB0aGFuIG9uY2UKLy8gICAgIChmaW5kX2N5Y2xpYywgcmVkdWNlX2N5Y2xpY19pbmZvKQovLyAoMikgd3JpdGUgb2JqZWN0IHVzaW5nIHRoaXMgaW5mb3JtYXRpb24KLy8gICAqIGFkZCBwcmVmaXggJyNuPScgZm9yIGZpcnN0IGFwcGVhcmFuY2UKLy8gICAqIGp1c3Qgd3JpdGUgJyNuIycgZm9yIG90aGVyIGFwcGVhcmFuY2UKCi8vVE9ETzogc3VwcG9ydCBWYWx1ZXMKQml3YVNjaGVtZS53cml0ZV9zcyA9IGZ1bmN0aW9uKG9iaiwgYXJyYXlfbW9kZSl7CiAgdmFyIGtub3duID0gW29ial0sIHVzZWQgPSBbZmFsc2VdOwogIEJpd2FTY2hlbWUuZmluZF9jeWNsaWMob2JqLCBrbm93biwgdXNlZCk7CiAgdmFyIGN5Y2xpYyAgID0gQml3YVNjaGVtZS5yZWR1Y2VfY3ljbGljX2luZm8oa25vd24sIHVzZWQpOwogIHZhciBhcHBlYXJlZCA9IG5ldyBBcnJheShjeWNsaWMubGVuZ3RoKTsKICBmb3IodmFyIGk9Y3ljbGljLmxlbmd0aC0xOyBpPj0wOyBpLS0pIGFwcGVhcmVkW2ldID0gZmFsc2U7CgogIHJldHVybiBCaXdhU2NoZW1lLnRvX3dyaXRlX3NzKG9iaiwgY3ljbGljLCBhcHBlYXJlZCwgYXJyYXlfbW9kZSk7Cn0KQml3YVNjaGVtZS50b193cml0ZV9zcyA9IGZ1bmN0aW9uKG9iaiwgY3ljbGljLCBhcHBlYXJlZCwgYXJyYXlfbW9kZSl7CiAgdmFyIHJldCA9ICIiOwogIHZhciBpID0gY3ljbGljLmluZGV4T2Yob2JqKTsKICBpZihpID49IDApewogICAgaWYoYXBwZWFyZWRbaV0pewogICAgICByZXR1cm4gIiMiK2krIiMiOwogICAgfQogICAgZWxzZXsKICAgICAgYXBwZWFyZWRbaV0gPSB0cnVlOwogICAgICByZXQgPSAiIyIraSsiPSI7CiAgICB9CiAgfQoKICBpZihvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXIpewogICAgdmFyIGEgPSBbXTsKICAgIGEucHVzaChCaXdhU2NoZW1lLnRvX3dyaXRlX3NzKG9iai5jYXIsIGN5Y2xpYywgYXBwZWFyZWQsIGFycmF5X21vZGUpKTsKICAgIGZvcih2YXIgbz1vYmouY2RyOyBvICE9IEJpd2FTY2hlbWUubmlsOyBvPW8uY2RyKXsKICAgICAgaWYoIShvIGluc3RhbmNlb2YgQml3YVNjaGVtZS5QYWlyKSB8fCBjeWNsaWMuaW5kZXhPZihvKSA+PSAwKXsKICAgICAgICBhLnB1c2goIi4iKTsKICAgICAgICBhLnB1c2goQml3YVNjaGVtZS50b193cml0ZV9zcyhvLCBjeWNsaWMsIGFwcGVhcmVkLCBhcnJheV9tb2RlKSk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgYS5wdXNoKEJpd2FTY2hlbWUudG9fd3JpdGVfc3Moby5jYXIsIGN5Y2xpYywgYXBwZWFyZWQsIGFycmF5X21vZGUpKTsKICAgIH0KICAgIHJldCArPSAiKCIgKyBhLmpvaW4oIiAiKSArICIpIjsKICB9CiAgZWxzZSBpZihvYmogaW5zdGFuY2VvZiBBcnJheSl7CiAgICB2YXIgYSA9IF8ubWFwKG9iaiwgZnVuY3Rpb24oaXRlbSl7CiAgICAgIHJldHVybiBCaXdhU2NoZW1lLnRvX3dyaXRlX3NzKGl0ZW0sIGN5Y2xpYywgYXBwZWFyZWQsIGFycmF5X21vZGUpOwogICAgfSkKICAgIGlmKGFycmF5X21vZGUpCiAgICAgIHJldCArPSAiWyIgKyBhLmpvaW4oIiwgIikgKyAiXSI7CiAgICBlbHNlCiAgICAgIHJldCArPSAiIygiICsgYS5qb2luKCIgIikgKyAiKSI7CiAgfQogIGVsc2V7CiAgICByZXQgKz0gQml3YVNjaGVtZS50b193cml0ZShvYmopOwogIH0KICByZXR1cm4gcmV0Owp9CkJpd2FTY2hlbWUucmVkdWNlX2N5Y2xpY19pbmZvID0gZnVuY3Rpb24oa25vd24sIHVzZWQpewogIHZhciBuX3VzZWQgPSAwOwogIGZvcih2YXIgaT0wOyBpPHVzZWQubGVuZ3RoOyBpKyspewogICAgaWYodXNlZFtpXSl7CiAgICAgIGtub3duW25fdXNlZF0gPSBrbm93bltpXTsKICAgICAgbl91c2VkKys7CiAgICB9CiAgfQogIHJldHVybiBrbm93bi5zbGljZSgwLCBuX3VzZWQpOwp9CkJpd2FTY2hlbWUuZmluZF9jeWNsaWMgPSBmdW5jdGlvbihvYmosIGtub3duLCB1c2VkKXsKICB2YXIgaXRlbXMgPSAob2JqIGluc3RhbmNlb2YgQml3YVNjaGVtZS5QYWlyKSAgPyBbb2JqLmNhciwgb2JqLmNkcl0gOgogICAgICAgICAgICAgIChvYmogaW5zdGFuY2VvZiBBcnJheSkgPyBvYmogOgogICAgICAgICAgICAgIG51bGw7CiAgaWYoIWl0ZW1zKSByZXR1cm47CgogIF8uZWFjaChpdGVtcywgZnVuY3Rpb24oaXRlbSl7CiAgICBpZih0eXBlb2YoaXRlbSk9PSdudW1iZXInIHx8IHR5cGVvZihpdGVtKT09J3N0cmluZycgfHwKICAgICAgaXRlbSA9PT0gQml3YVNjaGVtZS51bmRlZiB8fCBpdGVtID09PSB0cnVlIHx8IGl0ZW0gPT09IGZhbHNlIHx8CiAgICAgIGl0ZW0gPT09IEJpd2FTY2hlbWUubmlsIHx8IGl0ZW0gaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlN5bWJvbCkgcmV0dXJuOwoKICAgIHZhciBpID0ga25vd24uaW5kZXhPZihpdGVtKTsKICAgIGlmKGkgPj0gMCkKICAgICAgdXNlZFtpXSA9IHRydWU7CiAgICBlbHNlewogICAgICBrbm93bi5wdXNoKGl0ZW0pOwogICAgICB1c2VkLnB1c2goZmFsc2UpOwogICAgICBCaXdhU2NoZW1lLmZpbmRfY3ljbGljKGl0ZW0sIGtub3duLCB1c2VkKTsKICAgIH0KICB9KTsKfTsKCi8vCi8vIGluc3BlY3QKLy8KQml3YVNjaGVtZS5pbnNwZWN0ID0gZnVuY3Rpb24ob2JqZWN0LCBvcHRzKSB7CiAgdHJ5IHsKICAgIGlmIChfLmlzVW5kZWZpbmVkKG9iamVjdCkpIHJldHVybiAndW5kZWZpbmVkJzsKICAgIGlmIChvYmplY3QgPT09IG51bGwpIHJldHVybiAnbnVsbCc7CiAgICBpZiAob2JqZWN0ID09PSB0cnVlKSByZXR1cm4gJyN0JzsKICAgIGlmIChvYmplY3QgPT09IGZhbHNlKSByZXR1cm4gJyNmJzsKICAgIGlmIChvYmplY3QuaW5zcGVjdCkgcmV0dXJuIG9iamVjdC5pbnNwZWN0KCk7CiAgICBpZiAoXy5pc1N0cmluZyhvYmplY3QpKSB7CiAgICAgIHJldHVybiAnIicgKyBvYmplY3QucmVwbGFjZSgvIi9nLCAnXFwiJykgKyAnIic7CiAgICB9CiAgICBpZiAoXy5pc0FycmF5KG9iamVjdCkpIHsKICAgICAgcmV0dXJuICdbJyArIF8ubWFwKG9iamVjdCwgQml3YVNjaGVtZS5pbnNwZWN0KS5qb2luKCcsICcpICsgJ10nOwogICAgfQoKICAgIGlmIChvcHRzICYmIG9wdHNbImZhbGxiYWNrIl0pewogICAgICByZXR1cm4gb3B0c1siZmFsbGJhY2siXTsKICAgIH0KICAgIGVsc2UgewogICAgICByZXR1cm4gb2JqZWN0LnRvU3RyaW5nKCk7CiAgICB9CiAgfSBjYXRjaCAoZSkgewogICAgaWYgKGUgaW5zdGFuY2VvZiBSYW5nZUVycm9yKSByZXR1cm4gJy4uLic7CiAgICB0aHJvdyBlOwogIH0KfTsK","root/biwascheme/system/_types.js":"Ly8KLy8gdHlwZXMuanMgLSB0eXBlIHByZWRpY2F0b3JzLCBlcXVhbGl0eSwgY29tcGFyZQovLwoKQml3YVNjaGVtZS5pc05pbCA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogPT09IEJpd2FTY2hlbWUubmlsKTsKfTsKCkJpd2FTY2hlbWUuaXNVbmRlZiA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogPT09IEJpd2FTY2hlbWUudW5kZWYpOwp9OwoKQml3YVNjaGVtZS5pc0Jvb2xlYW4gPSBfLmlzQm9vbGVhbjsgLy8gUmV0dXJuIHRydWUgaWYgYXJnIGlzIGVpdGhlciB0cnVlIG9yIGZhbHNlCgovL0Jpd2FTY2hlbWUuaXNOdW1iZXIgaXMgZGVmaW5lZCBpbiBudW1iZXIuanMgKFJldHVybiB0cnVlIGlmIGFyZyBpcyBzY2hlbWUgbnVtYmVyKQoKQml3YVNjaGVtZS5pc1N0cmluZyA9IF8uaXNTdHJpbmc7CgpCaXdhU2NoZW1lLmlzQ2hhciA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLkNoYXIpOwp9OwoKQml3YVNjaGVtZS5pc1N5bWJvbCA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlN5bWJvbCk7Cn07CgpCaXdhU2NoZW1lLmlzUG9ydCA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBvcnQpOwp9OwoKLy8gTm90ZTogJygpIGlzIG5vdCBhIHBhaXIgaW4gc2NoZW1lCkJpd2FTY2hlbWUuaXNQYWlyID0gZnVuY3Rpb24ob2JqKXsKICByZXR1cm4gKG9iaiBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUGFpcik7Cn07CgovLyBSZXR1cm5zIHRydWUgaWYgb2JqIGlzIGEgcHJvcGVyIGxpc3QKLy8gTm90ZTogaXNMaXN0IHJldHVybnMgdHJ1ZSBmb3IgJygpCkJpd2FTY2hlbWUuaXNMaXN0ID0gZnVuY3Rpb24ob2JqKXsKICB2YXIgbmlsID0gQml3YVNjaGVtZS5uaWwsIFBhaXIgPSBCaXdhU2NoZW1lLlBhaXI7CgogIGlmIChvYmogPT09IG5pbCkgeyAvLyBFbXB0eSBsaXN0CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgaWYgKCEob2JqIGluc3RhbmNlb2YgUGFpcikpIHsgLy8gQXJndW1lbnQgaXNuJ3QgZXZlbiBhIHBhaXIKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciB0b3J0b2lzZSA9IG9iajsKICB2YXIgaGFyZSA9IG9iai5jZHI7CiAgd2hpbGUgKHRydWUpIHsKICAgIGlmIChoYXJlID09PSBuaWwpIHsgLy8gRW5kIG9mIGxpc3QKICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgICBpZiAoaGFyZSA9PT0gdG9ydG9pc2UpIHsgLy8gQ3ljbGUKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgaWYgKCEoaGFyZSBpbnN0YW5jZW9mIFBhaXIpKSB7IC8vIEltcHJvcGVyIGxpc3QKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQoKICAgIGlmIChoYXJlLmNkciA9PT0gbmlsKSB7IC8vIEVuZCBvZiBsaXN0CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgaWYgKCEoaGFyZS5jZHIgaW5zdGFuY2VvZiBQYWlyKSkgeyAvLyBJbXByb3BlciBsaXN0CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KCiAgICBoYXJlID0gaGFyZS5jZHIuY2RyOwogICAgdG9ydG9pc2UgPSB0b3J0b2lzZS5jZHI7CiAgfQp9OwoKQml3YVNjaGVtZS5pc1ZlY3RvciA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBBcnJheSkgJiYgKG9iai5jbG9zdXJlX3AgIT09IHRydWUpOwp9OwoKQml3YVNjaGVtZS5pc0hhc2h0YWJsZSA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLkhhc2h0YWJsZSk7Cn07CgpCaXdhU2NoZW1lLmlzTXV0YWJsZUhhc2h0YWJsZSA9IGZ1bmN0aW9uKG9iail7CiAgcmV0dXJuIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLkhhc2h0YWJsZSkgJiYgb2JqLm11dGFibGU7Cn07CgovLyBSZXR1cm5zIHRydWUgaWYgYG9iamAgaXMgYSBTY2hlbWUgY2xvc3VyZS4KQml3YVNjaGVtZS5pc0Nsb3N1cmUgPSBmdW5jdGlvbihvYmopewogIHJldHVybiAob2JqIGluc3RhbmNlb2YgQXJyYXkpICYmIChvYmouY2xvc3VyZV9wID09PSB0cnVlKTsKfTsKCi8vIENoYW5nZSBgYXJ5YCBpbnRvIGEgU2NoZW1lIGNsb3N1cmUgKGRlc3RydWN0aXZlKS4KQml3YVNjaGVtZS5tYWtlQ2xvc3VyZSA9IGZ1bmN0aW9uKGFyeSkgewogIGFyeS5jbG9zdXJlX3AgPSB0cnVlOwogIHJldHVybiBhcnk7Cn07CgovLyBwcm9jZWR1cmU6IFNjaGVtZSBjbG9zdXJlIG9yIEphdmFTY3JpcHQgZnVuY3Rpb24KLy8gdmFsaWQgYXJndW1lbnQgZm9yIGFueXdoZXJlIGZ1bmN0aW9uIGlzIGV4cGVjdGVkCkJpd2FTY2hlbWUuaXNQcm9jZWR1cmUgPSBmdW5jdGlvbihvYmopewogIHJldHVybiBCaXdhU2NoZW1lLmlzQ2xvc3VyZShvYmopIHx8IF8uaXNGdW5jdGlvbihvYmopOwp9OwoKLy8gUmV0dXJuIHRydWUgaWYgb2JqIGlzIGEgc2NoZW1lIHZhbHVlIHdoaWNoIGV2YWx1YXRlcyB0byBpdHNlbGYKQml3YVNjaGVtZS5pc1NlbGZFdmFsdWF0aW5nID0gZnVuY3Rpb24ob2JqKSB7CiAgcmV0dXJuIEJpd2FTY2hlbWUuaXNCb29sZWFuKG9iaikgfHwKICAgICAgICAgQml3YVNjaGVtZS5pc051bWJlcihvYmopIHx8CiAgICAgICAgIEJpd2FTY2hlbWUuaXNTdHJpbmcob2JqKSB8fAogICAgICAgICBCaXdhU2NoZW1lLmlzQ2hhcihvYmopOwp9OwoKLy8KLy8gZXF1YWxpdHkKLy8KQml3YVNjaGVtZS5lcSA9IGZ1bmN0aW9uKGEsIGIpewogIHJldHVybiBhID09PSBiOwp9OwovLyBUT0RPOiBSZWNvcmRzIChldGMuKQpCaXdhU2NoZW1lLmVxdiA9IGZ1bmN0aW9uKGEsIGIpewogIHJldHVybiBhID09IGIgJiYgKHR5cGVvZihhKSA9PSB0eXBlb2YoYikpOwp9OwpCaXdhU2NoZW1lLmVxdWFsID0gZnVuY3Rpb24oYSwgYil7CiAgLy9UT0RPOiBtdXN0IHRlcm1pbmF0ZSBmb3IgY3ljbGljIG9iamVjdHMKICByZXR1cm4gQml3YVNjaGVtZS50b193cml0ZShhKSA9PSBCaXdhU2NoZW1lLnRvX3dyaXRlKGIpOwp9OwoKLy8KLy8gY29tYXByYXRvcgovLwovLyBSZXR1cm4gdHJ1ZSB3aGVuIGEgPCBiCkJpd2FTY2hlbWUubHQgPSBmdW5jdGlvbihhLCBiKSB7CiAgaWYodHlwZW9mIGEgIT09IHR5cGVvZiBiKXsKICAgIHJldHVybiBjb21wYXJlRm4odHlwZW9mIGEsIHR5cGVvZiBiKTsgCQogIH0KICByZXR1cm4gYSA8IGI7Cn07Cg==","root/biwascheme/system/error.js":"Ly8KLy8gRXJyb3JzCi8vCgpCaXdhU2NoZW1lLkVycm9yID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKG1zZyl7CiAgICB0aGlzLm1lc3NhZ2UgPSAiRXJyb3I6ICIrbXNnOwogIH0sCiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5tZXNzYWdlOwogIH0KfSk7CgpCaXdhU2NoZW1lLkJ1ZyA9IEJpd2FTY2hlbWUuQ2xhc3MuZXh0ZW5kKG5ldyBCaXdhU2NoZW1lLkVycm9yKCksIHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihtc2cpewogICAgdGhpcy5tZXNzYWdlID0gIltCVUddICIrbXNnOwogIH0KfSk7CgovLyBjdXJyZW50bHkgdXNlZCBieSAicmFpc2UiCkJpd2FTY2hlbWUuVXNlckVycm9yID0gQml3YVNjaGVtZS5DbGFzcy5leHRlbmQobmV3IEJpd2FTY2hlbWUuRXJyb3IoKSwgewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKG1zZyl7CiAgICB0aGlzLm1lc3NhZ2UgPSBtc2c7CiAgfQp9KTsKCg==","root/biwascheme/system/set.js":"Ly8KLy8gU2V0IC0gc2V0IG9mIHN0cmluZwovLyBjb250ZW50cyBtdXN0IGJlIHN0cmluZyAob3IgYXQgbGVhc3Qgc29ydGFibGUpCi8vCkJpd2FTY2hlbWUuU2V0ID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemUgOiBmdW5jdGlvbigvKmFyZ3MqLyl7CiAgICB0aGlzLmFyciA9IFtdOwogICAgdmFyIGk7CiAgICBmb3IoaT0wOyBpPGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKICAgICAgdGhpcy5hcnJbaV0gPSBhcmd1bWVudHNbaV07CiAgfSwKCiAgZXF1YWxzIDogZnVuY3Rpb24ob3RoZXIpewogICAgaWYodGhpcy5hcnIubGVuZ3RoICE9IG90aGVyLmFyci5sZW5ndGgpCiAgICAgIHJldHVybiBmYWxzZTsKCiAgICB2YXIgYTEgPSBfLmNsb25lKHRoaXMuYXJyKTsKICAgIHZhciBhMiA9IF8uY2xvbmUob3RoZXIuYXJyKTsKICAgIGExLnNvcnQoKTsKICAgIGEyLnNvcnQoKTsKICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuYXJyLmxlbmd0aDsgaSsrKXsKICAgICAgaWYoYTFbaV0gIT0gYTJbaV0pIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0sCiAgc2V0X2NvbnMgOiBmdW5jdGlvbihpdGVtKXsKICAgIHZhciBvID0gbmV3IEJpd2FTY2hlbWUuU2V0KGl0ZW0pOwogICAgby5hcnIgPSBfLmNsb25lKHRoaXMuYXJyKTsKICAgIG8uYXJyLnB1c2goaXRlbSk7CiAgICByZXR1cm4gbzsKICB9LAogIHNldF91bmlvbiA6IGZ1bmN0aW9uKC8qYXJncyovKXsKICAgIHZhciBvID0gbmV3IEJpd2FTY2hlbWUuU2V0KCk7CiAgICBvLmFyciA9IF8uY2xvbmUodGhpcy5hcnIpOwoKICAgIGZvcih2YXIgaz0wOyBrPGFyZ3VtZW50cy5sZW5ndGg7IGsrKyl7CiAgICAgIHZhciBzMiA9IGFyZ3VtZW50c1trXTsKICAgICAgaWYoIShzMiBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuU2V0KSkKICAgICAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5FcnJvcigic2V0X3VuaW9uOiBhcmd1bWVudHMgbXVzdCBiZSBhIHNldCIpOwoKICAgICAgZm9yKHZhciBpPTA7IGk8czIuYXJyLmxlbmd0aDsgaSsrKQogICAgICAgIG8uYWRkKHMyLmFycltpXSk7CiAgICB9CiAgICByZXR1cm4gbzsKICB9LAogIHNldF9pbnRlcnNlY3QgOiBmdW5jdGlvbihzMil7CiAgICBpZighKHMyIGluc3RhbmNlb2YgQml3YVNjaGVtZS5TZXQpKQogICAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5FcnJvcigic2V0X2ludGVyc2VjdDogYXJndW1lbnRzIG11c3QgYmUgYSBzZXQiKTsKCiAgICB2YXIgbyA9IG5ldyBCaXdhU2NoZW1lLlNldCgpOwogICAgZm9yKHZhciBpPTA7IGk8dGhpcy5hcnIubGVuZ3RoOyBpKyspCiAgICAgIGlmKHMyLm1lbWJlcih0aGlzLmFycltpXSkpCiAgICAgICAgby5hZGQodGhpcy5hcnJbaV0pOwogICAgcmV0dXJuIG87CiAgfSwKICBzZXRfbWludXMgOiBmdW5jdGlvbihzMil7CiAgICBpZighKHMyIGluc3RhbmNlb2YgQml3YVNjaGVtZS5TZXQpKQogICAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5FcnJvcigic2V0X21pbnVzOiBhcmd1bWVudHMgbXVzdCBiZSBhIHNldCIpOwoKICAgIHZhciBvID0gbmV3IEJpd2FTY2hlbWUuU2V0KCk7CiAgICBmb3IodmFyIGk9MDsgaTx0aGlzLmFyci5sZW5ndGg7IGkrKykKICAgICAgaWYoIXMyLm1lbWJlcih0aGlzLmFycltpXSkpCiAgICAgICAgby5hZGQodGhpcy5hcnJbaV0pOwogICAgcmV0dXJuIG87CiAgfSwKICBhZGQgOiBmdW5jdGlvbihpdGVtKXsKICAgIGlmKCF0aGlzLm1lbWJlcihpdGVtKSl7CiAgICAgIHRoaXMuYXJyLnB1c2goaXRlbSk7CiAgICB9CiAgfSwKICBtZW1iZXIgOiBmdW5jdGlvbihpdGVtKXsKICAgIGZvcih2YXIgaT0wOyBpPHRoaXMuYXJyLmxlbmd0aDsgaSsrKQogICAgICBpZih0aGlzLmFycltpXSA9PSBpdGVtKSByZXR1cm4gdHJ1ZTsKCiAgICByZXR1cm4gZmFsc2U7CiAgfSwKICByaW5kZXggOiBmdW5jdGlvbihpdGVtKXsKICAgIGZvcih2YXIgaT10aGlzLmFyci5sZW5ndGgtMTsgaT49MCA7IGktLSkKICAgICAgaWYodGhpcy5hcnJbaV0gPT0gaXRlbSkgcmV0dXJuICh0aGlzLmFyci5sZW5ndGgtMS1pKTsKCiAgICByZXR1cm4gbnVsbDsKICB9LAogIGluZGV4IDogZnVuY3Rpb24oaXRlbSl7CiAgICBmb3IodmFyIGk9MDsgaTx0aGlzLmFyci5sZW5ndGg7IGkrKykKICAgICAgaWYodGhpcy5hcnJbaV0gPT0gaXRlbSkgcmV0dXJuIGk7CgogICAgcmV0dXJuIG51bGw7CiAgfSwKICBpbnNwZWN0IDogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiU2V0KCIgKyB0aGlzLmFyci5qb2luKCIsICIpICsgIikiOwogIH0sCiAgdG9TdHJpbmcgOiBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpOwogIH0sCiAgc2l6ZSA6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5hcnIubGVuZ3RoOwogIH0KfSk7Cg==","root/biwascheme/system/values.js":"Ly8KLy8gVmFsdWVzCi8vCkJpd2FTY2hlbWUuVmFsdWVzID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKHZhbHVlcyl7CiAgICB0aGlzLmNvbnRlbnQgPSB2YWx1ZXM7CiAgfSwKICB0b193cml0ZTogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiIzxWYWx1ZXMgIiArCiAgICAgICAgICAgICBfLm1hcCh0aGlzLmNvbnRlbnQsIEJpd2FTY2hlbWUudG9fd3JpdGUpLmpvaW4oIiAiKSArCiAgICAgICAgICAgIj4iOwogIH0KfSk7Cgo=","root/biwascheme/system/pair.js":"Ly8KLy8gUGFpciAKLy8gY29ucyBjZWxsCi8vCgpCaXdhU2NoZW1lLlBhaXIgPSBCaXdhU2NoZW1lLkNsYXNzLmNyZWF0ZSh7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oY2FyLCBjZHIpewogICAgdGhpcy5jYXIgPSBjYXI7CiAgICB0aGlzLmNkciA9IGNkcjsKICB9LAoKICBjYWFyOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5jYXIuY2FyOyB9LAogIGNhZHI6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNkci5jYXI7IH0sCiAgY2RhcjogZnVuY3Rpb24oKXsgcmV0dXJuIHRoaXMuY2RyLmNhcjsgfSwKICBjZGRyOiBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5jZHIuY2RyOyB9LAoKICBmaXJzdDogIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNhcjsgfSwKICBzZWNvbmQ6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNkci5jYXI7IH0sCiAgdGhpcmQ6ICBmdW5jdGlvbigpeyByZXR1cm4gdGhpcy5jZHIuY2RyLmNhcjsgfSwKICBmb3VydGg6IGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNkci5jZHIuY2RyLmNhcjsgfSwKICBmaWZ0aDogIGZ1bmN0aW9uKCl7IHJldHVybiB0aGlzLmNkci5jZHIuY2RyLmNkci5jYXI7IH0sCgogIC8vIHJldHVybnMgYXJyYXkgY29udGFpbmluZyBhbGwgdGhlIGNhcidzIG9mIGxpc3QKICAvLyAnKDEgMiAzKSA9PiBbMSwyLDNdCiAgLy8gJygxIDIgLiAzKSA9PiBbMSwyXQogIHRvX2FycmF5OiBmdW5jdGlvbigpewogICAgdmFyIGFyeSA9IFtdOwogICAgZm9yKHZhciBvID0gdGhpczsgbyBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUGFpcjsgbz1vLmNkcil7CiAgICAgIGFyeS5wdXNoKG8uY2FyKTsKICAgIH0KICAgIHJldHVybiBhcnk7CiAgfSwKCiAgdG9fc2V0OiBmdW5jdGlvbigpewogICAgdmFyIHNldCA9IG5ldyBCaXdhU2NoZW1lLlNldCgpOwogICAgZm9yKHZhciBvID0gdGhpczsgbyBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUGFpcjsgbz1vLmNkcil7CiAgICAgIHNldC5hZGQoby5jYXIpOwogICAgfQogICAgcmV0dXJuIHNldDsKICB9LAoKICBsZW5ndGg6IGZ1bmN0aW9uKCl7CiAgICB2YXIgbiA9IDA7CiAgICBmb3IodmFyIG8gPSB0aGlzOyBvIGluc3RhbmNlb2YgQml3YVNjaGVtZS5QYWlyOyBvPW8uY2RyKXsKICAgICAgbisrOwogICAgfQogICAgcmV0dXJuIG47CiAgfSwKCiAgLy8gUmV0dXJuIHRoZSBsYXN0IGNkcgogIGxhc3RfY2RyOiBmdW5jdGlvbigpewogICAgdmFyIG87CiAgICBmb3IobyA9IHRoaXM7IG8gaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXI7IG8gPSBvLmNkcikKICAgICAgOwogICAgcmV0dXJuIG87CiAgfSwKCiAgLy8gY2FsbHMgdGhlIGdpdmVuIGZ1bmMgcGFzc2luZyBlYWNoIGNhciBvZiBsaXN0CiAgLy8gcmV0dXJucyBjZHIgb2YgbGFzdCBQYWlyCiAgZm9yZWFjaDogZnVuY3Rpb24oZnVuYyl7CiAgICBmb3IodmFyIG8gPSB0aGlzOyBvIGluc3RhbmNlb2YgQml3YVNjaGVtZS5QYWlyOyBvPW8uY2RyKXsKICAgICAgZnVuYyhvLmNhcik7CiAgICB9CiAgICByZXR1cm4gbzsKICB9LAoKICAvLyBSZXR1cm5zIGFuIGFycmF5IHdoaWNoIGNvbnRhaW5zIHRoZSByZXN1bHMgb2YgY2FsbGluZyBmdW5jCiAgLy8gd2l0aCB0aGUgY2FyJ3MgYXMgYW4gYXJndW1lbnQuCiAgLy8gSWYgdGhlIHJlY2VpdmVyIGlzIG5vdCBhIHByb3BlciBsaXN0LCB0aGUgbGFzdCBjZHIgaXMgaWdub3JlZC4KICAvLyBUaGUgcmVjZWl2ZXIgbXVzdCBub3QgYmUgYSBjeWNsaWMgbGlzdC4KICBtYXA6IGZ1bmN0aW9uKGZ1bmMpewogICAgdmFyIGFyeSA9IFtdOwogICAgZm9yKHZhciBvID0gdGhpczsgQml3YVNjaGVtZS5pc1BhaXIobyk7IG8gPSBvLmNkcil7CiAgICAgIGFyeS5wdXNoKGZ1bmMoby5jYXIpKTsKICAgIH0KICAgIHJldHVybiBhcnk7CiAgfSwKCiAgLy8gRGVzdHJ1Y3RpdmVseSBjb25jYXQgdGhlIGdpdmVuIGxpc3QgdG8gdGhlIHJlY2VpdmVyLgogIC8vIFRoZSByZWNlaXZlciBtdXN0IGJlIGEgcHJvcGVyIGxpc3QuCiAgLy8gUmV0dXJucyB0aGUgcmVjZWl2ZXIuCiAgY29uY2F0OiBmdW5jdGlvbihsaXN0KXsKICAgIHZhciBvID0gdGhpczsKICAgIHdoaWxlKG8gaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXIgJiYgby5jZHIgIT0gQml3YVNjaGVtZS5uaWwpewogICAgICBvID0gby5jZHI7CiAgICB9CiAgICBvLmNkciA9IGxpc3Q7CiAgICByZXR1cm4gdGhpczsKICB9LAoKICAvLyByZXR1cm5zIGh1bWFuLXJlZGFibGUgc3RyaW5nIG9mIHBhaXIKICBpbnNwZWN0OiBmdW5jdGlvbihjb252KXsKICAgIGNvbnYgfHwgKGNvbnYgPSBCaXdhU2NoZW1lLmluc3BlY3QpOwogICAgdmFyIGEgPSBbXTsKICAgIHZhciBsYXN0ID0gdGhpcy5mb3JlYWNoKGZ1bmN0aW9uKG8pewogICAgICBhLnB1c2goY29udihvKSk7CiAgICB9KTsKICAgIGlmKGxhc3QgIT0gQml3YVNjaGVtZS5uaWwpewogICAgICBhLnB1c2goIi4iKTsKICAgICAgYS5wdXNoKGNvbnYobGFzdCkpOwogICAgfQogICAgcmV0dXJuICIoIiArIGEuam9pbigiICIpICsgIikiOwogIH0sCiAgdG9TdHJpbmcgOiBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuaW5zcGVjdCgpOwogIH0sCgogIHRvX3dyaXRlOiBmdW5jdGlvbigpewogICAgcmV0dXJuIHRoaXMuaW5zcGVjdChCaXdhU2NoZW1lLnRvX3dyaXRlKTsKICB9Cn0pOwoKLy8gQ3JlYXRlcyBhIGxpc3Qgb3V0IG9mIHRoZSBhcmd1bWVudHMsIG9wdGlvbmFsbHkgY29udmVydGluZyBhbnkgbmVzdGVkIGFycmF5cyBpbnRvIG5lc3RlZCBsaXN0cyBpZiB0aGUgZGVlcCBhcmd1bWVudCBpcyB0cnVlLgovLyBFeGFtcGxlOgovLyAgIEJpd2FTY2hlbWUuTGlzdCgxLCAyLCBbMywgNF0pIDs9PiAobGlzdCAxIDIgKHZlY3RvciAzIDQpKQovLyAgIEJpd2FTY2hlbWUuZGVlcF9hcnJheV90b19saXN0KDEsIDIsIFszLCA0XSkgOz0+IChsaXN0IDEgMiAobGlzdCAzIDQpKQp2YXIgYXJyYXlfdG9fbGlzdCA9IGZ1bmN0aW9uKGFyeSwgZGVlcCkgewogIHZhciBsaXN0ID0gQml3YVNjaGVtZS5uaWw7CiAgZm9yKHZhciBpPWFyeS5sZW5ndGgtMTsgaT49MDsgaS0tKXsKICAgIHZhciBvYmogPSBhcnlbaV07CiAgICBpZihkZWVwICYmIF8uaXNBcnJheShvYmopICYmICFvYmouaXNfdmVjdG9yKXsKICAgICAgb2JqID0gYXJyYXlfdG9fbGlzdChvYmosIGRlZXApOwogICAgfQogICAgbGlzdCA9IG5ldyBCaXdhU2NoZW1lLlBhaXIob2JqLCBsaXN0KTsKICB9CiAgcmV0dXJuIGxpc3Q7Cn0KCi8vIFNoYWxsb3c6IExpc3QoMSwgMiwgWzNdKSA9PSAobGlzdCAxIDIgKHZlY3RvciAzIDQpKQpCaXdhU2NoZW1lLkxpc3QgPSBmdW5jdGlvbigpIHsKICB2YXIgYXJ5ID0gXy50b0FycmF5KGFyZ3VtZW50cyk7CiAgcmV0dXJuIGFycmF5X3RvX2xpc3QoYXJ5LCBmYWxzZSk7Cn07CgovLyBTaGFsbG93OiBhcnJheV90b19saXN0KDEsIDIsIFszXSkgPT0gKGxpc3QgMSAyICh2ZWN0b3IgMyA0KSkKQml3YVNjaGVtZS5hcnJheV90b19saXN0ID0gZnVuY3Rpb24oYXJ5KSB7CiAgcmV0dXJuIGFycmF5X3RvX2xpc3QoYXJ5LCBmYWxzZSk7Cn07CgovLyBEZWVwOiBkZWVwX2FycmF5X3RvX2xpc3QoMSwgMiwgWzMsIDRdKSA9PSAobGlzdCAxIDIgKGxpc3QgMyA0KSkKLy8gZGVlcF9hcnJheV90b19saXN0KFsxLCAyLCAzXSkgLSBkZWVwCkJpd2FTY2hlbWUuZGVlcF9hcnJheV90b19saXN0ID0gZnVuY3Rpb24oYXJ5KSB7CiAgcmV0dXJuIGFycmF5X3RvX2xpc3QoYXJ5LCB0cnVlKTsKfTsKCkJpd2FTY2hlbWUuQ29ucyA9IGZ1bmN0aW9uKGNhciwgY2RyKSB7CiAgcmV0dXJuIG5ldyBCaXdhU2NoZW1lLlBhaXIoY2FyLCBjZHIpOwp9Owo=","root/biwascheme/system/symbol.js":"Ly8KLy8gU3ltYm9sCi8vCgpCaXdhU2NoZW1lLlN5bWJvbCA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihzdHIpewogICAgdGhpcy5uYW1lID0gc3RyOwogICAgQml3YVNjaGVtZS5TeW1ib2xzWyBzdHIgXSA9IHRoaXM7CiAgfSwKCiAgaW5zcGVjdDogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiJyIrdGhpcy5uYW1lOwogICAgLy9yZXR1cm4gIiM8U3ltYm9sICciK3RoaXMubmFtZSsiJz4iOwogIH0sCgogIHRvU3RyaW5nOiBmdW5jdGlvbigpewogICAgcmV0dXJuICInIit0aGlzLm5hbWU7CiAgfSwKCiAgdG9fd3JpdGU6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5uYW1lOwogIH0KfSk7CkJpd2FTY2hlbWUuU3ltYm9scyA9IHt9OwpCaXdhU2NoZW1lLlN5bSA9IGZ1bmN0aW9uKG5hbWUsbGVhdmVDYXNlKXsKICBpZiggQml3YVNjaGVtZS5TeW1ib2xzW25hbWVdID09PSB1bmRlZmluZWQgKXsKICAgIHJldHVybiBuZXcgQml3YVNjaGVtZS5TeW1ib2wobmFtZSk7CiAgfQogIGVsc2UgaWYoICEgKEJpd2FTY2hlbWUuU3ltYm9sc1tuYW1lXSBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuU3ltYm9sKSApeyAvL3ByZS1kZWZpbmVkIG1lbWJlciAobGlrZSAnZXZhbCcgaW4gRmlyZWZveCkKICAgIHJldHVybiBuZXcgQml3YVNjaGVtZS5TeW1ib2wobmFtZSk7CiAgfQogIGVsc2V7CiAgICByZXR1cm4gQml3YVNjaGVtZS5TeW1ib2xzW25hbWVdOwogIH0KfQoKQml3YVNjaGVtZS5nZW5zeW0gPSBmdW5jdGlvbigpewogIHJldHVybiBCaXdhU2NoZW1lLlN5bShfLnVuaXF1ZUlkKCJfX2dlbnN5bSIpKTsKfTsK","root/biwascheme/system/char.js":"Ly8KLy8gQ2hhcgovLwoKQml3YVNjaGVtZS5DaGFyID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKGMpewogICAgQml3YVNjaGVtZS5DaGFyc1sgdGhpcy52YWx1ZSA9IGMgXSA9IHRoaXM7CiAgfSwKICB0b193cml0ZTogZnVuY3Rpb24oKXsKICAgIHN3aXRjaCh0aGlzLnZhbHVlKXsKICAgICAgY2FzZSAnXG4nOiByZXR1cm4gIiNcXG5ld2xpbmUiOwogICAgICBjYXNlICcgJzogIHJldHVybiAiI1xcc3BhY2UiOwogICAgICBjYXNlICdcdCc6IHJldHVybiAiI1xcdGFiIjsKICAgICAgZGVmYXVsdDogICByZXR1cm4gIiNcXCIrdGhpcy52YWx1ZTsKICAgIH0KICB9LAogIGluc3BlY3Q6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy50b193cml0ZSgpOwogIH0KfSk7CkJpd2FTY2hlbWUuQ2hhcnMgPSB7fTsKQml3YVNjaGVtZS5DaGFyLmdldCA9IGZ1bmN0aW9uKGMpIHsKICBpZih0eXBlb2YoYykgIT0gInN0cmluZyIpIHsKICAgIHRocm93IG5ldyBCaXdhU2NoZW1lLkJ1ZygiQ2hhci5nZXQ6ICIgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJpd2FTY2hlbWUuaW5zcGVjdChjKSArICIgaXMgbm90IGEgc3RyaW5nIik7CiAgfQogIGlmKCBCaXdhU2NoZW1lLkNoYXJzW2NdID09PSB1bmRlZmluZWQgKQogICAgcmV0dXJuIG5ldyBCaXdhU2NoZW1lLkNoYXIoYyk7CiAgZWxzZQogICAgcmV0dXJuIEJpd2FTY2hlbWUuQ2hhcnNbY107Cn07Cgo=","root/biwascheme/system/number.js":"Ly8KLy8gbnVtYmVyLmpzCi8vCgovLwovLyBDb21wbGV4Ci8vCkJpd2FTY2hlbWUuQ29tcGxleCA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihyZWFsLCBpbWFnKXsKICAgIHRoaXMucmVhbCA9IHJlYWw7CiAgICB0aGlzLmltYWcgPSBpbWFnOwogIH0sCiAgbWFnbml0dWRlOiBmdW5jdGlvbigpewogICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLnJlYWwgKiB0aGlzLnJlYWwgKyB0aGlzLmltYWcgKiB0aGlzLmltYWcpOwogIH0sCiAgYW5nbGU6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gTWF0aC5hdGFuMih0aGlzLmltYWcsIHRoaXMucmVhbCk7CiAgfSwKICBpc1JlYWw6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gdGhpcy5pbWFnID09IDA7CiAgfSwKICBpc1JhdGlvbmFsOiBmdW5jdGlvbigpIHsKICAgIHJldHVybiB0aGlzLmltYWcgPT0gMCAmJiBCaXdhU2NoZW1lLmlzUmF0aW9uYWwodGhpcy5yZWFsKTsKICB9LAogIGlzSW50ZWdlcjogZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLmltYWcgPT0gMCAmJiBCaXdhU2NoZW1lLmlzSW50ZWdlcih0aGlzLnJlYWwpOwogIH0sCiAgdG9TdHJpbmc6IGZ1bmN0aW9uKHJhZGl4KXsKICAgIGlmICh0aGlzLnJlYWwgPT09IDAgJiYgdGhpcy5pbWFnID09PSAwKQogICAgICByZXR1cm4gIjAiOwogICAgdmFyIGltZyA9ICIiOwogICAgaWYgKHRoaXMuaW1hZyAhPT0gMCkgewogICAgICBpZiAodGhpcy5pbWFnID4gMCAmJiB0aGlzLnJlYWwgIT09IDApewogICAgICAgICAgaW1nKz0iKyI7CiAgICAgIH0KICAgICAgc3dpdGNoKHRoaXMuaW1hZykgewogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAtMTogaW1nKz0iLSI7CiAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgZGVmYXVsdDogaW1nKz10aGlzLmltYWcudG9TdHJpbmcocmFkaXgpOwogICAgICB9CiAgICAgaW1nKz0iaSI7CiAgICB9CiAgICB2YXIgcmVhbCA9ICIiOwogICAgaWYgKHRoaXMucmVhbCAhPT0gMCl7CiAgICAgIHJlYWwgKz0gdGhpcy5yZWFsLnRvU3RyaW5nKHJhZGl4KTsKICAgIH0KICAgIHJldHVybiByZWFsK2ltZzsKICB9Cn0pCkJpd2FTY2hlbWUuQ29tcGxleC5mcm9tX3BvbGFyID0gZnVuY3Rpb24ociwgdGhldGEpewogIHZhciByZWFsID0gciAqIE1hdGguY29zKHRoZXRhKTsKICB2YXIgaW1hZyA9IHIgKiBNYXRoLnNpbih0aGV0YSk7CiAgcmV0dXJuIG5ldyBCaXdhU2NoZW1lLkNvbXBsZXgocmVhbCwgaW1hZyk7Cn0KQml3YVNjaGVtZS5Db21wbGV4LmFzc3VyZSA9IGZ1bmN0aW9uKG51bSl7CiAgaWYobnVtIGluc3RhbmNlb2YgQml3YVNjaGVtZS5Db21wbGV4KQogICAgcmV0dXJuIG51bQogIGVsc2UKICAgIHJldHVybiBuZXcgQml3YVNjaGVtZS5Db21wbGV4KG51bSwgMCk7Cn0KCi8vCi8vIFJhdGlvbmFsICh1bmZpbmlzaGVkKQovLwpCaXdhU2NoZW1lLlJhdGlvbmFsID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKG51bWVyYXRvciwgZGVub21pbmF0b3IpewogICAgdGhpcy5udW1lcmF0b3IgPSBudW1lcmF0b3I7CiAgICB0aGlzLmRlbm9taW5hdG9yID0gZGVub21pbmF0b3I7CiAgfSwKCiAgaXNJbnRlZ2VyOiBmdW5jdGlvbigpIHsKICAgICAvLyBGSVhNRQogIH0KfSkKCi8vCi8vIFByZWRpY2F0ZXMKLy8KQml3YVNjaGVtZS5pc051bWJlciA9IGZ1bmN0aW9uKHgpIHsKICByZXR1cm4gKHggaW5zdGFuY2VvZiBCaXdhU2NoZW1lLkNvbXBsZXgpICB8fAogICAgICAgICAoeCBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUmF0aW9uYWwpIHx8CiAgICAgICAgICh0eXBlb2YoeCkgPT0gJ251bWJlcicpOwp9OwpCaXdhU2NoZW1lLmlzQ29tcGxleCA9IEJpd2FTY2hlbWUuaXNOdW1iZXI7CkJpd2FTY2hlbWUuaXNSZWFsID0gZnVuY3Rpb24oeCkgewogIGlmICh4IGluc3RhbmNlb2YgQml3YVNjaGVtZS5Db21wbGV4IHx8IHggaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlJhdGlvbmFsKSB7CiAgICByZXR1cm4geC5pc1JlYWwoKQogIH0KICBlbHNlIHsKICAgIHJldHVybiAodHlwZW9mKHgpID09ICdudW1iZXInKTsKICB9Cn07CkJpd2FTY2hlbWUuaXNSYXRpb25hbCA9IGZ1bmN0aW9uKHgpIHsKICBpZiAoeCBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuQ29tcGxleCkgewogICAgcmV0dXJuIHguaXNSYXRpb25hbCgpOwogIH0KICBlbHNlIGlmICh4IGluc3RhbmNlb2YgQml3YVNjaGVtZS5SYXRpb25hbCkgewogICAgcmV0dXJuIHRydWU7CiAgfQogIGVsc2UgewogICAgcmV0dXJuICh0eXBlb2YoeCkgPT0gJ251bWJlcicpOwogIH0KfTsKQml3YVNjaGVtZS5pc0ludGVnZXIgPSBmdW5jdGlvbih4KSB7CiAgaWYgKHggaW5zdGFuY2VvZiBCaXdhU2NoZW1lLkNvbXBsZXggfHwgeCBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUmF0aW9uYWwpIHsKICAgIHJldHVybiB4LmlzSW50ZWdlcigpOwogIH0KICBlbHNlIHsKICAgIHJldHVybiAodHlwZW9mKHgpID09ICdudW1iZXInKSAmJiAoeCAlIDEgPT0gMCk7CiAgfQp9Owo=","root/biwascheme/system/port.js":"Ly8KLy8gUG9ydAovLwoKLy8gKGVvZi1vYmplY3QpCkJpd2FTY2hlbWUuZW9mID0gbmV3IE9iamVjdDsKCkJpd2FTY2hlbWUuUG9ydCA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihpc19pbiwgaXNfb3V0KXsKICAgIHRoaXMuaXNfb3BlbiA9IHRydWU7CiAgICB0aGlzLmlzX2JpbmFyeSA9IGZhbHNlOyAvLz8/CiAgICB0aGlzLmlzX2lucHV0ID0gaXNfaW47CiAgICB0aGlzLmlzX291dHB1dCA9IGlzX291dDsKICB9LAogIGNsb3NlOiBmdW5jdGlvbigpewogICAgLy8gY2xvc2UgcG9ydAogICAgdGhpcy5pc19vcGVuID0gZmFsc2U7CiAgfSwKICBpbnNwZWN0OiBmdW5jdGlvbigpewogICAgcmV0dXJuICIjPFBvcnQ+IjsKICB9LAogIHRvX3dyaXRlOiBmdW5jdGlvbigpewogICAgcmV0dXJuICIjPFBvcnQ+IjsKICB9Cn0pOwoKLy8KLy8gc3RyaW5nIHBvcnRzIChzcmZpLTYpCi8vCkJpd2FTY2hlbWUuUG9ydC5TdHJpbmdPdXRwdXQgPSBCaXdhU2NoZW1lLkNsYXNzLmV4dGVuZChuZXcgQml3YVNjaGVtZS5Qb3J0KGZhbHNlLCB0cnVlKSwgewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7CiAgICB0aGlzLmJ1ZmZlciA9IFtdOwogIH0sCiAgcHV0X3N0cmluZzogZnVuY3Rpb24oc3RyKXsKICAgIHRoaXMuYnVmZmVyLnB1c2goc3RyKTsKICB9LAogIG91dHB1dF9zdHJpbmc6IGZ1bmN0aW9uKHN0cil7CiAgICByZXR1cm4gdGhpcy5idWZmZXIuam9pbigiIik7CiAgfQp9KTsKCkJpd2FTY2hlbWUuUG9ydC5TdHJpbmdJbnB1dCA9IEJpd2FTY2hlbWUuQ2xhc3MuZXh0ZW5kKG5ldyBCaXdhU2NoZW1lLlBvcnQodHJ1ZSwgZmFsc2UpLCB7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oc3RyKXsKICAgIHRoaXMuc3RyID0gc3RyOwogIH0sCiAgZ2V0X3N0cmluZzogZnVuY3Rpb24oYWZ0ZXIpewogICAgcmV0dXJuIGFmdGVyKHRoaXMuc3RyKTsKICB9Cn0pOwoKQml3YVNjaGVtZS5Qb3J0Lk51bGxJbnB1dCA9IEJpd2FTY2hlbWUuQ2xhc3MuZXh0ZW5kKG5ldyBCaXdhU2NoZW1lLlBvcnQodHJ1ZSwgZmFsc2UpLCB7CiAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXsKICB9LAogIGdldF9zdHJpbmc6IGZ1bmN0aW9uKGFmdGVyKXsKICAgIC8vIE5ldmVyIGdpdmUgdGhlbSBhbnl0aGluZyEKICAgIHJldHVybiBhZnRlcignJyk7CiAgfQp9KTsKCkJpd2FTY2hlbWUuUG9ydC5OdWxsT3V0cHV0ID0gQml3YVNjaGVtZS5DbGFzcy5leHRlbmQobmV3IEJpd2FTY2hlbWUuUG9ydChmYWxzZSwgdHJ1ZSksIHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihvdXRwdXRfZnVuY3Rpb24pewogICAgdGhpcy5vdXRwdXRfZnVuY3Rpb24gPSBvdXRwdXRfZnVuY3Rpb247CiAgfSwKICBwdXRfc3RyaW5nOiBmdW5jdGlvbihzdHIpe30KfSk7CgpCaXdhU2NoZW1lLlBvcnQuQ3VzdG9tT3V0cHV0ID0gQml3YVNjaGVtZS5DbGFzcy5leHRlbmQobmV3IEJpd2FTY2hlbWUuUG9ydChmYWxzZSwgdHJ1ZSksIHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihvdXRwdXRfZnVuY3Rpb24pewogICAgdGhpcy5vdXRwdXRfZnVuY3Rpb24gPSBvdXRwdXRfZnVuY3Rpb247CiAgfSwKICBwdXRfc3RyaW5nOiBmdW5jdGlvbihzdHIpewogICAgdGhpcy5vdXRwdXRfZnVuY3Rpb24oc3RyKTsKICB9Cn0pOwoKQml3YVNjaGVtZS5Qb3J0LkN1c3RvbUlucHV0ID0gQml3YVNjaGVtZS5DbGFzcy5leHRlbmQobmV3IEJpd2FTY2hlbWUuUG9ydCh0cnVlLCBmYWxzZSksIHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihpbnB1dF9mdW5jdGlvbil7CiAgICB0aGlzLmlucHV0X2Z1bmN0aW9uID0gaW5wdXRfZnVuY3Rpb247CiAgfSwKICBnZXRfc3RyaW5nOiBmdW5jdGlvbihhZnRlcil7CiAgICB2YXIgaW5wdXRfZnVuY3Rpb24gPSB0aGlzLmlucHV0X2Z1bmN0aW9uOwogICAgcmV0dXJuIG5ldyBCaXdhU2NoZW1lLlBhdXNlKGZ1bmN0aW9uKHBhdXNlKSB7CiAgICAgIGlucHV0X2Z1bmN0aW9uKGZ1bmN0aW9uKGlucHV0KSB7CiAgICAgICAgcGF1c2UucmVzdW1lKGFmdGVyKGlucHV0KSk7CiAgICAgIH0pOwogICAgfSk7CiAgfQp9KTsKCi8vIFVzZXIgbXVzdCBzZXQgdGhlIGN1cnJlbnQgaW5wdXQvb3V0cHV0CkJpd2FTY2hlbWUuUG9ydC5jdXJyZW50X2lucHV0ICA9IG5ldyBCaXdhU2NoZW1lLlBvcnQuTnVsbElucHV0KCk7CkJpd2FTY2hlbWUuUG9ydC5jdXJyZW50X291dHB1dCA9IG5ldyBCaXdhU2NoZW1lLlBvcnQuTnVsbE91dHB1dCgpOwpCaXdhU2NoZW1lLlBvcnQuY3VycmVudF9lcnJvciAgPSBuZXcgQml3YVNjaGVtZS5Qb3J0Lk51bGxPdXRwdXQoKTsK","root/biwascheme/system/record.js":"","root/biwascheme/system/enumeration.js":"","root/biwascheme/system/hashtable.js":"Ly8KLy8gSGFzaHRhYmxlCi8vCi8vIEJhc2VkIG9uIHRoZSBiYXNlIEphdmFTY3JpcHQgT2JqZWN0IGNsYXNzLCBidXQKLy8gICogT2JqZWN0IHRha2VzIG9ubHkgc3RyaW5ncyBhcyBrZXlzCi8vICAqIFI2UlMgaGFzaHRhYmxlIG5lZWRzIGl0cyBvd24gaGFzaCBmdW5jdGlvbgovLyBzbyBzb21lIGhhY2tzIGFyZSBuZWVkZWQuCgpCaXdhU2NoZW1lLkhhc2h0YWJsZSA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihfaGFzaF9wcm9jLCBfZXF1aXZfcHJvYywgbXV0YWJsZSl7CiAgICB0aGlzLm11dGFibGUgPSAobXV0YWJsZSA9PT0gdW5kZWZpbmVkKSA/IHRydWUgOgogICAgICAgICAgICAgICAgICAgbXV0YWJsZSA/IHRydWUgOiBmYWxzZTsKCiAgICB0aGlzLmhhc2hfcHJvYyA9IF9oYXNoX3Byb2M7CiAgICB0aGlzLmVxdWl2X3Byb2MgPSBfZXF1aXZfcHJvYzsKCiAgICAvLyBIYXNoIChoYXNoZWQpID0+IChhcnJheSBvZiAoa2V5IGFuZCB2YWx1ZSkpCiAgICB0aGlzLnBhaXJzX29mID0ge307CiAgfSwKCiAgY2xlYXI6IGZ1bmN0aW9uKCl7CiAgICB0aGlzLnBhaXJzX29mID0ge307CiAgfSwKCiAgY2FuZGlkYXRlX3BhaXJzOiBmdW5jdGlvbihoYXNoZWQpewogICAgcmV0dXJuIHRoaXMucGFpcnNfb2ZbaGFzaGVkXTsKICB9LAoKICBhZGRfcGFpcjogZnVuY3Rpb24oaGFzaGVkLCBrZXksIHZhbHVlKXsKICAgIHZhciBwYWlycyA9IHRoaXMucGFpcnNfb2ZbaGFzaGVkXTsKCiAgICBpZiAocGFpcnMpIHsKICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pOwogICAgfQogICAgZWxzZSB7CiAgICAgIHRoaXMucGFpcnNfb2ZbaGFzaGVkXSA9IFtba2V5LCB2YWx1ZV1dOwogICAgfQogIH0sCgogIHJlbW92ZV9wYWlyOiBmdW5jdGlvbihoYXNoZWQsIHBhaXIpewogICAgdmFyIHBhaXJzID0gdGhpcy5wYWlyc19vZltoYXNoZWRdOwogICAgdmFyIGkgPSBwYWlycy5pbmRleE9mKHBhaXIpOwogICAgaWYgKGkgPT0gLTEpewogICAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5CdWcoIkhhc2h0YWJsZSNyZW1vdmVfcGFpcjogcGFpciBub3QgZm91bmQhIik7CiAgICB9CiAgICBlbHNlIHsKICAgICAgcGFpcnMuc3BsaWNlKGksIDEpOyAvL3JlbW92ZSAxIGVsZW1lbnQgZnJvbSBpLXRoIGluZGV4CiAgICB9CiAgfSwKCiAgY3JlYXRlX2NvcHk6IGZ1bmN0aW9uKG11dGFibGUpewogICAgdmFyIGNvcHkgPSBuZXcgQml3YVNjaGVtZS5IYXNodGFibGUodGhpcy5oYXNoX3Byb2MsIHRoaXMuZXF1aXZfcHJvYywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGFibGUpOwogICAgLy8gY2xvbmUgdGhlIHBhaXJzIHRvIGNvcHkKICAgIF8uZWFjaChfLmtleXModGhpcy5wYWlyc19vZiksIF8uYmluZChmdW5jdGlvbihoYXNoZWQpewogICAgICB2YXIgcGFpcnMgPSB0aGlzLnBhaXJzX29mW2hhc2hlZF07CiAgICAgIHZhciBjbG9uZWQgPSBfLm1hcChwYWlycywgZnVuY3Rpb24ocGFpcil7CiAgICAgICAgcmV0dXJuIF8uY2xvbmUocGFpcik7CiAgICAgIH0pOwogICAgICBjb3B5LnBhaXJzX29mW2hhc2hlZF0gPSBjbG9uZWQ7CiAgICB9LCB0aGlzKSk7CgogICAgcmV0dXJuIGNvcHk7CiAgfSwKCiAgc2l6ZTogZnVuY3Rpb24oKXsKICAgIHZhciBuID0gMDsKICAgIHRoaXMuX2FwcGx5X3BhaXIoZnVuY3Rpb24ocGFpcil7CiAgICAgIG4rKzsKICAgIH0pOwogICAgcmV0dXJuIG47CiAgfSwKCiAga2V5czogZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLl9hcHBseV9wYWlyKGZ1bmN0aW9uKHBhaXIpewogICAgICByZXR1cm4gcGFpclswXTsKICAgIH0pOwogIH0sCgogIHZhbHVlczogZnVuY3Rpb24oKXsKICAgIHJldHVybiB0aGlzLl9hcHBseV9wYWlyKGZ1bmN0aW9uKHBhaXIpewogICAgICByZXR1cm4gcGFpclsxXTsKICAgIH0pOwogIH0sCgogIF9hcHBseV9wYWlyOiBmdW5jdGlvbihmdW5jKXsKICAgIHZhciBhID0gW107CiAgICBfLmVhY2goXy52YWx1ZXModGhpcy5wYWlyc19vZiksIGZ1bmN0aW9uKHBhaXJzKXsKICAgICAgXy5lYWNoKHBhaXJzLCBmdW5jdGlvbihwYWlyKXsKICAgICAgICBhLnB1c2goZnVuYyhwYWlyKSk7CiAgICAgIH0pOwogICAgfSk7CiAgICByZXR1cm4gYTsKICB9LAoKICB0b193cml0ZTogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiIzxIYXNodGFibGUgc2l6ZT0iICsgdGhpcy5zaXplKCkgKyAiPiI7CiAgfQp9KTsKCi8vCi8vIEhhc2ggZnVuY3Rpb25zCi8vCgpCaXdhU2NoZW1lLkhhc2h0YWJsZS5lcXVhbF9oYXNoID0gZnVuY3Rpb24oYXIpewogIHJldHVybiBCaXdhU2NoZW1lLnRvX3dyaXRlKGFyWzBdKTsKfTsKQml3YVNjaGVtZS5IYXNodGFibGUuZXFfaGFzaCA9IEJpd2FTY2hlbWUuSGFzaHRhYmxlLmVxdWFsX2hhc2g7CkJpd2FTY2hlbWUuSGFzaHRhYmxlLmVxdl9oYXNoID0gQml3YVNjaGVtZS5IYXNodGFibGUuZXF1YWxfaGFzaDsKCkJpd2FTY2hlbWUuSGFzaHRhYmxlLnN0cmluZ19oYXNoID0gZnVuY3Rpb24oYXIpewogIHJldHVybiBhclswXTsKfTsKCkJpd2FTY2hlbWUuSGFzaHRhYmxlLnN0cmluZ19jaV9oYXNoID0gZnVuY3Rpb24oYXIpewogIHJldHVybiBfLmlzU3RyaW5nKGFyWzBdKSA/IGFyWzBdLnRvTG93ZXJDYXNlKCkgOiBhclswXTsKfTsKCkJpd2FTY2hlbWUuSGFzaHRhYmxlLnN5bWJvbF9oYXNoID0gZnVuY3Rpb24oYXIpewogIHJldHVybiAoYXJbMF0gaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlN5bWJvbCkgPyBhclswXS5uYW1lIDogYXJbMF07Cn07CgovLwovLyBFcXVpdmFsZW5jZSBmdW5jdGlvbnMKLy8KCkJpd2FTY2hlbWUuSGFzaHRhYmxlLmVxX2VxdWl2ID0gZnVuY3Rpb24oYXIpewogIHJldHVybiBCaXdhU2NoZW1lLmVxKGFyWzBdLCBhclsxXSk7Cn07CgpCaXdhU2NoZW1lLkhhc2h0YWJsZS5lcXZfZXF1aXYgPSBmdW5jdGlvbihhcil7CiAgcmV0dXJuIEJpd2FTY2hlbWUuZXF2KGFyWzBdLCBhclsxXSk7Cn07Cg==","root/biwascheme/system/syntax.js":"Ly8KLy8gU3ludGF4Ci8vCkJpd2FTY2hlbWUuU3ludGF4ID0gQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogIGluaXRpYWxpemU6IGZ1bmN0aW9uKHNuYW1lLCBmdW5jKXsKICAgIHRoaXMuc25hbWUgPSBzbmFtZTsKICAgIHRoaXMuZnVuYyA9IGZ1bmM7CiAgfSwKICB0cmFuc2Zvcm06IGZ1bmN0aW9uKHgpewogICAgaWYgKCF0aGlzLmZ1bmMpewogICAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5CdWcoInNvcnJ5LCBzeW50YXggIit0aGlzLnNuYW1lKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBpcyBhIHBzZXVkbyBzeW50YXggbm93Iik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5mdW5jKHgpOwogIH0sCiAgaW5zcGVjdDogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiIzxTeW50YXggIiArIHRoaXMuc25hbWUgKyI+IjsKICB9Cn0pCgovLyBBIGJ1aWx0LWluIHN5bnRheCBkaWQgbm90IGhhdmUgYXNzb2NpYXRlZCBTeW50YXggb2JqZWN0LgovLyBGb2xsb3dpbmcgY29kZSBpbnN0YWxsZWQgZHVtbXkgU3ludGF4IG9iamVjdHMgdG8gYnVpbHQtaW4gc3ludGF4LgpCaXdhU2NoZW1lLkNvcmVFbnZbImRlZmluZSJdID0gbmV3IEJpd2FTY2hlbWUuU3ludGF4KCJkZWZpbmUiKTsKQml3YVNjaGVtZS5Db3JlRW52WyJiZWdpbiJdICA9IG5ldyBCaXdhU2NoZW1lLlN5bnRheCgiYmVnaW4iKTsKQml3YVNjaGVtZS5Db3JlRW52WyJxdW90ZSJdICA9IG5ldyBCaXdhU2NoZW1lLlN5bnRheCgicXVvdGUiKTsKQml3YVNjaGVtZS5Db3JlRW52WyJsYW1iZGEiXSA9IG5ldyBCaXdhU2NoZW1lLlN5bnRheCgibGFtYmRhIik7CkJpd2FTY2hlbWUuQ29yZUVudlsiaWYiXSAgICAgPSBuZXcgQml3YVNjaGVtZS5TeW50YXgoImlmIik7CkJpd2FTY2hlbWUuQ29yZUVudlsic2V0ISJdICAgPSBuZXcgQml3YVNjaGVtZS5TeW50YXgoInNldCEiKTsK","root/biwascheme/system/parser.js":"","root/biwascheme/system/compiler.js":"","root/biwascheme/system/pause.js":"Ly8KLy8gcGF1c2Ugb2JqZWN0IChmYWNpbGl0eSB0byBzdG9wL3Jlc3VtZSBpbnRlcnByZXRpbmcpCi8vCkJpd2FTY2hlbWUuUGF1c2UgPSBCaXdhU2NoZW1lLkNsYXNzLmNyZWF0ZSh7CiAgLy9uZXcgKG9uX3BhdXNlOiBqYXZhc2NyaXB0IGZ1bmN0aW9uIGNhbGxpbmcgc2V0VGltZW91dCwgQWpheC5SZXF1ZXN0LCAuLikKICBpbml0aWFsaXplOiBmdW5jdGlvbihvbl9wYXVzZSl7CiAgICB0aGlzLm9uX3BhdXNlID0gb25fcGF1c2U7CiAgfSwKCiAgLy9zYXZlIHN0YXRlIG9mIGludGVycHJldGVyCiAgc2V0X3N0YXRlOiBmdW5jdGlvbihpbnRwLCB4LCBmLCBjLCBzKXsKICAgIHRoaXMuaW50ZXJwcmV0ZXIgPSBpbnRwOwogICAgdGhpcy54ID0geDsKICAgIHRoaXMuZiA9IGY7CiAgICB0aGlzLmMgPSBjOwogICAgdGhpcy5zID0gczsKICB9LAoKICAvL2NhbGwgdGhpcyB3aGVuIHJlYWR5ICh0byBmaXJlIHNldFRpbWVvdXQsIEFqYXguUmVxdWVzdC4uKQogIHJlYWR5OiBmdW5jdGlvbigpewogICAgdGhpcy5vbl9wYXVzZSh0aGlzKTsKICB9LAoKICAvL3Jlc3RhcnQgY2FsY3VsYXRpb24KICByZXN1bWU6IGZ1bmN0aW9uKHZhbHVlKXsKICAgIHJldHVybiB0aGlzLmludGVycHJldGVyLnJlc3VtZSh0cnVlLCB2YWx1ZSwgdGhpcy54LCB0aGlzLmYsIHRoaXMuYywgdGhpcy5zKQogIH0KfSk7Cgo=","root/biwascheme/system/call.js":"Ly8vCi8vLyBDYWxsCi8vLwoKLy8gVGhlIGNsYXNzIENhbGwgaXMgdXNlZCB0byBpbnZva2Ugc2NoZW1lIGNsb3N1cmUgZnJvbSAKLy8gbGlicmFyeSBmdW5jdGlvbnMuCi8vCi8vIENhbGwjaW5pdGlhbGl6ZSB0YWtlcyB0aHJlZSBhcmd1bWVudHM6IHByb2MsIGFyZ3MgYW5kIGFmdGVyLgovLyAgICogcHJvYyBpcyB0aGUgc2NoZW1lIGNsb3N1cmUgdG8gaW52b2tlLgovLyAgICogYXJncyBpcyBhbiBBcnJheSAobm90IGxpc3QhKSBvZiBhcmd1bWVudHMgZm9yIHRoZSBpbnZvY2F0aW9uLgovLyAgICogYWZ0ZXIgaXMgYSBqYXZhc2NyaXB0IGZ1bmN0aW9uIHdoaWNoIGlzIGludm9rZWQgd2hlbiAKLy8gICAgIHJldHVybmVkIGZyb20gdGhlIHByb2MuCi8vCi8vICAgICBhZnRlciB0YWtlcyB0d28gYXJndW1lbnRzOiBhciBhbmQgaW50cC4KLy8gICAgICAgKiBhciBpcyBhbiBBcnJheSB3aGljaCBjb250YWlucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZvY2F0aW9uLgovLyAgICAgICAqIGludHAgaXMgYW4gSW50ZXJwcmV0ZXIgd2hpY2ggaXMgcnVubmluZy4KLy8KLy8gICAgIElmIGFmdGVyIHJldHVybnMgYW5vdGhlciBDYWxsIG9iamVjdCwgYW5vdGhlciBpbnZvY2F0aW9uCi8vICAgICBoYXBwZW5zLiBJZiBhZnRlciByZXR1cm5zIGEgbm9ybWFsIHZhbHVlLCBpdCBpcyB0aGUgdmFsdWUKLy8gICAgIG9mIHRoZSBsaWJyYXJ5IGZ1bmN0aW9uLgovLwovLyBleGFtcGxlOgovLyAgIHJldHVybiBuZXcgQ2FsbChwcm9jLCBbeCwgeV0sIGZ1bmN0aW9uKGFyKXsgYXJbMF0gfSk7Ci8vCkJpd2FTY2hlbWUuQ2FsbCA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplOiBmdW5jdGlvbihwcm9jLCBhcmdzLCBhZnRlcil7CiAgICB0aGlzLnByb2MgPSBwcm9jOwogICAgdGhpcy5hcmdzID0gYXJnczsKICAgIHRoaXMuYWZ0ZXIgPSBhZnRlciB8fCBmdW5jdGlvbihhcil7CiAgICAgIC8vIGp1c3QgcmV0dXJuIHJlc3VsdCB3aGljaCBjbG9zdXJlIHJldHVybmVkCiAgICAgIHJldHVybiBhclswXTsKICAgIH07CiAgfSwKCiAgaW5zcGVjdDogZnVuY3Rpb24oKXsKICAgIHJldHVybiAiIzxDYWxsIGFyZ3M9IiArIHRoaXMuYXJncy5pbnNwZWN0KCkgKyAiPiI7CiAgfSwKCiAgdG9TdHJpbmc6IGZ1bmN0aW9uKCl7CiAgICByZXR1cm4gIiM8Q2FsbD4iOwogIH0sCgogIHRvX3dyaXRlOiBmdW5jdGlvbigpewogICAgcmV0dXJuICIjPENhbGw+IjsKICB9Cn0pCgovLwovLyBJdGVyYXRvciAtIGV4dGVybmFsIGl0ZXJhdG9yIGZvciBDYWxsLmZvcmVhY2gKLy8KQml3YVNjaGVtZS5JdGVyYXRvciA9IHsKICBGb3JBcnJheTogQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oYXJyKXsKICAgICAgdGhpcy5hcnIgPSBhcnI7CiAgICAgIHRoaXMuaSA9IDA7CiAgICB9LAogICAgaGFzX25leHQ6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiB0aGlzLmkgPCB0aGlzLmFyci5sZW5ndGg7CiAgICB9LAogICAgbmV4dDogZnVuY3Rpb24oKXsKICAgICAgcmV0dXJuIHRoaXMuYXJyW3RoaXMuaSsrXTsKICAgIH0KICB9KSwKICBGb3JTdHJpbmc6IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKHN0cil7CiAgICAgIHRoaXMuc3RyID0gc3RyOwogICAgICB0aGlzLmkgPSAwOwogICAgfSwKICAgIGhhc19uZXh0OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gdGhpcy5pIDwgdGhpcy5zdHIubGVuZ3RoOwogICAgfSwKICAgIG5leHQ6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiBCaXdhU2NoZW1lLkNoYXIuZ2V0KHRoaXMuc3RyLmNoYXJBdCh0aGlzLmkrKykpOwogICAgfQogIH0pLAogIEZvckxpc3Q6IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKGxzKXsKICAgICAgdGhpcy5scyA9IGxzOwogICAgfSwKICAgIGhhc19uZXh0OiBmdW5jdGlvbigpewogICAgICByZXR1cm4gKHRoaXMubHMgaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXIpICYmCiAgICAgICAgICAgICB0aGlzLmxzICE9IEJpd2FTY2hlbWUubmlsOwogICAgfSwKICAgIG5leHQ6IGZ1bmN0aW9uKCl7CiAgICAgIHZhciBwYWlyID0gdGhpcy5sczsKICAgICAgdGhpcy5scyA9IHRoaXMubHMuY2RyOwogICAgICByZXR1cm4gcGFpcjsKICAgIH0KICB9KSwKICBGb3JNdWx0aTogQml3YVNjaGVtZS5DbGFzcy5jcmVhdGUoewogICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24ob2Jqcyl7CiAgICAgIHRoaXMub2JqcyA9IG9ianM7CiAgICAgIHRoaXMuc2l6ZSA9IG9ianMubGVuZ3RoOwogICAgICB0aGlzLml0ZXJhdG9ycyA9IF8ubWFwKG9ianMsIGZ1bmN0aW9uKHgpewogICAgICAgIHJldHVybiBCaXdhU2NoZW1lLkl0ZXJhdG9yLm9mKHgpOwogICAgICB9KQogICAgfSwKICAgIGhhc19uZXh0OiBmdW5jdGlvbigpewogICAgICBmb3IodmFyIGk9MDsgaTx0aGlzLnNpemU7IGkrKykKICAgICAgICBpZighdGhpcy5pdGVyYXRvcnNbaV0uaGFzX25leHQoKSkKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgCiAgICAgIHJldHVybiB0cnVlOwogICAgfSwKICAgIG5leHQ6IGZ1bmN0aW9uKCl7CiAgICAgIHJldHVybiBfLm1hcCh0aGlzLml0ZXJhdG9ycywgZnVuY3Rpb24oaXRlKXsKICAgICAgICByZXR1cm4gaXRlLm5leHQoKTsKICAgICAgfSkKICAgIH0KICB9KSwKICBvZjogZnVuY3Rpb24ob2JqKXsKICAgIHN3aXRjaCh0cnVlKXsKICAgICAgY2FzZSAob2JqIGluc3RhbmNlb2YgQXJyYXkpOgogICAgICAgIHJldHVybiBuZXcgdGhpcy5Gb3JBcnJheShvYmopOwogICAgICBjYXNlICh0eXBlb2Yob2JqKSA9PSAic3RyaW5nIik6CiAgICAgICAgcmV0dXJuIG5ldyB0aGlzLkZvclN0cmluZyhvYmopOwogICAgICBjYXNlIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXIpOgogICAgICBjYXNlIChvYmogPT09IEJpd2FTY2hlbWUubmlsKToKICAgICAgICByZXR1cm4gbmV3IHRoaXMuRm9yTGlzdChvYmopOwogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBCaXdhU2NoZW1lLkJ1ZygiSXRlcmF0b3Iub2Y6IHVua25vd24gY2xhc3M6ICIrQml3YVNjaGVtZS5pbnNwZWN0KG9iaikpOwogICAgfQogIH0KfQoKLy8KLy8gQ2FsbC5mb3JlYWNoIC0gc2hvcnRjdXQgZm9yIHN1Y2Nlc3NpdmUgQ2FsbHMKLy8KLy8gU29tZSBsaWJyYXJ5IGZ1bmN0aW9ucywgc3VjaCBhcyBmb3ItZWFjaCBvciBtYXAsCi8vIGNhbGwgYSBjbG9zdXJlIGZvciBlYWNoIGVsZW1lbnQuIENhbGwuZm9yZWFjaCBpcyAKLy8gYSB1dGlsaXR5IHRvIGhlbHAgZGVmaW5pbmcgc3VjaCBtZXRob2RzLgovLwovLyBDYWxsLmZvcmVhY2ggdGFrZXMgYSBzZXF1ZW5jZSBhbmQgc29tZSBjYWxsYmFja3MuCi8vIFNlcXVlbmNlIGlzIGFuIEFycmF5LCBTdHJpbmcsIG9yIGxpc3QuCi8vCi8vIEV4YW1wbGU6Ci8vICAgcmV0dXJuIENhbGwuZm9yZWFjaChzZXF1ZW5jZSwgewovLyAgICAgLy8gYmVmb3JlIGVhY2ggY2FsbAovLyAgICAgY2FsbDogZnVuY3Rpb24oZWxlbSl7Ci8vICAgICAgIHJldHVybiBuZXcgQ2FsbChwcm9jLCBbZWxlbV0pOwovLyAgICAgfSwKLy8gICAgIC8vIGFmdGVyIGVhY2ggY2FsbAovLyAgICAgcmVzdWx0OiBmdW5jdGlvbih2YWx1ZSwgZWxlbSl7Ci8vICAgICAgIGFyeS5wdXNoKHZhbHVlKTsKLy8gICAgICAgLy8geW91IGNhbiByZXR1cm4gYSB2YWx1ZSB0byB0ZXJtaW5hdGUgdGhlIGxvb3AKLy8gICAgIH0sCi8vICAgICAvLyBhZnRlciBhbGwgdGhlIGNhbGxzCi8vICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7Ci8vICAgICAgIHJldHVybiBhcnk7Ci8vICAgICB9Ci8vICAgfSk7CgpCaXdhU2NoZW1lLkNhbGwuZGVmYXVsdF9jYWxsYmFja3MgPSB7CiAgY2FsbDogZnVuY3Rpb24oeCl7IHJldHVybiBuZXcgQml3YVNjaGVtZS5DYWxsKHRoaXMucHJvYywgW3hdKSB9LAogIHJlc3VsdDogZnVuY3Rpb24oKXt9LAogIGZpbmlzaDogZnVuY3Rpb24oKXt9Cn0KQml3YVNjaGVtZS5DYWxsLmZvcmVhY2ggPSBmdW5jdGlvbihvYmosIGNhbGxiYWNrcywgaXNfbXVsdGkpewogIGlzX211bHRpIHx8IChpc19tdWx0aSA9IGZhbHNlKTsKICBfLmVhY2goWyJjYWxsIiwgInJlc3VsdCIsICJmaW5pc2giXSwgZnVuY3Rpb24oa2V5KXsKICAgIGlmKCFjYWxsYmFja3Nba2V5XSkKICAgICAgY2FsbGJhY2tzW2tleV0gPSBCaXdhU2NoZW1lLkNhbGwuZGVmYXVsdF9jYWxsYmFja3Nba2V5XTsKICB9KQogIAogIHZhciBpdGVyYXRvciA9IG51bGw7CiAgdmFyIHggPSBudWxsOwoKICB2YXIgbG9vcCA9IGZ1bmN0aW9uKGFyKXsKICAgIGlmKGl0ZXJhdG9yKXsKICAgICAgdmFyIHJldCA9IGNhbGxiYWNrc1sicmVzdWx0Il0oYXJbMF0sIHgpOwogICAgICBpZihyZXQgIT09IHVuZGVmaW5lZCkgcmV0dXJuIHJldDsKICAgIH0KICAgIGVsc2V7IC8vIGZpcnN0IGxhcAogICAgICBpZihpc19tdWx0aSkKICAgICAgICBpdGVyYXRvciA9IG5ldyBCaXdhU2NoZW1lLkl0ZXJhdG9yLkZvck11bHRpKG9iaik7CiAgICAgIGVsc2UKICAgICAgICBpdGVyYXRvciA9IEJpd2FTY2hlbWUuSXRlcmF0b3Iub2Yob2JqKTsKICAgIH0KCiAgICBpZighaXRlcmF0b3IuaGFzX25leHQoKSl7CiAgICAgIHJldHVybiBjYWxsYmFja3NbImZpbmlzaCJdKCk7CiAgICB9CiAgICBlbHNlewogICAgICB4ID0gaXRlcmF0b3IubmV4dCgpOwogICAgICB2YXIgcmVzdWx0ID0gY2FsbGJhY2tzWyJjYWxsIl0oeCk7CiAgICAgIHJlc3VsdC5hZnRlciA9IGxvb3A7CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9CiAgfQogIHJldHVybiBsb29wKG51bGwpOwp9CkJpd2FTY2hlbWUuQ2FsbC5tdWx0aV9mb3JlYWNoID0gZnVuY3Rpb24ob2JqLCBjYWxsYmFja3MpewogIHJldHVybiBCaXdhU2NoZW1lLkNhbGwuZm9yZWFjaChvYmosIGNhbGxiYWNrcywgdHJ1ZSk7Cn0KCg==","root/biwascheme/system/interpreter.js":"","root/biwascheme/system/promise.js":"Ly8KLy8gUjdSUyBQcm9taXNlIChsYXp5IGxpYnJhcnkpCi8vCkJpd2FTY2hlbWUuUHJvbWlzZSA9IEJpd2FTY2hlbWUuQ2xhc3MuY3JlYXRlKHsKICBpbml0aWFsaXplIDogZnVuY3Rpb24oZG9uZSwgdGh1bmtfb3JfdmFsdWUpewogICAgdGhpcy5ib3ggPSBbZG9uZSwgdGh1bmtfb3JfdmFsdWVdOwogIH0sCgogIC8vIFJldHVybiB0cnVlIHdoZW4gdGhpcyBwcm9taXNlIGlzIGFscmVhZHkgY2FsY3VsYXRlZAogIGlzX2RvbmU6IGZ1bmN0aW9uKCkgewogICAgcmV0dXJuIHRoaXMuYm94WzBdOwogIH0sCgogIC8vIFJldHVybiBjYWxjdWxhdGVkIHZhbHVlIG9mIHRoaXMgcHJvbWlzZQogIHZhbHVlOiBmdW5jdGlvbigpIHsKICAgIGlmICghdGhpcy5pc19kb25lKCkpIHsKICAgICAgdGhyb3cgbmV3IEJpd2FTY2hlbWUuQnVnKCJ0aGlzIHByb21pc2UgaXMgbm90IGNhbGN1bGF0ZWQgeWV0Iik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5ib3hbMV07CiAgfSwKCiAgdGh1bms6IGZ1bmN0aW9uKCkgewogICAgaWYgKHRoaXMuaXNfZG9uZSgpKSB7CiAgICAgIHRocm93IG5ldyBCaXdhU2NoZW1lLkJ1ZygidGhpcyBwcm9taXNlIGRvZXMgbm90IGtub3cgdGhlIHRodW5rIik7CiAgICB9CiAgICByZXR1cm4gdGhpcy5ib3hbMV07CiAgfSwKCiAgdXBkYXRlX3dpdGg6IGZ1bmN0aW9uKG5ld19wcm9taXNlKSB7CiAgICB0aGlzLmJveFswXSA9IG5ld19wcm9taXNlLmJveFswXTsKICAgIHRoaXMuYm94WzFdID0gbmV3X3Byb21pc2UuYm94WzFdOwogICAgbmV3X3Byb21pc2UuYm94ID0gdGhpcy5ib3g7CiAgfQp9KTsKQml3YVNjaGVtZS5pc1Byb21pc2UgPSBmdW5jdGlvbihvYmopIHsKICByZXR1cm4gKG9iaiBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUHJvbWlzZSk7Cn07CgovLyBDcmVhdGUgZnJlc2ggcHJvbWlzZQpCaXdhU2NoZW1lLlByb21pc2UuZnJlc2ggPSBmdW5jdGlvbih0aHVuaykgewogIHJldHVybiBuZXcgQml3YVNjaGVtZS5Qcm9taXNlKGZhbHNlLCB0aHVuayk7Cn07Ci8vIENyZWF0ZSBjYWxjdWxhdGVkIHByb21pc2UKQml3YVNjaGVtZS5Qcm9taXNlLmRvbmUgPSBmdW5jdGlvbih2YWx1ZSkgewogIHJldHVybiBuZXcgQml3YVNjaGVtZS5Qcm9taXNlKHRydWUsIHZhbHVlKTsKfTsK","root/biwascheme/library/infra.js":"","root/biwascheme/library/r6rs_lib.js":"Ly8KLy8gUjZSUyBCYXNlIGxpYnJhcnkKLy8KCmlmKCB0eXBlb2YoQml3YVNjaGVtZSkhPSdvYmplY3QnICkgQml3YVNjaGVtZT17fTsgd2l0aChCaXdhU2NoZW1lKSB7CiAgLy8vCiAgLy8vIFI2UlMgQmFzZSBsaWJyYXJ5CiAgLy8vCgogIC8vCiAgLy8gICAgICAgIDExLjQgIEV4cHJlc3Npb25zCiAgLy8KICAvLyAgICAgICAgICAgIDExLjQuMSAgUXVvdGF0aW9uCiAgLy8ocXVvdGUpCiAgLy8gICAgICAgICAgICAxMS40LjIgIFByb2NlZHVyZXMKICAvLyhsYW1iZGEpCiAgLy8gICAgICAgICAgICAxMS40LjMgIENvbmRpdGlvbmFhcgogIC8vKGlmKQogIC8vICAgICAgICAgICAgMTEuNC40ICBBc3NpZ25tZW50cwogIC8vKHNldCEpCiAgLy8gICAgICAgICAgICAxMS40LjUgIERlcml2ZWQgY29uZGl0aW9uYWFyCgogIGRlZmluZV9zeW50YXgoImNvbmQiLCBmdW5jdGlvbih4KXsKICAgIHZhciBjbGF1c2VzID0geC5jZHI7CiAgICBpZighKGNsYXVzZXMgaW5zdGFuY2VvZiBQYWlyKSB8fCBjbGF1c2VzID09PSBuaWwpewogICAgICB0aHJvdyBuZXcgRXJyb3IoIm1hbGZvcm1lZCBjb25kOiBjb25kIG5lZWRzIGxpc3QgYnV0IGdvdCAiICsKICAgICAgICAgICAgICAgICAgICAgIHRvX3dyaXRlX3NzKGNsYXVzZXMpKTsKICAgIH0KICAgIC8vIFRPRE86IGFzc2VydCB0aGF0IGNsYXVzZXMgaXMgYSBwcm9wZXIgbGlzdAoKICAgIHZhciByZXQgPSBudWxsOwogICAgXy5lYWNoKGNsYXVzZXMudG9fYXJyYXkoKS5yZXZlcnNlKCksIGZ1bmN0aW9uKGNsYXVzZSl7CiAgICAgIGlmKCEoY2xhdXNlIGluc3RhbmNlb2YgUGFpcikpewogICAgICAgIHRocm93IG5ldyBFcnJvcigiYmFkIGNsYXVzZSBpbiBjb25kOiAiICsgdG9fd3JpdGVfc3MoY2xhdXNlKSk7CiAgICAgIH0KCiAgICAgIGlmKGNsYXVzZS5jYXIgPT09IFN5bSgiZWxzZSIpKXsKICAgICAgICBpZihyZXQgIT09IG51bGwpewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCInZWxzZScgY2xhdXNlIG9mIGNvbmQgZm9sbG93ZWQgYnkgbW9yZSBjbGF1c2VzOiAiICsKICAgICAgICAgICAgICAgICAgICAgICAgICB0b193cml0ZV9zcyhjbGF1c2VzKSk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYoY2xhdXNlLmNkciA9PT0gbmlsKXsKICAgICAgICAgIC8vIHBhdHRlcm4gQTogKGVsc2UpCiAgICAgICAgICAvLyAgLT4gI2YgICAgICAgICAgICA7IG5vdCBzcGVjaWZpZWQgaW4gUjZSUy4uLj8KICAgICAgICAgIHJldCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmKGNsYXVzZS5jZHIuY2RyID09PSBuaWwpewogICAgICAgICAgLy8gcGF0dGVybiBCOiAoZWxzZSBleHByKQogICAgICAgICAgLy8gIC0+IGV4cHIKICAgICAgICAgIHJldCA9IGNsYXVzZS5jZHIuY2FyOwogICAgICAgIH0KICAgICAgICBlbHNlewogICAgICAgICAgLy8gcGF0dGVybiBDOiAoZWxzZSBleHByIC4uLikKICAgICAgICAgIC8vICAtPiAoYmVnaW4gZXhwciAuLi4pCiAgICAgICAgICByZXQgPSBuZXcgUGFpcihTeW0oImJlZ2luIiksIGNsYXVzZS5jZHIpOwogICAgICAgIH0KICAgICAgfQogICAgICBlbHNlewogICAgICAgIHZhciB0ZXN0ID0gY2xhdXNlLmNhcjsKICAgICAgICBpZihjbGF1c2UuY2RyID09PSBuaWwpewogICAgICAgICAgLy8gcGF0dGVybiAxOiAodGVzdCkKICAgICAgICAgIC8vICAtPiAob3IgdGVzdCByZXQpCiAgICAgICAgICByZXQgPSBMaXN0KFN5bSgib3IiKSwgdGVzdCwgcmV0KTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAoY2xhdXNlLmNkci5jZHIgPT09IG5pbCl7CiAgICAgICAgICAvLyBwYXR0ZXJuIDI6ICh0ZXN0IGV4cHIpCiAgICAgICAgICAvLyAgLT4gKGlmIHRlc3QgZXhwciByZXQpCiAgICAgICAgICByZXQgPSBMaXN0KFN5bSgiaWYiKSwgdGVzdCwgY2xhdXNlLmNkci5jYXIsIHJldCk7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYoY2xhdXNlLmNkci5jYXIgPT09IFN5bSgiPT4iKSl7CiAgICAgICAgICAvLyBwYXR0ZXJuIDM6ICh0ZXN0ID0+IGV4cHIpCiAgICAgICAgICAvLyAgLT4gKGxldCAoKCM8Z2Vuc3ltMT4gdGVzdCkpCiAgICAgICAgICAvLyAgICAgICAoaWYgdGVzdCAoZXhwciAjPGdlbnN5bTE+KSByZXQpKQogICAgICAgICAgdmFyIHRlc3QgPSBjbGF1c2UuY2FyLCBleHByID0gY2xhdXNlLmNkci5jZHIuY2FyOwogICAgICAgICAgdmFyIHRtcF9zeW0gPSBCaXdhU2NoZW1lLmdlbnN5bSgpOwoKICAgICAgICAgIHJldCA9IExpc3QoU3ltKCJsZXQiKSwKICAgICAgICAgICAgICAgICAgICAgTGlzdCggTGlzdCh0bXBfc3ltLCB0ZXN0KSApLAogICAgICAgICAgICAgICAgICAgICBMaXN0KFN5bSgiaWYiKSwgdGVzdCwgTGlzdChleHByLCB0bXBfc3ltKSwgcmV0KSk7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAvLyBwYXR0ZXJuIDQ6ICh0ZXN0IGV4cHIgLi4uKQogICAgICAgICAgLy8gIC0+IChpZiB0ZXN0IChiZWdpbiBleHByIC4uLikgcmV0KQogICAgICAgICAgcmV0ID0gTGlzdChTeW0oImlmIiksIHRlc3QsCiAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKFN5bSgiYmVnaW4iKSwgY2xhdXNlLmNkciksCiAgICAgICAgICAgICAgICAgICAgIHJldCk7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKICAgIHJldHVybiByZXQ7CiAgfSk7CgogIGRlZmluZV9zeW50YXgoImNhc2UiLCBmdW5jdGlvbih4KXsKICAgIHZhciB0bXBfc3ltID0gQml3YVNjaGVtZS5nZW5zeW0oKTsKCiAgICBpZih4LmNkciA9PT0gbmlsKXsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJjYXNlOiBhdCBsZWFzdCBvbmUgY2xhdXNlIGlzIHJlcXVpcmVkIik7CiAgICB9CiAgICBlbHNlIGlmKCEoeC5jZHIgaW5zdGFuY2VvZiBQYWlyKSl7CiAgICAgIHRocm93IG5ldyBFcnJvcigiY2FzZTogcHJvcGVyIGxpc3QgaXMgcmVxdWlyZWQiKTsKICAgIH0KICAgIGVsc2V7CiAgICAgIC8vIChjYXNlIGtleSBjbGF1c2VzIC4uLi4pCiAgICAgIC8vICAtPiAobGV0ICgoIzxnZW5zeW0xPiBrZXkpKQogICAgICB2YXIga2V5ID0geC5jZHIuY2FyOwogICAgICB2YXIgY2xhdXNlcyA9IHguY2RyLmNkcjsKCiAgICAgIHZhciByZXQgPSB1bmRlZmluZWQ7CiAgICAgIF8uZWFjaChjbGF1c2VzLnRvX2FycmF5KCkucmV2ZXJzZSgpLCBmdW5jdGlvbihjbGF1c2UpewogICAgICAgIGlmKGNsYXVzZS5jYXIgPT09IFN5bSgiZWxzZSIpKXsKICAgICAgICAgIC8vIHBhdHRlcm4gMDogKGVsc2UgZXhwciAuLi4pCiAgICAgICAgICAvLyAgLT4gKGJlZ2luIGV4cHIgLi4uKQogICAgICAgICAgaWYocmV0ID09PSB1bmRlZmluZWQpewogICAgICAgICAgICByZXQgPSBuZXcgUGFpcihTeW0oImJlZ2luIiksIGNsYXVzZS5jZHIpOwogICAgICAgICAgfQogICAgICAgICAgZWxzZXsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJjYXNlOiAnZWxzZScgY2xhdXNlIGZvbGxvd2VkIGJ5IG1vcmUgY2xhdXNlczogIiArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b193cml0ZV9zcyhjbGF1c2VzKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAvLyBwYXR0ZXJuIDE6ICgoZGF0dW0gLi4uKSBleHByIC4uLikKICAgICAgICAgIC8vICAtPiAoaWYgKG9yIChlcXY/IGtleSAocXVvdGUgZDEpKSAuLi4pIChiZWdpbiBleHByIC4uLikgcmV0KQogICAgICAgICAgcmV0ID0gTGlzdCgKICAgICAgICAgICAgU3ltKCJpZiIpLAogICAgICAgICAgICBuZXcgUGFpcihTeW0oIm9yIiksIGFycmF5X3RvX2xpc3QoXy5tYXAoY2xhdXNlLmNhci50b19hcnJheSgpLCBmdW5jdGlvbihkKXsKICAgICAgICAgICAgICAgIHJldHVybiBMaXN0KFN5bSgiZXF2PyIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wX3N5bSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIExpc3QoU3ltKCJxdW90ZSIpLCBkKSk7CiAgICAgICAgICAgIH0pKSksCiAgICAgICAgICAgIG5ldyBQYWlyKFN5bSgiYmVnaW4iKSwgY2xhdXNlLmNkciksCiAgICAgICAgICAgIHJldAogICAgICAgICAgKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gbmV3IFBhaXIoU3ltKCJsZXQxIiksCiAgICAgICAgICAgICAgIG5ldyBQYWlyKHRtcF9zeW0sCiAgICAgICAgICAgICAgICAgbmV3IFBhaXIoa2V5LAogICAgICAgICAgICAgICAgICAgbmV3IFBhaXIocmV0LCBuaWwpKSkpOwogICAgfQogIH0pOwoKICBkZWZpbmVfc3ludGF4KCJhbmQiLCBmdW5jdGlvbih4KXsKICAgIC8vIChhbmQgYSBiIGMpID0+IChpZiBhIChpZiBiIGMgI2YpICNmKQogICAgLy90b2RvOiBjaGVjayBpbXByb3BlciBsaXN0CiAgICBpZih4LmNkciA9PSBuaWwpIHJldHVybiB0cnVlOwoKICAgIHZhciBvYmpzID0geC5jZHIudG9fYXJyYXkoKTsKICAgIHZhciBpID0gb2Jqcy5sZW5ndGgtMTsKICAgIHZhciB0ID0gb2Jqc1tpXTsKICAgIGZvcihpPWktMTsgaT49MDsgaS0tKQogICAgICB0ID0gTGlzdChTeW0oImlmIiksIG9ianNbaV0sIHQsIGZhbHNlKTsKCiAgICByZXR1cm4gdDsKICB9KQoKICBkZWZpbmVfc3ludGF4KCJvciIsIGZ1bmN0aW9uKHgpewogICAgLy8gKG9yIGEgYiBjKSA9PiAoaWYgYSBhIChpZiBiIGIgKGlmIGMgYyAjZikpKQogICAgLy90b2RvOiBjaGVjayBpbXByb3BlciBsaXN0CgogICAgdmFyIG9ianMgPSB4LmNkci50b19hcnJheSgpCiAgICB2YXIgZiA9IGZhbHNlOwogICAgZm9yKHZhciBpPW9ianMubGVuZ3RoLTE7IGk+PTA7IGktLSkKICAgICAgZiA9IExpc3QoU3ltKCJpZiIpLCBvYmpzW2ldLCBvYmpzW2ldLCBmKTsKCiAgICByZXR1cm4gZjsKICB9KQoKICAvLyAgICAgICAgICAgIDExLjQuNiAgQmluZGluZyBjb25zdHJ1Y3RzCiAgZGVmaW5lX3N5bnRheCgibGV0IiwgZnVuY3Rpb24oeCl7CiAgICAvLyhsZXQgKChhIDEpIChiIDIpKSAocHJpbnQgYSkgKCsgYSBiKSkKICAgIC8vPT4gKChsYW1iZGEgKGEgYikgKHByaW50IGEpICgrIGEgYikpIDEgMikKICAgIHZhciBuYW1lID0gbnVsbDsKICAgIGlmICh4LmNkci5jYXIgaW5zdGFuY2VvZiBTeW1ib2wpIHsKICAgICAgbmFtZSA9IHguY2RyLmNhcjsKICAgICAgeCA9IHguY2RyOwogICAgfQogICAgdmFyIGJpbmRzID0geC5jZHIuY2FyLCBib2R5ID0geC5jZHIuY2RyOwoKICAgIGlmKCghKGJpbmRzIGluc3RhbmNlb2YgUGFpcikpICYmIGJpbmRzICE9IEJpd2FTY2hlbWUubmlsKXsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJsZXQ6IG5lZWQgYSBwYWlyIGZvciBiaW5kaW5nczogZ290ICIrdG9fd3JpdGUoYmluZHMpKTsKICAgIH0KCiAgICB2YXIgdmFycyA9IG5pbCwgdmFscyA9IG5pbDsKICAgIGZvcih2YXIgcD1iaW5kczsgcCBpbnN0YW5jZW9mIFBhaXI7IHA9cC5jZHIpewogICAgICBpZighKHAuY2FyIGluc3RhbmNlb2YgUGFpcikpewogICAgICAgIHRocm93IG5ldyBFcnJvcigibGV0OiBuZWVkIGEgcGFpciBmb3IgYmluZGluZ3M6IGdvdCAiK3RvX3dyaXRlKHAuY2FyKSk7CiAgICAgIH0KICAgICAgdmFycyA9IG5ldyBQYWlyKHAuY2FyLmNhciwgdmFycyk7CiAgICAgIHZhbHMgPSBuZXcgUGFpcihwLmNhci5jZHIuY2FyLCB2YWxzKTsKICAgIH0KCiAgICB2YXIgbGFtYmRhID0gbnVsbDsKICAgIGlmIChuYW1lKSB7CiAgICAgIC8vIChsZXQgbG9vcCAoKGEgMSkgKGIgMikpIGJvZHkgLi4pCiAgICAgIC8vPT4gKGxldHJlYyAoKGxvb3AgKGxhbWJkYSAoYSBiKSBib2R5IC4uKSkpIChsb29wIDEgMikpCiAgICAgIHZhcnMgPSBhcnJheV90b19saXN0KHZhcnMudG9fYXJyYXkoKS5yZXZlcnNlKCkpOwogICAgICB2YWxzID0gYXJyYXlfdG9fbGlzdCh2YWxzLnRvX2FycmF5KCkucmV2ZXJzZSgpKTsKCiAgICAgIHZhciBib2R5X2xhbWJkYSA9IG5ldyBQYWlyKFN5bSgibGFtYmRhIiksIG5ldyBQYWlyKHZhcnMsIGJvZHkpKTsKICAgICAgdmFyIGluaXRfY2FsbCA9IG5ldyBQYWlyKG5hbWUsIHZhbHMpOwoKICAgICAgbGFtYmRhID0gTGlzdChTeW0oImxldHJlYyIpLAogICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKExpc3QobmFtZSwgYm9keV9sYW1iZGEpLCBuaWwpLAogICAgICAgICAgICAgICAgICAgIGluaXRfY2FsbCk7CiAgICB9CiAgICBlbHNlIHsKICAgICAgbGFtYmRhID0gbmV3IFBhaXIobmV3IFBhaXIoU3ltKCJsYW1iZGEiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhaXIodmFycywgYm9keSkpLAogICAgICAgICAgICAgICAgICAgICAgICB2YWxzKTsKICAgIH0KICAgIHJldHVybiBsYW1iZGE7CiAgfSkKCiAgZGVmaW5lX3N5bnRheCgibGV0KiIsIGZ1bmN0aW9uKHgpewogICAgLy8obGV0KiAoKGEgMSkgKGIgYSkpIChwcmludCBhKSAoKyBhIGIpKQogICAgLy8tPiAobGV0ICgoYSAxKSkKICAgIC8vICAgICAobGV0ICgoYiBhKSkgKHByaW50IGEpICgrIGEgYikpKQogICAgdmFyIGJpbmRzID0geC5jZHIuY2FyLCBib2R5ID0geC5jZHIuY2RyOwoKICAgIGlmKGJpbmRzID09PSBuaWwpCiAgICAgIHJldHVybiBuZXcgUGFpcihTeW0oImxldCIpLCBuZXcgUGFpcihuaWwsIGJvZHkpKTsKCiAgICBpZighKGJpbmRzIGluc3RhbmNlb2YgUGFpcikpCiAgICAgIHRocm93IG5ldyBFcnJvcigibGV0KjogbmVlZCBhIHBhaXIgZm9yIGJpbmRpbmdzOiBnb3QgIit0b193cml0ZShiaW5kcykpOwoKICAgIHZhciByZXQgPSBudWxsOwogICAgXy5lYWNoKGJpbmRzLnRvX2FycmF5KCkucmV2ZXJzZSgpLCBmdW5jdGlvbihiaW5kKXsKICAgICAgcmV0ID0gbmV3IFBhaXIoU3ltKCJsZXQiKSwKICAgICAgICAgICAgICAgbmV3IFBhaXIobmV3IFBhaXIoYmluZCwgbmlsKSwKICAgICAgICAgICAgICAgICByZXQgPT0gbnVsbCA/IGJvZHkgOiBuZXcgUGFpcihyZXQsIG5pbCkpKTsKICAgIH0pCiAgICByZXR1cm4gcmV0OwogIH0pCgogIHZhciBleHBhbmRfbGV0cmVjX3N0YXIgPSBmdW5jdGlvbih4KXsKICAgIHZhciBiaW5kcyA9IHguY2RyLmNhciwgYm9keSA9IHguY2RyLmNkcjsKCiAgICBpZighKGJpbmRzIGluc3RhbmNlb2YgUGFpcikpCiAgICAgIHRocm93IG5ldyBFcnJvcigibGV0cmVjKjogbmVlZCBhIHBhaXIgZm9yIGJpbmRpbmdzOiBnb3QgIit0b193cml0ZShiaW5kcykpOwoKICAgIHZhciByZXQgPSBib2R5OwogICAgXy5lYWNoKGJpbmRzLnRvX2FycmF5KCkucmV2ZXJzZSgpLCBmdW5jdGlvbihiaW5kKXsKICAgICAgcmV0ID0gbmV3IFBhaXIobmV3IFBhaXIoU3ltKCJzZXQhIiksIGJpbmQpLAogICAgICAgICAgICAgIHJldCk7CiAgICB9KQogICAgdmFyIGxldGJvZHkgPSBuaWw7CiAgICBfLmVhY2goYmluZHMudG9fYXJyYXkoKS5yZXZlcnNlKCksIGZ1bmN0aW9uKGJpbmQpewogICAgICBsZXRib2R5ID0gbmV3IFBhaXIobmV3IFBhaXIoYmluZC5jYXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKEJpd2FTY2hlbWUudW5kZWYsIG5pbCkpLAogICAgICAgICAgICAgICAgICBsZXRib2R5KTsKICAgIH0pCiAgICByZXR1cm4gbmV3IFBhaXIoU3ltKCJsZXQiKSwKICAgICAgICAgICAgIG5ldyBQYWlyKGxldGJvZHksCiAgICAgICAgICAgICAgIHJldCkpOwogIH0KICBkZWZpbmVfc3ludGF4KCJsZXRyZWMiLCBleHBhbmRfbGV0cmVjX3N0YXIpOwogIGRlZmluZV9zeW50YXgoImxldHJlYyoiLCBleHBhbmRfbGV0cmVjX3N0YXIpOwoKICBkZWZpbmVfc3ludGF4KCJsZXQtdmFsdWVzIiwgZnVuY3Rpb24oeCkgewogICAgLy8gKGxldC12YWx1ZXMgKCgoYSBiKSAodmFsdWVzIDEgMikpCiAgICAvLyAgICAgICAgICAgICAgICgoYyBkIC4gZSkgKHZhbHVlcyAzIDQgYSkpKQogICAgLy8gICAgICAgICAgICAgIChwcmludCBhIGIgYyBkIGUpKQogICAgLy8gPT4KICAgIC8vIChsZXQgKCgjPGdlbnN5bTE+IChsYW1iZGEgKCkgKHZhbHVlcyAxIDIpKSkKICAgIC8vICAgICAgICgjPGdlbnN5bTI+IChsYW1iZGEgKCkgKHZhbHVlcyAzIDQgYSkpKSkKICAgIC8vICAgKGxldCotdmFsdWVzICgoKGEgYikgIzxnZW5zeW0xPikKICAgIC8vICAgICAgICAgICAgICAgICAoKGMgZCAuIGUpICM8Z2Vuc3ltMj4pKQogICAgLy8gICAgICAgICAgICAgICAgIChwcmludCBhIGIgYyBkIGUpKSkKICAgICAgdmFyIG12X2JpbmRpbmdzID0geC5jZHIuY2FyOwogICAgICB2YXIgYm9keSA9IHguY2RyLmNkcjsKICAgICAgdmFyIHJldCA9IG51bGw7CgogICAgICB2YXIgbGV0X2JpbmRpbmdzID0gbmlsOwogICAgICB2YXIgbGV0X3N0YXJfdmFsdWVzX2JpbmRpbmdzID0gbmlsOwogICAgICBfLmVhY2gobXZfYmluZGluZ3MudG9fYXJyYXkoKS5yZXZlcnNlKCksIGZ1bmN0aW9uIChpdGVtKSB7CgkgIHZhciBpbml0ID0gaXRlbS5jZHIuY2FyOwoJICB2YXIgdG1wc3ltID0gQml3YVNjaGVtZS5nZW5zeW0oKQoJICB2YXIgYmluZGluZyA9IG5ldyBQYWlyKHRtcHN5bSwKCQkJCSBuZXcgUGFpcigKCQkJCQkgIG5ldyBQYWlyKFN5bSgibGFtYmRhIiksIG5ldyBQYWlyKG5pbCwKCQkJCQkJCQkJICAgbmV3IFBhaXIoaW5pdCwgbmlsKSkpLAoJCQkJCSAgbmlsKSk7CgkgIGxldF9iaW5kaW5ncyA9IG5ldyBQYWlyKGJpbmRpbmcsIGxldF9iaW5kaW5ncyk7CgoJICB2YXIgZm9ybWFscyA9IGl0ZW0uY2FyOwoJICBsZXRfc3Rhcl92YWx1ZXNfYmluZGluZ3MgPSBuZXcgUGFpcihuZXcgUGFpciAoZm9ybWFscywgbmV3IFBhaXIobmV3IFBhaXIodG1wc3ltLCBuaWwpLCBuaWwpKSwKCQkJCQkgICAgICBsZXRfc3Rhcl92YWx1ZXNfYmluZGluZ3MpOwogICAgICB9KTsKCiAgICAgIHZhciBsZXRfc3Rhcl92YWx1ZXMgPSBuZXcgUGFpcihTeW0oImxldCotdmFsdWVzIiksCgkJCQkgICAgIG5ldyBQYWlyKGxldF9zdGFyX3ZhbHVlc19iaW5kaW5ncywKCQkJCQkgICAgICBib2R5KSk7CiAgICAgIHJldCA9IG5ldyBQYWlyKFN5bSgibGV0IiksCgkJICAgICBuZXcgUGFpcihsZXRfYmluZGluZ3MsCgkJCSAgICAgIG5ldyBQYWlyIChsZXRfc3Rhcl92YWx1ZXMsIG5pbCkpKTsKICAgICAgcmV0dXJuIHJldDsKCiAgfSk7CgogIC8vbGV0Ki12YWx1ZXMKICBkZWZpbmVfc3ludGF4KCJsZXQqLXZhbHVlcyIsIGZ1bmN0aW9uKHgpewogICAgLy8gKGxldCotdmFsdWVzICgoKGEgYikgKHZhbHVlcyAxIDIpKQogICAgLy8gICAgICAgICAgICAgICAoKGMgZCAuIGUpICh2YWx1ZXMgMyA0IGEpKSkKICAgIC8vICAgKHByaW50IGEgYiBjIGQgZSkpCiAgICAvLyAtPiAoY2FsbC13aXRoLXZhbHVlcwogICAgLy8gICAgICAobGFtYmRhICgpICh2YWx1ZXMgMSAyKSkKICAgIC8vICAgICAgKGxhbWJkYSAoYSBiKQogICAgLy8gICAgICAgIChjYWxsLXdpdGgtdmFsdWVzCiAgICAvLyAgICAgICAgICAobGFtYmRhICgpICh2YWx1ZXMgMyA0IGEpKQogICAgLy8gICAgICAgICAgKGxhbWJkYSAoYyBkIC4gZSkKICAgIC8vICAgICAgICAgICAgKHByaW50IGEgYiBjIGQgZSkpKSkpCiAgICB2YXIgbXZfYmluZGluZ3MgPSB4LmNkci5jYXI7CiAgICB2YXIgYm9keSA9IHguY2RyLmNkcjsKCiAgICB2YXIgcmV0ID0gbnVsbDsKCiAgICBfLmVhY2gobXZfYmluZGluZ3MudG9fYXJyYXkoKS5yZXZlcnNlKCksIGZ1bmN0aW9uKGl0ZW0pewogICAgICB2YXIgZm9ybWFscyA9IGl0ZW0uY2FyLCBpbml0ID0gaXRlbS5jZHIuY2FyOwogICAgICByZXQgPSBuZXcgUGFpcihTeW0oImNhbGwtd2l0aC12YWx1ZXMiKSwKICAgICAgICAgICAgICBuZXcgUGFpcihuZXcgUGFpcihTeW0oImxhbWJkYSIpLAogICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhaXIobmlsLAogICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGFpcihpbml0LCBuaWwpKSksCiAgICAgICAgICAgICAgICBuZXcgUGFpcihuZXcgUGFpcihTeW0oImxhbWJkYSIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUGFpcihmb3JtYWxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZXQgPT0gbnVsbCA/IGJvZHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBuZXcgUGFpcihyZXQsIG5pbCkpKSksIG5pbCkpKTsKICAgIH0pOwogICAgcmV0dXJuIHJldDsKICB9KTsKICAvLyAgICAgICAgICAgIDExLjQuNyAgU2VxdWVuY2luZwogIC8vKGJlZ2luKQoKICAvLwogIC8vICAgICAgICAxMS41ICBFcXVpdmFsZW5jZSBwcmVkaWNhdGVzCiAgLy8KICBkZWZpbmVfbGliZnVuYygiZXF2PyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBCaXdhU2NoZW1lLmVxdihhclswXSwgYXJbMV0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImVxPyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBCaXdhU2NoZW1lLmVxKGFyWzBdLCBhclsxXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZXF1YWw/IiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIEJpd2FTY2hlbWUuZXF1YWwoYXJbMF0sIGFyWzFdKTsKICB9KQoKICAvLwogIC8vICAgICAgICAxMS42ICBQcm9jZWR1cmUgcHJlZGljYXRlCiAgLy8KICAvLyJwcm9jZWR1cmU/IiwgMSwgMQogIGRlZmluZV9saWJmdW5jKCJwcm9jZWR1cmU/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIEJpd2FTY2hlbWUuaXNQcm9jZWR1cmUoYXJbMF0pOwogIH0pCgogIC8vCiAgLy8gICAgICAgIDExLjcgIEFyaXRobWV0aWMKICAvLwoKICAvLyAgICAgICAgICAgIDExLjcuMSAgUHJvcGFnYXRpb24gb2YgZXhhY3RuZXNzIGFuZCBpbmV4YWN0bmVzcwogIC8vICAgICAgICAgICAgMTEuNy4yICBSZXByZXNlbnRhYmlsaXR5IG9mIGluZmluaXRpZXMgYW5kIE5hTnMKICAvLyAgICAgICAgICAgIDExLjcuMyAgU2VtYW50aWNzIG9mIGNvbW1vbiBvcGVyYXRpb25zCiAgLy8gICAgICAgICAgICAgICAgMTEuNy4zLjEgIEludGVnZXIgZGl2aXNpb24KICAvLyAgICAgICAgICAgICAgICAxMS43LjMuMiAgVHJhbnNjZW5kZW50YWwgZnVuY3Rpb25zCiAgLy8obm8gZnVuY3Rpb25zIGFyZSBpbnRyb2R1Y2VkIGJ5IGFib3ZlIHNlY3Rpb25zKQoKICAvLwogIC8vICAgICAgICAgICAgMTEuNy40ICBOdW1lcmljYWwgb3BlcmF0aW9ucwogIC8vCgogIC8vICAgICAgICAgICAgICAgIDExLjcuNC4xICBOdW1lcmljYWwgdHlwZSBwcmVkaWNhdGVzCiAgZGVmaW5lX2xpYmZ1bmMoIm51bWJlcj8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5pc051bWJlcihhclswXSk7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoImNvbXBsZXg/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIEJpd2FTY2hlbWUuaXNDb21wbGV4KGFyWzBdKTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygicmVhbD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5pc1JlYWwoYXJbMF0pOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJyYXRpb25hbD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5pc1JhdGlvbmFsKGFyWzBdKTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygiaW50ZWdlcj8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5pc0ludGVnZXIoYXJbMF0pOwogIH0pOwoKLy8ocmVhbC12YWx1ZWQ/IG9iaikgICAgcHJvY2VkdXJlCi8vKHJhdGlvbmFsLXZhbHVlZD8gb2JqKSAgICBwcm9jZWR1cmUKLy8oaW50ZWdlci12YWx1ZWQ/IG9iaikgICAgcHJvY2VkdXJlCi8vCi8vKGV4YWN0PyB6KSAgICBwcm9jZWR1cmUKLy8oaW5leGFjdD8geikgICAgcHJvY2VkdXJlCgogIC8vICAgICAgICAgICAgICAgIDExLjcuNC4yICBHZW5lcmljIGNvbnZlcnNpb25zCiAgLy8KLy8oaW5leGFjdCB6KSAgICBwcm9jZWR1cmUKLy8oZXhhY3QgeikgICAgcHJvY2VkdXJlCi8vCiAgLy8gICAgICAgICAgICAgICAgMTEuNy40LjMgIEFyaXRobWV0aWMgb3BlcmF0aW9ucwoKICAvL2luZiAmIG5hbjogb2sgKGZvciB0aGlzIHNlY3Rpb24pCiAgZGVmaW5lX2xpYmZ1bmMoIj0iLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICB2YXIgdiA9IGFyWzBdOwogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICBmb3IodmFyIGk9MTsgaTxhci5sZW5ndGg7IGkrKyl7CiAgICAgIGFzc2VydF9udW1iZXIoYXJbaV0pOwogICAgICBpZihyZWFsX3BhcnQoYXJbaV0pICE9IHJlYWxfcGFydCh2KSkgcmV0dXJuIGZhbHNlOwogICAgICBpZihpbWFnX3BhcnQoYXJbaV0pICE9IGltYWdfcGFydCh2KSkgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIjwiLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGZvcih2YXIgaT0xOyBpPGFyLmxlbmd0aDsgaSsrKXsKICAgICAgYXNzZXJ0X251bWJlcihhcltpXSk7CiAgICAgIGlmKCEoYXJbaS0xXSA8IGFyW2ldKSkgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIj4iLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGZvcih2YXIgaT0xOyBpPGFyLmxlbmd0aDsgaSsrKXsKICAgICAgYXNzZXJ0X251bWJlcihhcltpXSk7CiAgICAgIGlmKCEoYXJbaS0xXSA+IGFyW2ldKSkgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIjw9IiwgMiwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICBmb3IodmFyIGk9MTsgaTxhci5sZW5ndGg7IGkrKyl7CiAgICAgIGFzc2VydF9udW1iZXIoYXJbaV0pOwogICAgICBpZighKGFyW2ktMV0gPD0gYXJbaV0pKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygiPj0iLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGZvcih2YXIgaT0xOyBpPGFyLmxlbmd0aDsgaSsrKXsKICAgICAgYXNzZXJ0X251bWJlcihhcltpXSk7CiAgICAgIGlmKCEoYXJbaS0xXSA+PSBhcltpXSkpIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0pOwoKICBkZWZpbmVfbGliZnVuYygiemVybz8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBhclswXSA9PT0gMDsKICB9KTsKICBkZWZpbmVfbGliZnVuYygicG9zaXRpdmU/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gKGFyWzBdID4gMCk7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIm5lZ2F0aXZlPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIChhclswXSA8IDApOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJvZGQ/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gKGFyWzBdICUgMiA9PSAxKSB8fCAoYXJbMF0gJSAyID09IC0xKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJldmVuPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdICUgMiA9PSAwOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImZpbml0ZT8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiAoYXJbMF0gIT0gSW5maW5pdHkpICYmIChhclswXSAhPSAtSW5maW5pdHkpICYmICFpc05hTihhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiaW5maW5pdGU/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gKGFyWzBdID09IEluZmluaXR5KSB8fCAoYXJbMF0gPT0gLUluZmluaXR5KTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJuYW4/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gaXNOYU4oYXJbMF0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoIm1heCIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGZvcih2YXIgaT0wOyBpPGFyLmxlbmd0aDsgaSsrKQogICAgICBhc3NlcnRfbnVtYmVyKGFyW2ldKTsKCiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgYXIpCiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIm1pbiIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGZvcih2YXIgaT0wOyBpPGFyLmxlbmd0aDsgaSsrKQogICAgICBhc3NlcnRfbnVtYmVyKGFyW2ldKTsKCiAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkobnVsbCwgYXIpOwogIH0pOwoKICB2YXIgY29tcGxleF9vcl9yZWFsID0gZnVuY3Rpb24ocmVhbCxpbWFnKXsKICAgIGlmKGltYWcgPT09IDApIHJldHVybiByZWFsOwogICAgcmV0dXJuIG5ldyBDb21wbGV4KHJlYWwsaW1hZyk7CiAgfQogIHZhciBwb2xhcl9vcl9yZWFsID0gZnVuY3Rpb24obWFnbml0dWRlLCBhbmdsZSl7CiAgICAgIGlmKGFuZ2xlID09PSAwKSByZXR1cm4gbWFnbml0dWRlOwogICAgICByZXR1cm4gQ29tcGxleC5mcm9tX3BvbGFyKG1hZ25pdHVkZSwgYW5nbGUpOwogIH0KICBkZWZpbmVfbGliZnVuYygiKyIsIDAsbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIHJlYWwgPSAwOwogICAgdmFyIGltYWcgPSAwOwogICAgZm9yKHZhciBpPTA7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfbnVtYmVyKGFyW2ldKTsKICAgICAgcmVhbCs9cmVhbF9wYXJ0KGFyW2ldKTsKICAgICAgaW1hZys9aW1hZ19wYXJ0KGFyW2ldKTsKICAgIH0KICAgIHJldHVybiBjb21wbGV4X29yX3JlYWwocmVhbCxpbWFnKTsKICB9KTsKICB2YXIgdGhlX21hZ25pdHVkZSA9IGZ1bmN0aW9uKG4pIHsKICAgICAgaWYobiBpbnN0YW5jZW9mIENvbXBsZXgpIHJldHVybiBuLm1hZ25pdHVkZSgpOwogICAgICByZXR1cm4gbjsKICB9CiAgdmFyIHRoZV9hbmdsZSA9IGZ1bmN0aW9uKG4pIHsKICAgICAgaWYobiBpbnN0YW5jZW9mIENvbXBsZXgpIHJldHVybiBuLmFuZ2xlKCk7CiAgICAgIHJldHVybiAwOwogIH0KICBkZWZpbmVfbGliZnVuYygiKiIsIDAsbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIG1hZ25pdHVkZSA9IDE7CiAgICB2YXIgYW5nbGUgPSAwOwogICAgZm9yKHZhciBpPTA7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfbnVtYmVyKGFyW2ldKTsKICAgICAgbWFnbml0dWRlKj10aGVfbWFnbml0dWRlKGFyW2ldKTsKICAgICAgYW5nbGUrPXRoZV9hbmdsZShhcltpXSk7CiAgICB9CiAgICByZXR1cm4gcG9sYXJfb3JfcmVhbChtYWduaXR1ZGUsIGFuZ2xlKTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygiLSIsIDEsbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIGxlbiA9IGFyLmxlbmd0aDsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwoKICAgIGlmKGxlbiA9PSAxKSB7CiAgICAgIGlmKGFyWzBdIGluc3RhbmNlb2YgQ29tcGxleCkgcmV0dXJuIG5ldyBDb21wbGV4KC1yZWFsX3BhcnQoYXJbMF0pLC1pbWFnX3BhcnQoYXJbMF0pKTsKICAgICAgcmV0dXJuIC1hclswXTsKICAgIH0KICAgIGVsc2V7CiAgICAgIHZhciByZWFsID0gcmVhbF9wYXJ0KGFyWzBdKTsKICAgICAgdmFyIGltYWcgPSBpbWFnX3BhcnQoYXJbMF0pOwogICAgICBmb3IodmFyIGk9MTsgaTxsZW47IGkrKyl7CiAgICAgICAgYXNzZXJ0X251bWJlcihhcltpXSk7CiAgICAgICAgcmVhbC09cmVhbF9wYXJ0KGFyW2ldKTsKICAgICAgICBpbWFnLT1pbWFnX3BhcnQoYXJbaV0pOwogICAgICB9CiAgICAgIHJldHVybiBjb21wbGV4X29yX3JlYWwocmVhbCxpbWFnKTsKICAgIH0KICB9KTsKICAvL2ZvciByNnJzIHNwZWNpZmljYXRpb24sICgvIDAgMCkgb3IgKC8gMyAwKSByYWlzZXMgJyZhc3NlcnRpb24gZXhjZXB0aW9uJwogIGRlZmluZV9saWJmdW5jKCIvIiwgMSxudWxsLCBmdW5jdGlvbihhcil7CiAgICB2YXIgbGVuID0gYXIubGVuZ3RoOwogICAgYXNzZXJ0X251bWJlcihhclswXSk7CgogICAgaWYobGVuID09IDEpewogICAgICBpZiAoYXJbMF0gaW5zdGFuY2VvZiBDb21wbGV4KSByZXR1cm4gQ29tcGxleC5mcm9tX3BvbGFyKDEvdGhlX21hZ25pdHVkZShhclswXSksIC10aGVfYW5nbGUoYXJbMF0pKTsKICAgICAgcmV0dXJuIDEvYXJbMF07CiAgICB9CiAgICBlbHNlewogICAgICB2YXIgbWFnbml0dWRlID0gdGhlX21hZ25pdHVkZShhclswXSk7CiAgICAgIHZhciBhbmdsZSA9IHRoZV9hbmdsZShhclswXSk7CiAgICAgIGZvcih2YXIgaT0xOyBpPGxlbjsgaSsrKXsKICAgICAgICBhc3NlcnRfbnVtYmVyKGFyW2ldKTsKICAgICAgICBtYWduaXR1ZGUvPXRoZV9tYWduaXR1ZGUoYXJbaV0pOwogICAgICAgIGFuZ2xlLT10aGVfYW5nbGUoYXJbaV0pOwogICAgICB9CiAgICAgIHJldHVybiBwb2xhcl9vcl9yZWFsKG1hZ25pdHVkZSwgYW5nbGUpOwogICAgfQogIH0pOwoKICBkZWZpbmVfbGliZnVuYygiYWJzIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gTWF0aC5hYnMoYXJbMF0pOwogIH0pOwoKICB2YXIgZGl2ID0gZnVuY3Rpb24obiwgbSl7CiAgICByZXR1cm4gTWF0aC5mbG9vcihuIC8gbSk7CiAgfQogIHZhciBtb2QgPSBmdW5jdGlvbihuLCBtKXsKICAgIHJldHVybiBuIC0gTWF0aC5mbG9vcihuIC8gbSkgKiBtOwogIH0KICB2YXIgZGl2MCA9IGZ1bmN0aW9uKG4sIG0pewogICAgcmV0dXJuIChuID4gMCkgPyBNYXRoLmZsb29yKG4gLyBtKSA6IE1hdGguY2VpbChuIC8gbSk7CiAgfQogIHZhciBtb2QwID0gZnVuY3Rpb24obiwgbSl7CiAgICByZXR1cm4gKG4gPiAwKSA/IG4gLSBNYXRoLmZsb29yKG4gLyBtKSAqIG0KICAgICAgICAgICAgICAgICAgIDogbiAtIE1hdGguY2VpbChuIC8gbSkgKiBtOwogIH0KICBkZWZpbmVfbGliZnVuYygiZGl2MC1hbmQtbW9kMCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgYXNzZXJ0X251bWJlcihhclsxXSk7CiAgICByZXR1cm4gbmV3IFZhbHVlcyhbZGl2KGFyWzBdLCBhclsxXSksIG1vZChhclswXSwgYXJbMV0pXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZGl2IiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzFdKTsKICAgIHJldHVybiBkaXYoYXJbMF0sIGFyWzFdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJtb2QiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGFzc2VydF9udW1iZXIoYXJbMV0pOwogICAgcmV0dXJuIG1vZChhclswXSwgYXJbMV0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImRpdjAtYW5kLW1vZDAiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGFzc2VydF9udW1iZXIoYXJbMV0pOwogICAgcmV0dXJuIG5ldyBWYWx1ZXMoW2RpdjAoYXJbMF0sIGFyWzFdKSwgbW9kMChhclswXSwgYXJbMV0pXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZGl2MCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgYXNzZXJ0X251bWJlcihhclsxXSk7CiAgICByZXR1cm4gZGl2MChhclswXSwgYXJbMV0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoIm1vZDAiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGFzc2VydF9udW1iZXIoYXJbMV0pOwogICAgcmV0dXJuIG1vZDAoYXJbMF0sIGFyWzFdKTsKICB9KQoKLy8oZ2NkIG4xIC4uLikgICAgcHJvY2VkdXJlCi8vKGxjbSBuMSAuLi4pICAgIHByb2NlZHVyZQoKICBkZWZpbmVfbGliZnVuYygibnVtZXJhdG9yIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICBpZihhclswXSBpbnN0YW5jZW9mIFJhdGlvbmFsKQogICAgICByZXR1cm4gYXJbMF0ubnVtZXJhdG9yOwogICAgZWxzZQogICAgICB0aHJvdyBuZXcgQnVnKCJ0b2RvIik7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZGVub21pbmF0b3IiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGlmKGFyWzBdIGluc3RhbmNlb2YgUmF0aW9uYWwpCiAgICAgIHJldHVybiBhclswXS5kZW5vbWluYXRvcjsKICAgIGVsc2UKICAgICAgdGhyb3cgbmV3IEJ1ZygidG9kbyIpOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImZsb29yIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gTWF0aC5mbG9vcihhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiY2VpbGluZyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGguY2VpbChhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygidHJ1bmNhdGUiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiAoYXJbMF0gPCAwKSA/IE1hdGguY2VpbChhclswXSkgOiBNYXRoLmZsb29yKGFyWzBdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJyb3VuZCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGgucm91bmQoYXJbMF0pOwogIH0pCgovLyhyYXRpb25hbGl6ZSB4MSB4MikgICAgcHJvY2VkdXJlCgogIGRlZmluZV9saWJmdW5jKCJleHAiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBNYXRoLmV4cChhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygibG9nIiwgMSwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIG51bSA9IGFyWzBdLCBiYXNlID0gYXJbMV07CiAgICBhc3NlcnRfbnVtYmVyKG51bSk7CgogICAgaWYoYmFzZSl7IC8vIGxvZyBiIG51bSA9PSBsb2cgZSBudW0gLyBsb2cgZSBiCiAgICAgIGFzc2VydF9udW1iZXIoYmFzZSk7CiAgICAgIHJldHVybiBNYXRoLmxvZyhudW0pIC8gTWF0aC5sb2coYmFzZSkKICAgIH0KICAgIGVsc2UKICAgICAgcmV0dXJuIE1hdGgubG9nKG51bSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygic2luIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gTWF0aC5zaW4oYXJbMF0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImNvcyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGguY29zKGFyWzBdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJ0YW4iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBNYXRoLnRhbihhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiYXNpbiIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGguYXNpbihhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiYWNvcyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGguYWNvcyhhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiYXRhbiIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgaWYoYXIubGVuZ3RoID09IDIpewogICAgICBhc3NlcnRfbnVtYmVyKGFyWzFdKTsKICAgICAgcmV0dXJuIE1hdGguYXRhbjIoYXJbMF0sIGFyWzFdKTsKICAgIH0KICAgIGVsc2UKICAgICAgcmV0dXJuIE1hdGguYXRhbihhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygic3FydCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgcmV0dXJuIE1hdGguc3FydChhclswXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZXhhY3QtaW50ZWdlci1zcXJ0IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICB2YXIgc3FydF9mID0gTWF0aC5zcXJ0KGFyWzBdKTsKICAgIHZhciBzcXJ0X2kgPSBzcXJ0X2YgLSAoc3FydF9mICUgMSk7CiAgICB2YXIgcmVzdCAgID0gYXJbMF0gLSBzcXJ0X2kgKiBzcXJ0X2k7CgogICAgcmV0dXJuIG5ldyBWYWx1ZXMoW3NxcnRfaSwgcmVzdF0pOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImV4cHQiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIGFzc2VydF9udW1iZXIoYXJbMV0pOwogICAgcmV0dXJuIE1hdGgucG93KGFyWzBdLCBhclsxXSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygibWFrZS1yZWN0YW5ndWxhciIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9udW1iZXIoYXJbMF0pOwogICAgYXNzZXJ0X251bWJlcihhclsxXSk7CiAgICByZXR1cm4gbmV3IENvbXBsZXgoYXJbMF0sIGFyWzFdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJtYWtlLXBvbGFyIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzFdKTsKICAgIHJldHVybiBDb21wbGV4LmZyb21fcG9sYXIoYXJbMF0sIGFyWzFdKTsKICB9KQogIHZhciByZWFsX3BhcnQgPSBmdW5jdGlvbihuKSB7CiAgICByZXR1cm4gQ29tcGxleC5hc3N1cmUobikucmVhbDsKICB9CiAgdmFyIGltYWdfcGFydCA9IGZ1bmN0aW9uKG4pIHsKICAgIHJldHVybiBDb21wbGV4LmFzc3VyZShuKS5pbWFnOwogIH0KICBkZWZpbmVfbGliZnVuYygicmVhbC1wYXJ0IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X251bWJlcihhclswXSk7CiAgICByZXR1cm4gcmVhbF9wYXJ0KGFyWzBdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJpbWFnLXBhcnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBDb21wbGV4LmFzc3VyZShhclswXSkuaW1hZzsKICB9KQogIGRlZmluZV9saWJmdW5jKCJtYWduaXR1ZGUiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBDb21wbGV4LmFzc3VyZShhclswXSkubWFnbml0dWRlKCk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiYW5nbGUiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbnVtYmVyKGFyWzBdKTsKICAgIHJldHVybiBDb21wbGV4LmFzc3VyZShhclswXSkuYW5nbGUoKTsKICB9KQoKICAvLwogIC8vICAgICAgICAgICAgICAgIDExLjcuNC40ICBOdW1lcmljYWwgSW5wdXQgYW5kIE91dHB1dAogIC8vCiAgZGVmaW5lX2xpYmZ1bmMoIm51bWJlci0+c3RyaW5nIiwgMSwgMywgZnVuY3Rpb24oYXIpewogICAgdmFyIHogPSBhclswXSwgcmFkaXggPSBhclsxXSwgcHJlY2lzaW9uID0gYXJbMl07CiAgICBpZihwcmVjaXNpb24pCiAgICAgIHRocm93IG5ldyBCdWcoIm51bWJlci0+c3RyaW5nOiBwcmVjaXNpb24gaXMgbm90IHlldCBpbXBsZW1lbnRlZCIpOwoKICAgIHJhZGl4ID0gcmFkaXggfHwgMTA7ICAvL1RPRE86IGNoZWNrIHJhZGl4IGlzIDIsIDgsIDEwLCBvciAxNi4KICAgIHJldHVybiB6LnRvU3RyaW5nKHJhZGl4KTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctPm51bWJlciIsIDEsIDMsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBzID0gYXJbMF07CgogICAgaWYgKHMgPT09ICcraW5mLjAnKQogICAgICByZXR1cm4gSW5maW5pdHk7CgogICAgaWYgKHMgPT09ICctaW5mLjAnKQogICAgICByZXR1cm4gLUluZmluaXR5OwoKICAgIGlmIChzID09PSAnK25hbi4wJykKICAgICAgcmV0dXJuIE5hTjsKCiAgICB2YXIgcmFkaXggPSBhclsxXTsKICAgIAogICAgdmFyIGludF9yZXMgPSBCaXdhU2NoZW1lLnBhcnNlX2ludGVnZXIoCiAgICAgIHMsIHJhZGl4ID09PSAwID8gMCA6IHJhZGl4IHx8IDEwCiAgICApOwoKICAgIGlmIChpbnRfcmVzICE9PSBmYWxzZSkKICAgICAgcmV0dXJuIGludF9yZXM7CgogICAgaWYgKHJhZGl4ICE9PSB1bmRlZmluZWQgJiYgcmFkaXggIT09IDEwKQogICAgICByZXR1cm4gZmFsc2U7CgogICAgdmFyIGZwX3JlcyA9IEJpd2FTY2hlbWUucGFyc2VfZmxvYXQocyk7CgogICAgaWYgKGZwX3JlcyAhPT0gZmFsc2UpCiAgICAgIHJldHVybiBmcF9yZXM7CgogICAgdmFyIGZyYWNfcmVzID0gQml3YVNjaGVtZS5wYXJzZV9mcmFjdGlvbihzKTsKCiAgICBpZiAoZnJhY19yZXMgIT09IGZhbHNlKQogICAgICByZXR1cm4gZnJhY19yZXM7CgogICAgcmV0dXJuIGZhbHNlOwogIH0pCgogIC8vCiAgLy8gICAgICAgIDExLjggIEJvb2xlYW5zCiAgLy8KCiAgZGVmaW5lX2xpYmZ1bmMoIm5vdCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiAoYXJbMF0gPT09IGZhbHNlKSA/IHRydWUgOiBmYWxzZTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygiYm9vbGVhbj8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdID09PSBmYWxzZSB8fCBhclswXSA9PT0gdHJ1ZSkgPyB0cnVlIDogZmFsc2U7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoImJvb2xlYW49PyIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBsZW4gPSBhci5sZW5ndGg7CiAgICBmb3IodmFyIGk9MTsgaTxsZW47IGkrKyl7CiAgICAgIGlmKGFyW2ldICE9IGFyWzBdKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9KTsKCiAgLy8gICAgICAgIDExLjkgIFBhaXJzIGFuZCBsaXN0cwoKICBkZWZpbmVfbGliZnVuYygicGFpcj8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdIGluc3RhbmNlb2YgUGFpcikgPyB0cnVlIDogZmFsc2U7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoImNvbnMiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gbmV3IFBhaXIoYXJbMF0sIGFyWzFdKTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygiY2FyIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgLy9zaG91bGQgcmFpc2UgJmFzc2VydGlvbiBmb3IgJygpLi4uCiAgICBpZighKGFyWzBdIGluc3RhbmNlb2YgUGFpcikpIHRocm93IG5ldyBFcnJvcigiQXR0ZW1wdCB0byBhcHBseSBjYXIgb24gIiArIGFyWzBdKTsKICAgIHJldHVybiBhclswXS5jYXI7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoImNkciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIC8vc2hvdWxkIHJhaXNlICZhc3NlcnRpb24gZm9yICcoKS4uLgogICAgaWYoIShhclswXSBpbnN0YW5jZW9mIFBhaXIpKSB0aHJvdyBuZXcgRXJyb3IoIkF0dGVtcHQgdG8gYXBwbHkgY2RyIG9uICIgKyBhclswXSk7CiAgICByZXR1cm4gYXJbMF0uY2RyOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJzZXQtY2FyISIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGlmKCEoYXJbMF0gaW5zdGFuY2VvZiBQYWlyKSkgdGhyb3cgbmV3IEVycm9yKCJBdHRlbXB0IHRvIGFwcGx5IHNldC1jYXIhIG9uICIgKyBhclswXSk7CiAgICBhclswXS5jYXIgPSBhclsxXTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJzZXQtY2RyISIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGlmKCEoYXJbMF0gaW5zdGFuY2VvZiBQYWlyKSkgdGhyb3cgbmV3IEVycm9yKCJBdHRlbXB0IHRvIGFwcGx5IHNldC1jZHIhIG9uICIgKyBhclswXSk7CiAgICBhclswXS5jZHIgPSBhclsxXTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwoKICAvLyBjYWRyLCBjYWRkciwgY2FkZGRyLCBldGMuCiAgKGZ1bmN0aW9uKCl7CiAgICAvLyBUbyB0cmF2ZXJzZSBpbnRvIHBhaXIgYW5kIHJhaXNlIGVycm9yCiAgICB2YXIgZ2V0ID0gZnVuY3Rpb24oZnVuY25hbWUsIHNwZWMsIG9iail7CiAgICAgIHZhciByZXQgPSBvYmo7CiAgICAgIF8uZWFjaChzcGVjLCBmdW5jdGlvbihpc19jZHIpewogICAgICAgIGlmKHJldCBpbnN0YW5jZW9mIFBhaXIpewogICAgICAgICAgcmV0ID0gKGlzX2NkciA/IHJldC5jZHIgOiByZXQuY2FyKTsKICAgICAgICB9CiAgICAgICAgZWxzZXsKICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmdW5jbmFtZSsiOiBhdHRlbXB0IHRvIGdldCAiKyhpc19jZHIgPyAiY2RyIiA6ICJjYXIiKSsiIG9mICIrcmV0KTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICByZXR1cm4gcmV0OwogICAgfTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWFyIiwgMSwgMSwgZnVuY3Rpb24oYXIpeyByZXR1cm4gZ2V0KCJjYWFyIiwgWzAsIDBdLCBhclswXSk7IH0pOwogICAgZGVmaW5lX2xpYmZ1bmMoImNhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhZHIiLCBbMSwgMF0sIGFyWzBdKTsgfSk7CiAgICBkZWZpbmVfbGliZnVuYygiY2RhciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsgcmV0dXJuIGdldCgiY2FkciIsIFswLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRyIiwgMSwgMSwgZnVuY3Rpb24oYXIpeyByZXR1cm4gZ2V0KCJjYWRyIiwgWzEsIDFdLCBhclswXSk7IH0pOwoKICAgIGRlZmluZV9saWJmdW5jKCJjYWFhciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsgcmV0dXJuIGdldCgiY2FhYXIiLCBbMCwgMCwgMF0sIGFyWzBdKTsgfSk7CiAgICBkZWZpbmVfbGliZnVuYygiY2FhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhYWRyIiwgWzEsIDAsIDBdLCBhclswXSk7IH0pOwogICAgZGVmaW5lX2xpYmZ1bmMoImNhZGFyIiwgMSwgMSwgZnVuY3Rpb24oYXIpeyByZXR1cm4gZ2V0KCJjYWRhciIsIFswLCAxLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWRkciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsgcmV0dXJuIGdldCgiY2FkZHIiLCBbMSwgMSwgMF0sIGFyWzBdKTsgfSk7CiAgICBkZWZpbmVfbGliZnVuYygiY2RhYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkYWFyIiwgWzAsIDAsIDFdLCBhclswXSk7IH0pOwogICAgZGVmaW5lX2xpYmZ1bmMoImNkYWRyIiwgMSwgMSwgZnVuY3Rpb24oYXIpeyByZXR1cm4gZ2V0KCJjZGFkciIsIFsxLCAwLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRhciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsgcmV0dXJuIGdldCgiY2RkYXIiLCBbMCwgMSwgMV0sIGFyWzBdKTsgfSk7CiAgICBkZWZpbmVfbGliZnVuYygiY2RkZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkZGRyIiwgWzEsIDEsIDFdLCBhclswXSk7IH0pOwoKICAgIGRlZmluZV9saWJmdW5jKCJjYWFhYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhYWFhciIsIFswLCAwLCAwLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWFhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhYWFkciIsIFsxLCAwLCAwLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWFkYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhYWRhciIsIFswLCAxLCAwLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWFkZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhYWRkciIsIFsxLCAxLCAwLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWRhYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhZGFhciIsIFswLCAwLCAxLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWRhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhZGFkciIsIFsxLCAwLCAxLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWRkYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhZGRhciIsIFswLCAxLCAxLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjYWRkZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNhZGRkciIsIFsxLCAxLCAxLCAwXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGFhYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkYWFhciIsIFswLCAwLCAwLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGFhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkYWFkciIsIFsxLCAwLCAwLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGFkYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkYWRhciIsIFswLCAxLCAwLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGFkZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkYWRkciIsIFsxLCAxLCAwLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRhYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkZGFhciIsIFswLCAwLCAxLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRhZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkZGFkciIsIFsxLCAwLCAxLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRkYXIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkZGRhciIsIFswLCAxLCAxLCAxXSwgYXJbMF0pOyB9KTsKICAgIGRlZmluZV9saWJmdW5jKCJjZGRkZHIiLCAxLCAxLCBmdW5jdGlvbihhcil7IHJldHVybiBnZXQoImNkZGRkciIsIFsxLCAxLCAxLCAxXSwgYXJbMF0pOyB9KTsKICB9KSgpOwoKICBkZWZpbmVfbGliZnVuYygibnVsbD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdID09PSBuaWwpOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJsaXN0PyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBpc0xpc3QoYXJbMF0pOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJsaXN0IiwgMCwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIGwgPSBuaWw7CiAgICBmb3IodmFyIGk9YXIubGVuZ3RoLTE7IGk+PTA7IGktLSkKICAgICAgbCA9IG5ldyBQYWlyKGFyW2ldLCBsKTsKICAgIHJldHVybiBsOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJsZW5ndGgiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbGlzdChhclswXSk7CiAgICB2YXIgbiA9IDA7CiAgICBmb3IodmFyIG89YXJbMF07IG8hPW5pbDsgbz1vLmNkcikKICAgICAgbisrOwogICAgcmV0dXJuIG47CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoImFwcGVuZCIsIDEsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBrID0gYXIubGVuZ3RoOwogICAgdmFyIHJldCA9IGFyWy0ta107CiAgICB3aGlsZShrLS0pewogICAgICBfLmVhY2goYXJba10udG9fYXJyYXkoKS5yZXZlcnNlKCksIGZ1bmN0aW9uKGl0ZW0pewogICAgICAgIHJldCA9IG5ldyBQYWlyKGl0ZW0sIHJldCk7CiAgICAgIH0pOwogICAgfQogICAgcmV0dXJuIHJldDsKICB9KTsKICBkZWZpbmVfbGliZnVuYygicmV2ZXJzZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIC8vIChyZXZlcnNlICcoKSkgPT4gJygpCiAgICBpZihhclswXSA9PSBuaWwpCiAgICAgIHJldHVybiBuaWw7CiAgICBhc3NlcnRfcGFpcihhclswXSk7CgogICAgdmFyIGwgPSBuaWw7CiAgICBmb3IodmFyIG89YXJbMF07IG8hPW5pbDsgbz1vLmNkcikKICAgICAgbCA9IG5ldyBQYWlyKG8uY2FyLCBsKTsKICAgIHJldHVybiBsOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJsaXN0LXRhaWwiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfcGFpcihhclswXSk7CiAgICBhc3NlcnRfaW50ZWdlcihhclsxXSk7CiAgICBpZihhclsxXSA8IDApCiAgICAgIHRocm93IG5ldyBFcnJvcigibGlzdC10YWlsOiBpbmRleCBvdXQgb2YgcmFuZ2UgKCIrYXJbMV0rIikiKTsKCiAgICB2YXIgbyA9IGFyWzBdOwogICAgZm9yKHZhciBpPTA7IGk8YXJbMV07IGkrKyl7CiAgICAgIGlmKCEobyBpbnN0YW5jZW9mIFBhaXIpKSB0aHJvdyBuZXcgRXJyb3IoImxpc3QtdGFpbDogdGhlIGxpc3QgaXMgc2hvcnRlciB0aGFuICIgKyBhclsxXSk7CiAgICAgIG8gPSBvLmNkcjsKICAgIH0KICAgIHJldHVybiBvOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJsaXN0LXJlZiIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wYWlyKGFyWzBdKTsKICAgIGFzc2VydF9pbnRlZ2VyKGFyWzFdKTsKICAgIGlmKGFyWzFdIDwgMCkKICAgICAgdGhyb3cgbmV3IEVycm9yKCJsaXN0LXRhaWw6IGluZGV4IG91dCBvZiByYW5nZSAoIithclsxXSsiKSIpOwoKICAgIHZhciBvID0gYXJbMF07CiAgICBmb3IodmFyIGk9MDsgaTxhclsxXTsgaSsrKXsKICAgICAgaWYoIShvIGluc3RhbmNlb2YgUGFpcikpIHRocm93IG5ldyBFcnJvcigibGlzdC1yZWY6IHRoZSBsaXN0IGlzIHNob3J0ZXIgdGhhbiAiICsgYXJbMV0pOwogICAgICBvID0gby5jZHI7CiAgICB9CiAgICByZXR1cm4gby5jYXI7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIm1hcCIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXIuc2hpZnQoKSwgbGlzdHMgPSBhcjsKICAgIF8uZWFjaChsaXN0cywgYXNzZXJ0X2xpc3QpOwoKICAgIHZhciBhID0gW107CiAgICByZXR1cm4gQ2FsbC5tdWx0aV9mb3JlYWNoKGxpc3RzLCB7CiAgICAgIC8vIENhbGxlZCBmb3IgZWFjaCBlbGVtZW50CiAgICAgIC8vIGlucHV0OiB0aGUgZWxlbWVudCAob3IgdGhlIGVsZW1lbnRzLCBpZiBtb3JlIHRoYW4gb25lIGxpc3QgaXMgZ2l2ZW4pCiAgICAgIC8vIG91dHB1dDogYSBDYWxsIHJlcXVlc3Qgb2YgcHJvYyBhbmQgYXJncwogICAgICBjYWxsOiBmdW5jdGlvbih4cyl7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIF8ubWFwKHhzLCBmdW5jdGlvbih4KXsgcmV0dXJuIHguY2FyIH0pKTsKICAgICAgfSwKCiAgICAgIC8vIENhbGxlZCB3aGVuIGVhY2ggQ2FsbCByZXF1ZXN0IGlzIGZpbmlzaGVkCiAgICAgIC8vIGlucHV0OiB0aGUgcmVzdWx0IG9mIENhbGwgcmVxdWVzdCwKICAgICAgLy8gICB0aGUgZWxlbWVudChzKSBvZiB0aGUgQ2FsbCByZXF1ZXN0ICh3aGljaCBpcyBub3QgdXNlZCBoZXJlKQogICAgICAvLyBvdXRwdXQ6IGB1bmRlZmluZWQnIHRvIGNvbnRpbnVlLAogICAgICAvLyAgIHNvbWUgdmFsdWUgdG8gdGVybWluYXRlICh0aGUgdmFsdWUgd2lsbCBiZSB0aGUgcmVzdWx0KQogICAgICByZXN1bHQ6IGZ1bmN0aW9uKHJlcyl7IGEucHVzaChyZXMpOyB9LAoKICAgICAgLy8gQ2FsbGVkIHdoZW4gcmVhY2hlZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0KHMpCiAgICAgIC8vIGlucHV0OiBub25lCiAgICAgIC8vIG91dHB1dDogdGhlIHJlc3VsdGFudCB2YWx1ZQogICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBhcnJheV90b19saXN0KGEpOyB9CiAgICB9KQogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImZvci1lYWNoIiwgMiwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhci5zaGlmdCgpLCBsaXN0cyA9IGFyOwogICAgXy5lYWNoKGxpc3RzLCBhc3NlcnRfbGlzdCk7CgogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaChsaXN0cywgewogICAgICBjYWxsOiBmdW5jdGlvbih4cyl7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIF8ubWFwKHhzLCBmdW5jdGlvbih4KXsgcmV0dXJuIHguY2FyIH0pKTsKICAgICAgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsgfQogICAgfSkKICB9KQoKICAvLyAgICAgICAgMTEuMTAgIFN5bWJvbHMKCiAgZGVmaW5lX2xpYmZ1bmMoInN5bWJvbD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdIGluc3RhbmNlb2YgU3ltYm9sKSA/IHRydWUgOiBmYWxzZTsKICB9KTsKICBkZWZpbmVfbGliZnVuYygic3ltYm9sLT5zdHJpbmciLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfc3ltYm9sKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5uYW1lOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJzeW1ib2w9PyIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zeW1ib2woYXJbMF0pOwogICAgZm9yKHZhciBpPTE7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfc3ltYm9sKGFyW2ldKTsKICAgICAgaWYoYXJbaV0gIT0gYXJbMF0pIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctPnN5bWJvbCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgcmV0dXJuIFN5bShhclswXSk7CiAgfSk7CgogIC8vCiAgLy8gICAgICAgIDExLjExICBDaGFyYWN0ZXJzCiAgLy8KICBkZWZpbmVfbGliZnVuYygnY2hhcj8nLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdIGluc3RhbmNlb2YgQ2hhcik7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoJ2NoYXItPmludGVnZXInLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfY2hhcihhclswXSk7CiAgICByZXR1cm4gYXJbMF0udmFsdWUuY2hhckNvZGVBdCgwKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCdpbnRlZ2VyLT5jaGFyJywgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2ludGVnZXIoYXJbMF0pOwogICAgcmV0dXJuIENoYXIuZ2V0KFN0cmluZy5mcm9tQ2hhckNvZGUoYXJbMF0pKTsKICB9KQoKICB2YXIgbWFrZV9jaGFyX2NvbXBhcmVfZnVuYyA9IGZ1bmN0aW9uKHRlc3QpewogICAgcmV0dXJuIGZ1bmN0aW9uKGFyKXsKICAgICAgYXNzZXJ0X2NoYXIoYXJbMF0pOwogICAgICBmb3IodmFyIGk9MTsgaTxhci5sZW5ndGg7IGkrKyl7CiAgICAgICAgYXNzZXJ0X2NoYXIoYXJbaV0pOwogICAgICAgIGlmKCF0ZXN0KGFyW2ktMV0udmFsdWUsIGFyW2ldLnZhbHVlKSkKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9CiAgZGVmaW5lX2xpYmZ1bmMoJ2NoYXI9PycsIDIsIG51bGwsCiAgICBtYWtlX2NoYXJfY29tcGFyZV9mdW5jKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYSA9PSBiIH0pKQogIGRlZmluZV9saWJmdW5jKCdjaGFyPD8nLCAyLCBudWxsLAogICAgbWFrZV9jaGFyX2NvbXBhcmVfZnVuYyhmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPCBiIH0pKQogIGRlZmluZV9saWJmdW5jKCdjaGFyPj8nLCAyLCBudWxsLAogICAgbWFrZV9jaGFyX2NvbXBhcmVfZnVuYyhmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPiBiIH0pKQogIGRlZmluZV9saWJmdW5jKCdjaGFyPD0/JywgMiwgbnVsbCwKICAgIG1ha2VfY2hhcl9jb21wYXJlX2Z1bmMoZnVuY3Rpb24oYSwgYil7IHJldHVybiBhIDw9IGIgfSkpCiAgZGVmaW5lX2xpYmZ1bmMoJ2NoYXI+PT8nLCAyLCBudWxsLAogICAgbWFrZV9jaGFyX2NvbXBhcmVfZnVuYyhmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPj0gYiB9KSkKCiAgLy8KICAvLyAgICAgICAgMTEuMTIgIFN0cmluZ3MKICAvLwogIGRlZmluZV9saWJmdW5jKCJzdHJpbmc/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuICh0eXBlb2YoYXJbMF0pID09ICJzdHJpbmciKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJtYWtlLXN0cmluZyIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9pbnRlZ2VyKGFyWzBdKTsKICAgIHZhciBjID0gIiAiOwogICAgaWYoYXJbMV0pewogICAgICBhc3NlcnRfY2hhcihhclsxXSk7CiAgICAgIGMgPSBhclsxXS52YWx1ZTsKICAgIH0KICAgIHZhciBvdXQgPSAiIjsKICAgIF8udGltZXMoYXJbMF0sIGZ1bmN0aW9uKCkgeyBvdXQgKz0gYzsgfSk7CiAgICByZXR1cm4gb3V0OwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZyIsIDAsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGlmKGFyLmxlbmd0aCA9PSAwKSByZXR1cm4gIiI7CiAgICBmb3IodmFyIGk9MDsgaTxhci5sZW5ndGg7IGkrKykKICAgICAgYXNzZXJ0X2NoYXIoYXJbaV0pOwogICAgcmV0dXJuIF8ubWFwKGFyLCBmdW5jdGlvbihjKXsgcmV0dXJuIGMudmFsdWUgfSkuam9pbigiIik7CiAgfSkKICBkZWZpbmVfbGliZnVuYygic3RyaW5nLWxlbmd0aCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLmxlbmd0aDsKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctcmVmIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICBhc3NlcnRfYmV0d2VlbihhclsxXSwgMCwgYXJbMF0ubGVuZ3RoLTEpOwogICAgcmV0dXJuIENoYXIuZ2V0KGFyWzBdLmNoYXJBdChbYXJbMV1dKSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygic3RyaW5nPT8iLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIGZvcih2YXIgaT0xOyBpPGFyLmxlbmd0aDsgaSsrKXsKICAgICAgYXNzZXJ0X3N0cmluZyhhcltpXSk7CiAgICAgIGlmKGFyWzBdICE9IGFyW2ldKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmc8PyIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgZm9yKHZhciBpPTE7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfc3RyaW5nKGFyW2ldKTsKICAgICAgaWYoIShhcltpLTFdIDwgYXJbaV0pKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmc+PyIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgZm9yKHZhciBpPTE7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfc3RyaW5nKGFyW2ldKTsKICAgICAgaWYoIShhcltpLTFdID4gYXJbaV0pKSByZXR1cm4gZmFsc2U7CiAgICB9CiAgICByZXR1cm4gdHJ1ZTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmc8PT8iLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIGZvcih2YXIgaT0xOyBpPGFyLmxlbmd0aDsgaSsrKXsKICAgICAgYXNzZXJ0X3N0cmluZyhhcltpXSk7CiAgICAgIGlmKCEoYXJbaS0xXSA8PSBhcltpXSkpIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZz49PyIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgZm9yKHZhciBpPTE7IGk8YXIubGVuZ3RoOyBpKyspewogICAgICBhc3NlcnRfc3RyaW5nKGFyW2ldKTsKICAgICAgaWYoIShhcltpLTFdID49IGFyW2ldKSkgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfSkKCiAgZGVmaW5lX2xpYmZ1bmMoInN1YnN0cmluZyIsIDMsIDMsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgYXNzZXJ0X2ludGVnZXIoYXJbMV0pOwogICAgYXNzZXJ0X2ludGVnZXIoYXJbMl0pOwoKICAgIGlmKGFyWzFdIDwgMCkgdGhyb3cgbmV3IEVycm9yKCJzdWJzdHJpbmc6IHN0YXJ0IHRvbyBzbWFsbDogIithclsxXSk7CiAgICBpZihhclsyXSA8IDApIHRocm93IG5ldyBFcnJvcigic3Vic3RyaW5nOiBlbmQgdG9vIHNtYWxsOiAiK2FyWzJdKTsKICAgIGlmKGFyWzBdLmxlbmd0aCsxIDw9IGFyWzFdKSB0aHJvdyBuZXcgRXJyb3IoInN1YnN0cmluZzogc3RhcnQgdG9vIGJpZzogIithclsxXSk7CiAgICBpZihhclswXS5sZW5ndGgrMSA8PSBhclsyXSkgdGhyb3cgbmV3IEVycm9yKCJzdWJzdHJpbmc6IGVuZCB0b28gYmlnOiAiK2FyWzJdKTsKICAgIGlmKCEoYXJbMV0gPD0gYXJbMl0pKSB0aHJvdyBuZXcgRXJyb3IoInN1YnN0cmluZzogbm90IHN0YXJ0IDw9IGVuZDogIithclsxXSsiLCAiK2FyWzJdKTsKCiAgICByZXR1cm4gYXJbMF0uc3Vic3RyaW5nKGFyWzFdLCBhclsyXSk7CiAgfSkKCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy1hcHBlbmQiLCAwLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICBmb3IodmFyIGk9MDsgaTxhci5sZW5ndGg7IGkrKykKICAgICAgYXNzZXJ0X3N0cmluZyhhcltpXSk7CgogICAgcmV0dXJuIGFyLmpvaW4oIiIpOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy0+bGlzdCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwogICAgcmV0dXJuIGFycmF5X3RvX2xpc3QoXy5tYXAoYXJbMF0uc3BsaXQoIiIpLCBmdW5jdGlvbihzKXsgcmV0dXJuIENoYXIuZ2V0KHNbMF0pOyB9KSk7CiAgfSkKICBkZWZpbmVfbGliZnVuYygibGlzdC0+c3RyaW5nIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2xpc3QoYXJbMF0pOwogICAgcmV0dXJuIF8ubWFwKGFyWzBdLnRvX2FycmF5KCksIGZ1bmN0aW9uKGMpeyByZXR1cm4gYy52YWx1ZTsgfSkuam9pbigiIik7CiAgfSkKICBkZWZpbmVfbGliZnVuYygic3RyaW5nLWZvci1lYWNoIiwgMiwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhci5zaGlmdCgpLCBzdHJzID0gYXI7CiAgICBfLmVhY2goc3RycywgYXNzZXJ0X3N0cmluZyk7CgogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaChzdHJzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKGNoYXJzKXsgcmV0dXJuIG5ldyBDYWxsKHByb2MsIGNoYXJzKTsgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsgfQogICAgfSkKICB9KQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctY29weSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIC8vIG5vdGU6IHRoaXMgaXMgdXNlbGVzcywgYmVjYXVzZSBqYXZhc2NyaXB0IHN0cmluZ3MgYXJlIGltbXV0YWJsZQogICAgYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICByZXR1cm4gYXJbMF07CiAgfSkKCgogIC8vCiAgLy8gICAgICAgIDExLjEzICBWZWN0b3JzCiAgLy8KICBkZWZpbmVfbGliZnVuYygidmVjdG9yPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBCaXdhU2NoZW1lLmlzVmVjdG9yKGFyWzBdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJtYWtlLXZlY3RvciIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9pbnRlZ2VyKGFyWzBdKTsKICAgIHZhciB2ZWMgPSBuZXcgQXJyYXkoYXJbMF0pOwoKICAgIGlmKGFyLmxlbmd0aCA9PSAyKXsKICAgICAgZm9yKHZhciBpPTA7IGk8YXJbMF07IGkrKykKICAgICAgICB2ZWNbaV0gPSBhclsxXTsKICAgIH0KICAgIHJldHVybiB2ZWM7CiAgfSkKICBkZWZpbmVfbGliZnVuYygidmVjdG9yIiwgMCwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIGFyOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInZlY3Rvci1sZW5ndGgiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfdmVjdG9yKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5sZW5ndGg7CiAgfSkKICBkZWZpbmVfbGliZnVuYygidmVjdG9yLXJlZiIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF92ZWN0b3IoYXJbMF0pOwogICAgYXNzZXJ0X2ludGVnZXIoYXJbMV0pOwogICAgYXNzZXJ0X2JldHdlZW4oYXJbMV0sIDAsIGFyWzBdLmxlbmd0aC0xKTsKCiAgICByZXR1cm4gYXJbMF1bYXJbMV1dOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInZlY3Rvci1zZXQhIiwgMywgMywgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3ZlY3RvcihhclswXSk7CiAgICBhc3NlcnRfaW50ZWdlcihhclsxXSk7CgogICAgYXJbMF1bYXJbMV1dID0gYXJbMl07CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KQogIGRlZmluZV9saWJmdW5jKCJ2ZWN0b3ItPmxpc3QiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfdmVjdG9yKGFyWzBdKTsKICAgIHJldHVybiBhcnJheV90b19saXN0KGFyWzBdKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJsaXN0LT52ZWN0b3IiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbGlzdChhclswXSk7CiAgICByZXR1cm4gYXJbMF0udG9fYXJyYXkoKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJ2ZWN0b3ItZmlsbCEiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfdmVjdG9yKGFyWzBdKTsKICAgIHZhciB2ZWMgPSBhclswXSwgb2JqID0gYXJbMV07CgogICAgZm9yKHZhciBpPTA7IGk8dmVjLmxlbmd0aDsgaSsrKQogICAgICB2ZWNbaV0gPSBvYmo7CiAgICByZXR1cm4gdmVjOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInZlY3Rvci1tYXAiLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcHJvYyA9IGFyLnNoaWZ0KCksIHZlY3MgPSBhcjsKICAgIF8uZWFjaCh2ZWNzLCBhc3NlcnRfdmVjdG9yKTsKCiAgICB2YXIgYSA9IFtdOwogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaCh2ZWNzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKG9ianMpeyByZXR1cm4gbmV3IENhbGwocHJvYywgb2Jqcyk7IH0sCiAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzKXsgYS5wdXNoKHJlcyk7IH0sCiAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsgcmV0dXJuIGE7IH0KICAgIH0pCiAgfSkKICBkZWZpbmVfbGliZnVuYygidmVjdG9yLWZvci1lYWNoIiwgMiwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhci5zaGlmdCgpLCB2ZWNzID0gYXI7CiAgICBfLmVhY2godmVjcywgYXNzZXJ0X3ZlY3Rvcik7CgogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaCh2ZWNzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKG9ianMpeyByZXR1cm4gbmV3IENhbGwocHJvYywgb2Jqcyk7IH0sCiAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7IH0KICAgIH0pCiAgfSkKCiAgLy8KICAvLyAgICAgICAgMTEuMTQgIEVycm9ycyBhbmQgdmlvbGF0aW9ucwogIC8vCi8vKGVycm9yIHdobyBtZXNzYWdlIGlycml0YW50MSAuLi4pICAgIHByb2NlZHVyZQovLyhhc3NlcnRpb24tdmlvbGF0aW9uIHdobyBtZXNzYWdlIGlycml0YW50MSAuLi4pICAgIHByb2NlZHVyZQovLyhhc3NlcnQgPGV4cHJlc3Npb24+KSAgICBzeW50YXgKCiAgLy8KICAvLyAgICAgICAgMTEuMTUgIENvbnRyb2wgZmVhdHVyZXMKICAvLwogIGRlZmluZV9saWJmdW5jKCJhcHBseSIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXIuc2hpZnQoKSwgcmVzdF9hcmdzID0gYXIucG9wKCksIGFyZ3MgPSBhcjsKICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChyZXN0X2FyZ3MudG9fYXJyYXkoKSk7CgogICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIGFyZ3MpOwogIH0pCiAgZGVmaW5lX3N5bnRheCgiY2FsbC13aXRoLWN1cnJlbnQtY29udGludWF0aW9uIiwgZnVuY3Rpb24oeCl7CiAgICByZXR1cm4gbmV3IFBhaXIoU3ltKCJjYWxsL2NjIiksCiAgICAgICAgICAgICB4LmNkcik7CiAgfSkKICBkZWZpbmVfbGliZnVuYygidmFsdWVzIiwgMCwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgaWYgKGFyLmxlbmd0aCA9PSAxKSAvLyBlZy4gKHZhbHVlcyAzKQogICAgICByZXR1cm4gYXJbMF07CiAgICBlbHNlCiAgICAgIHJldHVybiBuZXcgVmFsdWVzKGFyKTsKICB9KQogIGRlZmluZV9saWJmdW5jKCJjYWxsLXdpdGgtdmFsdWVzIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2R1Y2VyID0gYXJbMF0sIGNvbnN1bWVyID0gYXJbMV07CiAgICBhc3NlcnRfcHJvY2VkdXJlKHByb2R1Y2VyKTsKICAgIGFzc2VydF9wcm9jZWR1cmUoY29uc3VtZXIpOwogICAgcmV0dXJuIG5ldyBDYWxsKHByb2R1Y2VyLCBbXSwgZnVuY3Rpb24oYXIpewogICAgICB2YXIgcmVzdWx0ID0gYXJbMF07CiAgICAgIGlmKHJlc3VsdCBpbnN0YW5jZW9mIFZhbHVlcyl7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKGNvbnN1bWVyLCByZXN1bHQuY29udGVudCk7CiAgICAgIH0KICAgICAgZWxzZXsKICAgICAgICAvLyBlZy4gKGNhbGwtd2l0aC12YWx1ZXMgKGxhbWJkYSAoKSAzKQogICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAobGFtYmRhICh4KSB4KSkKICAgICAgICByZXR1cm4gbmV3IENhbGwoY29uc3VtZXIsIFtyZXN1bHRdKTsKICAgICAgfQogICAgfSkKICB9KQoKICAvLwogIC8vZHluYW1pYy13aW5kCgogIC8vICAgICAgICAxMS4xNiAgSXRlcmF0aW9uCiAgLy9uYW1lZCBsZXQKCiAgLy8gICAgICAgIDExLjE3ICBRdWFzaXF1b3RhdGlvbgogIC8vIGAoKSBpcyBleHBhbmRlZCB0byBgY29uc2AgYW5kIGBhcHBlbmRgLgogIC8vIGAjKCkgaXMgZXhwYW5kZWQgdG8gYHZlY3RvcmAgYW5kIGB2ZWN0b3ItYXBwZW5kYC4KICB2YXIgZXhwYW5kX3FxID0gZnVuY3Rpb24oZiwgbHYpewogICAgaWYoZiBpbnN0YW5jZW9mIFN5bWJvbCB8fCBmID09PSBuaWwpewogICAgICByZXR1cm4gTGlzdChTeW0oInF1b3RlIiksIGYpOwogICAgfQogICAgZWxzZSBpZihmIGluc3RhbmNlb2YgUGFpcil7CiAgICAgIHZhciBjYXIgPSBmLmNhcjsKICAgICAgaWYoY2FyIGluc3RhbmNlb2YgUGFpciAmJiBjYXIuY2FyID09PSBTeW0oInVucXVvdGUtc3BsaWNpbmciKSl7CiAgICAgICAgaWYobHYgPT0gMSkKICAgICAgICAgIHJldHVybiBMaXN0KFN5bSgiYXBwZW5kIiksCiAgICAgICAgICAgICAgICAgICAgICBmLmNhci5jZHIuY2FyLAogICAgICAgICAgICAgICAgICAgICAgZXhwYW5kX3FxKGYuY2RyLCBsdikpOwogICAgICAgIGVsc2UKICAgICAgICAgIHJldHVybiBMaXN0KFN5bSgiY29ucyIpLAogICAgICAgICAgICAgICAgICAgICAgTGlzdChTeW0oImxpc3QiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgTGlzdChTeW0oInF1b3RlIiksIFN5bSgidW5xdW90ZS1zcGxpY2luZyIpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kX3FxKGYuY2FyLmNkci5jYXIsIGx2LTEpKSwKICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZF9xcShmLmNkciwgbHYpKTsKICAgICAgfQogICAgICBlbHNlIGlmKGNhciA9PT0gU3ltKCJ1bnF1b3RlIikpewogICAgICAgIGlmKGx2ID09IDEpCiAgICAgICAgICByZXR1cm4gZi5jZHIuY2FyOwogICAgICAgIGVsc2UKICAgICAgICAgIHJldHVybiBMaXN0KFN5bSgibGlzdCIpLAogICAgICAgICAgICAgICAgICAgICAgTGlzdChTeW0oInF1b3RlIiksIFN5bSgidW5xdW90ZSIpKSwKICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZF9xcShmLmNkci5jYXIsIGx2LTEpKTsKICAgICAgfQogICAgICBlbHNlIGlmKGNhciA9PT0gU3ltKCJxdWFzaXF1b3RlIikpCiAgICAgICAgcmV0dXJuIExpc3QoU3ltKCJsaXN0IiksCiAgICAgICAgICAgICAgICAgICAgTGlzdChTeW0oInF1b3RlIiksIFN5bSgicXVhc2lxdW90ZSIpKSwKICAgICAgICAgICAgICAgICAgICBleHBhbmRfcXEoZi5jZHIuY2FyLCBsdisxKSk7CiAgICAgIGVsc2UKICAgICAgICByZXR1cm4gTGlzdChTeW0oImNvbnMiKSwKICAgICAgICAgICAgICAgICAgICBleHBhbmRfcXEoZi5jYXIsIGx2KSwKICAgICAgICAgICAgICAgICAgICBleHBhbmRfcXEoZi5jZHIsIGx2KSk7CiAgICB9CiAgICBlbHNlIGlmKGYgaW5zdGFuY2VvZiBBcnJheSl7CiAgICAgIHZhciB2ZWNzID0gW1tdXTsKICAgICAgZm9yKHZhciBpPTA7IGk8Zi5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYoZltpXSBpbnN0YW5jZW9mIFBhaXIgJiYgZltpXS5jYXIgPT09IFN5bSgidW5xdW90ZS1zcGxpY2luZyIpKSB7CiAgICAgICAgICBpZiAobHYgPT0gMSkgewogICAgICAgICAgICB2YXIgaXRlbSA9IExpc3QoU3ltKCJsaXN0LT52ZWN0b3IiKSwgZltpXS5jZHIuY2FyKTsKICAgICAgICAgICAgaXRlbVsic3BsaWNpbmciXSA9IHRydWU7CiAgICAgICAgICAgIHZlY3MucHVzaChpdGVtKTsKICAgICAgICAgICAgdmVjcy5wdXNoKFtdKTsKICAgICAgICAgIH0KICAgICAgICAgIGVsc2UgewogICAgICAgICAgICB2YXIgaXRlbSA9IExpc3QoU3ltKCJjb25zIiksCiAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0KFN5bSgibGlzdCIpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMaXN0KFN5bSgicXVvdGUiKSwgU3ltKCJ1bnF1b3RlLXNwbGljaW5nIikpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbmRfcXEoZltpXS5jYXIuY2RyLmNhciwgbHYtMSkpLAogICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kX3FxKGZbaV0uY2RyLCBsdikpOwogICAgICAgICAgICBfLmxhc3QodmVjcykucHVzaChpdGVtKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAvLyBFeHBhbmQgb3RoZXIgdGhpbmdzIGFzIHRoZSBzYW1lIGFzIGlmIHRoZXkgYXJlIGluIGEgbGlzdCBxdWFzaXF1b3RlCiAgICAgICAgICBfLmxhc3QodmVjcykucHVzaChleHBhbmRfcXEoZltpXSwgbHYpKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciB2ZWN0b3JzID0gdmVjcy5tYXAoZnVuY3Rpb24odmVjKXsKICAgICAgICBpZiAodmVjWyJzcGxpY2luZyJdKSB7CiAgICAgICAgICByZXR1cm4gdmVjOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIHJldHVybiBDb25zKFN5bSgidmVjdG9yIiksCiAgICAgICAgICAgICAgICAgICAgICBCaXdhU2NoZW1lLmFycmF5X3RvX2xpc3QodmVjKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgaWYgKHZlY3RvcnMubGVuZ3RoID09IDEpIHsKICAgICAgICAgcmV0dXJuIENvbnMoU3ltKCJ2ZWN0b3IiKSwKICAgICAgICAgICAgICAgICAgICAgQml3YVNjaGVtZS5hcnJheV90b19saXN0KHZlY3NbMF0pKTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICByZXR1cm4gQ29ucyhTeW0oInZlY3Rvci1hcHBlbmQiKSwKICAgICAgICAgICAgICAgICAgICBCaXdhU2NoZW1lLmFycmF5X3RvX2xpc3QodmVjdG9ycykpOwogICAgICB9CiAgICB9CiAgICBlbHNlCiAgICAgIHJldHVybiBmOwogIH0KICBkZWZpbmVfc3ludGF4KCJxdWFzaXF1b3RlIiwgZnVuY3Rpb24oeCl7CiAgICByZXR1cm4gZXhwYW5kX3FxKHguY2RyLmNhciwgMSk7CiAgfSkKICAvL3VucXVvdGUKICBkZWZpbmVfc3ludGF4KCJ1bnF1b3RlIiwgZnVuY3Rpb24oeCl7CiAgICB0aHJvdyBuZXcgRXJyb3IoInVucXVvdGUoLCkgbXVzdCBiZSBpbnNpZGUgcXVhc2lxdW90ZShgKSIpOwogIH0pCiAgLy91bnF1b3RlLXNwbGljaW5nCiAgZGVmaW5lX3N5bnRheCgidW5xdW90ZS1zcGxpY2luZyIsIGZ1bmN0aW9uKHgpewogICAgdGhyb3cgbmV3IEVycm9yKCJ1bnF1b3RlLXNwbGljaW5nKCxAKSBtdXN0IGJlIGluc2lkZSBxdWFzaXF1b3RlKGApIik7CiAgfSkKCiAgLy8gICAgICAgIDExLjE4ICBCaW5kaW5nIGNvbnN0cnVjdHMgZm9yIHN5bnRhY3RpYyBrZXl3b3JkcwogIC8vbGV0LXN5bnRheAogIC8vbGV0cmVjLXN5bnRheAoKICAvLyAgICAgICAgMTEuMTkgIE1hY3JvIHRyYW5zZm9ybWVycwogIC8vc3ludGF4LXJ1bGVzCiAgLy9pZGVudGlmaWVyLXN5bnRheAogIC8vCgogIC8vICAgICAgICAxMS4yMCAgVGFpbCBjYWxscyBhbmQgdGFpbCBjb250ZXh0cwogIC8vKG5vIGxpYnJhcnkgZnVuY3Rpb24gaW50cm9kdWNlZCkKCgogIC8vLwogIC8vLyBSNlJTIFN0YW5kYXJkIExpYnJhcmllcwogIC8vLwoKICAvLwogIC8vIENoYXB0ZXIgMSBVbmljb2RlCiAgLy8KLy8oY2hhci11cGNhc2UgY2hhcikgICAgcHJvY2VkdXJlCi8vKGNoYXItZG93bmNhc2UgY2hhcikgICAgcHJvY2VkdXJlCi8vKGNoYXItdGl0bGVjYXNlIGNoYXIpICAgIHByb2NlZHVyZQovLyhjaGFyLWZvbGRjYXNlIGNoYXIpICAgIHByb2NlZHVyZQovLwovLyhjaGFyLWNpPT8gY2hhcjEgY2hhcjIgY2hhcjMgLi4uKSAgICBwcm9jZWR1cmUKLy8oY2hhci1jaTw/IGNoYXIxIGNoYXIyIGNoYXIzIC4uLikgICAgcHJvY2VkdXJlCi8vKGNoYXItY2k+PyBjaGFyMSBjaGFyMiBjaGFyMyAuLi4pICAgIHByb2NlZHVyZQovLyhjaGFyLWNpPD0/IGNoYXIxIGNoYXIyIGNoYXIzIC4uLikgICAgcHJvY2VkdXJlCi8vKGNoYXItY2k+PT8gY2hhcjEgY2hhcjIgY2hhcjMgLi4uKSAgICBwcm9jZWR1cmUKLy8KLy8oY2hhci1hbHBoYWJldGljPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8oY2hhci1udW1lcmljPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8oY2hhci13aGl0ZXNwYWNlPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8oY2hhci11cHBlci1jYXNlPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8oY2hhci1sb3dlci1jYXNlPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8oY2hhci10aXRsZS1jYXNlPyBjaGFyKSAgICBwcm9jZWR1cmUKLy8KLy8oY2hhci1nZW5lcmFsLWNhdGVnb3J5IGNoYXIpICAgIHByb2NlZHVyZQoKICAvLyhzdHJpbmctdXBjYXNlIHN0cmluZykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy11cGNhc2UiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIHJldHVybiBhclswXS50b1VwcGVyQ2FzZSgpOwogIH0pOwogIC8vKHN0cmluZy1kb3duY2FzZSBzdHJpbmcpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctZG93bmNhc2UiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIHJldHVybiBhclswXS50b0xvd2VyQ2FzZSgpOwogIH0pOwovLyhzdHJpbmctdGl0bGVjYXNlIHN0cmluZykgICAgcHJvY2VkdXJlCi8vKHN0cmluZy1mb2xkY2FzZSBzdHJpbmcpICAgIHByb2NlZHVyZQoKICBCaXdhU2NoZW1lLm1ha2Vfc3RyaW5nX2NpX2Z1bmN0aW9uID0gZnVuY3Rpb24oY29tcGFyZSl7CiAgICByZXR1cm4gZnVuY3Rpb24oYXIpewogICAgICBhc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgICAgdmFyIHN0ciA9IGFyWzBdLnRvVXBwZXJDYXNlKCk7CgogICAgICBmb3IodmFyIGk9MTsgaTxhci5sZW5ndGg7IGkrKyl7CiAgICAgICAgYXNzZXJ0X3N0cmluZyhhcltpXSk7CiAgICAgICAgaWYgKCFjb21wYXJlKHN0ciwgYXJbaV0udG9VcHBlckNhc2UoKSkpCiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfTsKICAvLyhzdHJpbmctY2k9PyBzdHJpbmcxIHN0cmluZzIgc3RyaW5nMyAuLi4pICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctY2k9PyIsIDIsIG51bGwsCiAgICBtYWtlX3N0cmluZ19jaV9mdW5jdGlvbihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPT0gYjsgfSkpOwogIC8vKHN0cmluZy1jaTw/IHN0cmluZzEgc3RyaW5nMiBzdHJpbmczIC4uLikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy1jaTw/IiwgMiwgbnVsbCwKICAgIG1ha2Vfc3RyaW5nX2NpX2Z1bmN0aW9uKGZ1bmN0aW9uKGEsIGIpeyByZXR1cm4gYSA8IGI7IH0pKTsKICAvLyhzdHJpbmctY2k+PyBzdHJpbmcxIHN0cmluZzIgc3RyaW5nMyAuLi4pICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctY2k+PyIsIDIsIG51bGwsCiAgICBtYWtlX3N0cmluZ19jaV9mdW5jdGlvbihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPiBiOyB9KSk7CiAgLy8oc3RyaW5nLWNpPD0/IHN0cmluZzEgc3RyaW5nMiBzdHJpbmczIC4uLikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy1jaTw9PyIsIDIsIG51bGwsCiAgICBtYWtlX3N0cmluZ19jaV9mdW5jdGlvbihmdW5jdGlvbihhLCBiKXsgcmV0dXJuIGEgPD0gYjsgfSkpOwogIC8vKHN0cmluZy1jaT49PyBzdHJpbmcxIHN0cmluZzIgc3RyaW5nMyAuLi4pICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJzdHJpbmctY2k+PT8iLCAyLCBudWxsLAogICAgbWFrZV9zdHJpbmdfY2lfZnVuY3Rpb24oZnVuY3Rpb24oYSwgYil7IHJldHVybiBhID49IGI7IH0pKTsKCi8vKHN0cmluZy1ub3JtYWxpemUtbmZkIHN0cmluZykgICAgcHJvY2VkdXJlCi8vKHN0cmluZy1ub3JtYWxpemUtbmZrZCBzdHJpbmcpICAgIHByb2NlZHVyZQovLyhzdHJpbmctbm9ybWFsaXplLW5mYyBzdHJpbmcpICAgIHByb2NlZHVyZQovLyhzdHJpbmctbm9ybWFsaXplLW5ma2Mgc3RyaW5nKSAgICBwcm9jZWR1cmUKCiAgLy8KICAvLyBDaGFwdGVyIDIgQnl0ZXZlY3RvcnMKICAvLwoKICAvLwogIC8vIENoYXB0ZXIgMyBMaXN0IHV0aWxpdGllcwogIC8vCiAgZGVmaW5lX2xpYmZ1bmMoImZpbmQiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcHJvYyA9IGFyWzBdLCBscyA9IGFyWzFdOwogICAgYXNzZXJ0X2xpc3QobHMpOwogICAgcmV0dXJuIENhbGwuZm9yZWFjaChscywgewogICAgICBjYWxsOiBmdW5jdGlvbih4KXsgcmV0dXJuIG5ldyBDYWxsKHByb2MsIFt4LmNhcl0pIH0sCiAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzLCB4KXsgaWYocmVzKSByZXR1cm4geC5jYXI7IH0sCiAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlIH0KICAgIH0pCiAgfSkKICBkZWZpbmVfbGliZnVuYygiZm9yLWFsbCIsIDIsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXIuc2hpZnQoKTsKICAgIHZhciBsaXN0cyA9IGFyOwogICAgXy5lYWNoKGxpc3RzLCBhc3NlcnRfbGlzdCk7CgogICAgdmFyIGxhc3QgPSB0cnVlOyAvL2hvbGRzIGxhc3QgcmVzdWx0IHdoaWNoIHByb2MgcmV0dXJucwogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaChsaXN0cywgewogICAgICBjYWxsOiBmdW5jdGlvbihwYWlycyl7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIF8ubWFwKHBhaXJzLCBmdW5jdGlvbih4KXsgcmV0dXJuIHguY2FyIH0pKTsKICAgICAgfSwKICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHBhaXJzKXsKICAgICAgICBpZihyZXMgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7CiAgICAgICAgbGFzdCA9IHJlczsKICAgICAgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gbGFzdDsgfQogICAgfSkKICB9KQogIGRlZmluZV9saWJmdW5jKCJleGlzdHMiLCAyLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcHJvYyA9IGFyLnNoaWZ0KCk7CiAgICB2YXIgbGlzdHMgPSBhcjsKICAgIF8uZWFjaChsaXN0cywgYXNzZXJ0X2xpc3QpOwoKICAgIHJldHVybiBDYWxsLm11bHRpX2ZvcmVhY2gobGlzdHMsIHsKICAgICAgY2FsbDogZnVuY3Rpb24ocGFpcnMpewogICAgICAgIHJldHVybiBuZXcgQ2FsbChwcm9jLCBfLm1hcChwYWlycywgZnVuY3Rpb24oeCl7IHJldHVybiB4LmNhciB9KSk7CiAgICAgIH0sCiAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzLCBwYWlycyl7CiAgICAgICAgaWYocmVzICE9PSBmYWxzZSkgcmV0dXJuIHJlczsKICAgICAgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gZmFsc2U7IH0KICAgIH0pCiAgfSkKICBkZWZpbmVfbGliZnVuYygiZmlsdGVyIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhclswXSwgbHMgPSBhclsxXTsKICAgIGFzc2VydF9saXN0KGxzKTsKCiAgICB2YXIgYSA9IFtdOwogICAgcmV0dXJuIENhbGwuZm9yZWFjaChscywgewogICAgICBjYWxsOiBmdW5jdGlvbih4KXsgcmV0dXJuIG5ldyBDYWxsKHByb2MsIFt4LmNhcl0pIH0sCiAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzLCB4KXsgaWYocmVzKSBhLnB1c2goeC5jYXIpOyB9LAogICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBhcnJheV90b19saXN0KGEpIH0KICAgIH0pCiAgfSkKLy8gIGRlZmluZV9zY21mdW5jKCJwYXJ0aXRpb24rIiwgMiwgMiwKLy8gICAgIihsYW1iZGEgKHByb2MgbHMpICBcCi8vICAgICAgIChkZWZpbmUgKHBhcnRpdGlvbjIgcHJvYyBscyB0IGYpIFwKLy8gICAgICAgICAoaWYgKG51bGw/IGxzKSBcCi8vICAgICAgICAgICAodmFsdWVzIChyZXZlcnNlIHQpIChyZXZlcnNlIGYpKSBcCi8vICAgICAgICAgICAoaWYgKHByb2MgKGNhciBscykpIFwKLy8gICAgICAgICAgICAgKHBhcnRpdGlvbjIgcHJvYyAoY2RyIGxzKSAoY29ucyAoY2FyIGxzKSB0KSBmKSBcCi8vICAgICAgICAgICAgIChwYXJ0aXRpb24yIHByb2MgKGNkciBscykgdCAoY29ucyAoY2FyIGxzKSBmKSkpKSkgXAovLyAgICAgICAocGFydGl0aW9uMiBwcm9jIGxzICcoKSAnKCkpKSIpOwoKICBkZWZpbmVfbGliZnVuYygicGFydGl0aW9uIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhclswXSwgbHMgPSBhclsxXTsKICAgIGFzc2VydF9saXN0KGxzKTsKCiAgICB2YXIgdCA9IFtdLCBmID0gW107CiAgICByZXR1cm4gQ2FsbC5mb3JlYWNoKGxzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKHgpeyByZXR1cm4gbmV3IENhbGwocHJvYywgW3guY2FyXSkgfSwKICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHgpewogICAgICAgIGlmKHJlcykgdC5wdXNoKHguY2FyKTsKICAgICAgICBlbHNlICAgIGYucHVzaCh4LmNhcik7CiAgICAgIH0sCiAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsKICAgICAgICByZXR1cm4gbmV3IFZhbHVlcyhbYXJyYXlfdG9fbGlzdCh0KSwgYXJyYXlfdG9fbGlzdChmKV0pOwogICAgICB9CiAgICB9KQogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImZvbGQtbGVmdCIsIDMsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXIuc2hpZnQoKSwgYWNjdW0gPSBhci5zaGlmdCgpLCBsaXN0cyA9IGFyOwogICAgXy5lYWNoKGxpc3RzLCBhc3NlcnRfbGlzdCk7CgogICAgcmV0dXJuIENhbGwubXVsdGlfZm9yZWFjaChsaXN0cywgewogICAgICBjYWxsOiBmdW5jdGlvbihwYWlycyl7CiAgICAgICAgdmFyIGFyZ3MgPSBfLm1hcChwYWlycywgZnVuY3Rpb24oeCl7IHJldHVybiB4LmNhciB9KTsKICAgICAgICBhcmdzLnVuc2hpZnQoYWNjdW0pOwogICAgICAgIHJldHVybiBuZXcgQ2FsbChwcm9jLCBhcmdzKTsKICAgICAgfSwKICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHBhaXJzKXsgYWNjdW0gPSByZXM7IH0sCiAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsgcmV0dXJuIGFjY3VtOyB9CiAgICB9KQogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImZvbGQtcmlnaHQiLCAzLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcHJvYyA9IGFyLnNoaWZ0KCksIGFjY3VtID0gYXIuc2hpZnQoKTsKICAgIHZhciBsaXN0cyA9IF8ubWFwKGFyLCBmdW5jdGlvbihscyl7CiAgICAgIC8vIHJldmVyc2UgZWFjaCBsaXN0CiAgICAgIGFzc2VydF9saXN0KGxzKTsKICAgICAgcmV0dXJuIGFycmF5X3RvX2xpc3QobHMudG9fYXJyYXkoKS5yZXZlcnNlKCkpOwogICAgfSkKCiAgICByZXR1cm4gQ2FsbC5tdWx0aV9mb3JlYWNoKGxpc3RzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKHBhaXJzKXsKICAgICAgICB2YXIgYXJncyA9IF8ubWFwKHBhaXJzLCBmdW5jdGlvbih4KXsgcmV0dXJuIHguY2FyIH0pOwogICAgICAgIGFyZ3MucHVzaChhY2N1bSk7CiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIGFyZ3MpOwogICAgICB9LAogICAgICByZXN1bHQ6IGZ1bmN0aW9uKHJlcywgcGFpcnMpeyBhY2N1bSA9IHJlczsgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gYWNjdW07IH0KICAgIH0pCiAgfSkKICBkZWZpbmVfbGliZnVuYygicmVtcCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXJbMF0sIGxzID0gYXJbMV07CiAgICBhc3NlcnRfbGlzdChscyk7CgogICAgdmFyIHJldCA9IFtdOwogICAgcmV0dXJuIENhbGwuZm9yZWFjaChscywgewogICAgICBjYWxsOiBmdW5jdGlvbih4KXsgcmV0dXJuIG5ldyBDYWxsKHByb2MsIFt4LmNhcl0pIH0sCiAgICAgIHJlc3VsdDogZnVuY3Rpb24ocmVzLCB4KXsgaWYoIXJlcykgcmV0LnB1c2goeC5jYXIpOyB9LAogICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBhcnJheV90b19saXN0KHJldCk7IH0KICAgIH0pCiAgfSkKICB2YXIgbWFrZV9yZW1vdmVyID0gZnVuY3Rpb24oa2V5KXsKICAgIHJldHVybiBmdW5jdGlvbihhcil7CiAgICAgIHZhciBvYmogPSBhclswXSwgbHMgPSBhclsxXTsKICAgICAgYXNzZXJ0X2xpc3QobHMpOwoKICAgICAgdmFyIHJldCA9IFtdOwogICAgICByZXR1cm4gQ2FsbC5mb3JlYWNoKGxzLCB7CiAgICAgICAgY2FsbDogZnVuY3Rpb24oeCl7CiAgICAgICAgICByZXR1cm4gbmV3IENhbGwoVG9wRW52W2tleV0gfHwgQ29yZUVudltrZXldLCBbb2JqLCB4LmNhcl0pCiAgICAgICAgfSwKICAgICAgICByZXN1bHQ6IGZ1bmN0aW9uKHJlcywgeCl7IGlmKCFyZXMpIHJldC5wdXNoKHguY2FyKTsgfSwKICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBhcnJheV90b19saXN0KHJldCk7IH0KICAgICAgfSkKICAgIH0KICB9CiAgZGVmaW5lX2xpYmZ1bmMoInJlbW92ZSIsIDIsIDIsIG1ha2VfcmVtb3ZlcigiZXF1YWw/IikpOwogIGRlZmluZV9saWJmdW5jKCJyZW12IiwgMiwgMiwgbWFrZV9yZW1vdmVyKCJlcXY/IikpOwogIGRlZmluZV9saWJmdW5jKCJyZW1xIiwgMiwgMiwgbWFrZV9yZW1vdmVyKCJlcT8iKSk7CgogIGRlZmluZV9saWJmdW5jKCJtZW1wIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHByb2MgPSBhclswXSwgbHMgPSBhclsxXTsKICAgIGFzc2VydF9saXN0KGxzKTsKCiAgICB2YXIgcmV0ID0gW107CiAgICByZXR1cm4gQ2FsbC5mb3JlYWNoKGxzLCB7CiAgICAgIGNhbGw6IGZ1bmN0aW9uKHgpeyByZXR1cm4gbmV3IENhbGwocHJvYywgW3guY2FyXSkgfSwKICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHgpeyBpZihyZXMpIHJldHVybiB4OyB9LAogICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBmYWxzZTsgfQogICAgfSkKICB9KQogIHZhciBtYWtlX2ZpbmRlciA9IGZ1bmN0aW9uKGtleSl7CiAgICByZXR1cm4gZnVuY3Rpb24oYXIpewogICAgICB2YXIgb2JqID0gYXJbMF0sIGxzID0gYXJbMV07CiAgICAgIGFzc2VydF9saXN0KGxzKTsKCiAgICAgIHZhciByZXQgPSBbXTsKICAgICAgcmV0dXJuIENhbGwuZm9yZWFjaChscywgewogICAgICAgIGNhbGw6IGZ1bmN0aW9uKHgpewogICAgICAgICAgcmV0dXJuIG5ldyBDYWxsKFRvcEVudltrZXldIHx8IENvcmVFbnZba2V5XSwgW29iaiwgeC5jYXJdKQogICAgICAgIH0sCiAgICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHgpeyBpZihyZXMpIHJldHVybiB4OyB9LAogICAgICAgIGZpbmlzaDogZnVuY3Rpb24oKXsgcmV0dXJuIGZhbHNlOyB9CiAgICAgIH0pCiAgICB9CiAgfQogIGRlZmluZV9saWJmdW5jKCJtZW1iZXIiLCAyLCAyLCBtYWtlX2ZpbmRlcigiZXF1YWw/IikpOwogIGRlZmluZV9saWJmdW5jKCJtZW12IiwgMiwgMiwgbWFrZV9maW5kZXIoImVxdj8iKSk7CiAgZGVmaW5lX2xpYmZ1bmMoIm1lbXEiLCAyLCAyLCBtYWtlX2ZpbmRlcigiZXE/IikpOwoKICBkZWZpbmVfbGliZnVuYygiYXNzcCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwcm9jID0gYXJbMF0sIGFscyA9IGFyWzFdOwogICAgYXNzZXJ0X2xpc3QoYWxzKTsKCiAgICB2YXIgcmV0ID0gW107CiAgICByZXR1cm4gQ2FsbC5mb3JlYWNoKGFscywgewogICAgICBjYWxsOiBmdW5jdGlvbih4KXsKICAgICAgICBpZih4LmNhci5jYXIpCiAgICAgICAgICByZXR1cm4gbmV3IENhbGwocHJvYywgW3guY2FyLmNhcl0pOwogICAgICAgIGVsc2UKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiYXNzKjogcGFpciByZXF1aXJlZCBidXQgZ290ICIrdG9fd3JpdGUoeC5jYXIpKTsKICAgICAgfSwKICAgICAgcmVzdWx0OiBmdW5jdGlvbihyZXMsIHgpeyBpZihyZXMpIHJldHVybiB4LmNhcjsgfSwKICAgICAgZmluaXNoOiBmdW5jdGlvbigpeyByZXR1cm4gZmFsc2U7IH0KICAgIH0pCiAgfSkKICB2YXIgbWFrZV9hc3NvYyA9IGZ1bmN0aW9uKGZ1bmNfbmFtZSwgZXFfZnVuY19uYW1lKXsKICAgIHJldHVybiBmdW5jdGlvbihhcil7CiAgICAgIHZhciBvYmogPSBhclswXSwgbGlzdCA9IGFyWzFdOwogICAgICBhc3NlcnRfbGlzdChsaXN0KTsKCiAgICAgIHZhciByZXQgPSBbXTsKICAgICAgcmV0dXJuIENhbGwuZm9yZWFjaChsaXN0LCB7CiAgICAgICAgY2FsbDogZnVuY3Rpb24obHMpewogICAgICAgICAgaWYoIUJpd2FTY2hlbWUuaXNQYWlyKGxzLmNhcikpCiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihmdW5jX25hbWUrIjogcGFpciByZXF1aXJlZCBidXQgZ290ICIrdG9fd3JpdGUobHMuY2FyKSk7CgogICAgICAgICAgdmFyIGVxdWFsaXR5ID0gKFRvcEVudltlcV9mdW5jX25hbWVdIHx8IENvcmVFbnZbZXFfZnVuY19uYW1lXSk7CiAgICAgICAgICByZXR1cm4gbmV3IENhbGwoZXF1YWxpdHksIFtvYmosIGxzLmNhci5jYXJdKTsKICAgICAgICB9LAogICAgICAgIHJlc3VsdDogZnVuY3Rpb24od2FzX2VxdWFsLCBscyl7IGlmKHdhc19lcXVhbCkgcmV0dXJuIGxzLmNhcjsgfSwKICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IHJldHVybiBmYWxzZTsgfQogICAgICB9KQogICAgfQogIH0KICBkZWZpbmVfbGliZnVuYygiYXNzb2MiLCAyLCAyLCBtYWtlX2Fzc29jKCJhc3NvYyIsICJlcXVhbD8iKSk7CiAgZGVmaW5lX2xpYmZ1bmMoImFzc3YiLCAyLCAyLCBtYWtlX2Fzc29jKCJhc3N2IiwgImVxdj8iKSk7CiAgZGVmaW5lX2xpYmZ1bmMoImFzc3EiLCAyLCAyLCBtYWtlX2Fzc29jKCJhc3NxIiwgImVxPyIpKTsKCiAgZGVmaW5lX2xpYmZ1bmMoImNvbnMqIiwgMSwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgaWYoYXIubGVuZ3RoID09IDEpCiAgICAgIHJldHVybiBhclswXTsKICAgIGVsc2V7CiAgICAgIHZhciByZXQgPSBudWxsOwogICAgICBfLmVhY2goYXIucmV2ZXJzZSgpLCBmdW5jdGlvbih4KXsKICAgICAgICBpZihyZXQpewogICAgICAgICAgcmV0ID0gbmV3IFBhaXIoeCwgcmV0KTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgICAgcmV0ID0geDsKICAgICAgfSkKICAgICAgcmV0dXJuIHJldDsKICAgIH0KICB9KTsKCiAgLy8KICAvLyBDaGFwdGVyIDQgU29ydGluZwogIC8vCiAgKGZ1bmN0aW9uKCl7CiAgICAvLyBEZXN0cnVjdGl2ZWx5IHNvcnQgdGhlIGdpdmVuIGFycmF5CiAgICAvLyB3aXRoIHNjaGVtZSBmdW5jdGlvbiBgcHJvY2AgYXMgY29tcGFyYXRvcgogICAgdmFyIG1lcmdlU29ydCA9IGZ1bmN0aW9uKGFyeSwgcHJvYywgZmluaXNoKSB7CiAgICAgIGlmIChhcnkubGVuZ3RoIDw9IDEpIHJldHVybiBmaW5pc2goYXJ5KTsKICAgICAgcmV0dXJuIG1lcmdlU29ydF8oYXJ5LCBwcm9jLCBmaW5pc2gsIFtbMCwgYXJ5Lmxlbmd0aCwgZmFsc2VdXSwgZmFsc2UpOwogICAgfTsKCiAgICB2YXIgbWVyZ2VTb3J0XyA9IGZ1bmN0aW9uKGFyeSwgcHJvYywgZmluaXNoLCBzdGFjaywgdXApIHsKICAgICAgd2hpbGUodHJ1ZSkgewogICAgICAgIHZhciBzdGFydCA9IHN0YWNrW3N0YWNrLmxlbmd0aC0xXVswXSwKICAgICAgICAgICAgZW5kICAgPSBzdGFja1tzdGFjay5sZW5ndGgtMV1bMV0sCiAgICAgICAgICAgIGxlZnQgID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdWzJdOwogICAgICAgIHZhciBsZW4gPSBlbmQgLSBzdGFydDsKICAgICAgICAvL2NvbnNvbGUuZGVidWcoIm1lcmdlU29ydF8iLCBhcnksIHN0YWNrLmpvaW4oJyAnKSwgdXA/InUiOiJkIiwgIiIrc3RhcnQrIi4uIisoZW5kLTEpKQoKICAgICAgICBpZiAobGVuID49IDIgJiYgIXVwKSB7CiAgICAgICAgICAvLyBUaGVyZSBhcmUgcGFydHMgdG8gYmUgc29ydGVkCiAgICAgICAgICBzdGFjay5wdXNoKFtzdGFydCwgc3RhcnQrKGxlbj4+MSksIHRydWVdKTsgY29udGludWU7CiAgICAgICAgfQogICAgICAgIGVsc2UgaWYgKGxlZnQpIHsKICAgICAgICAgIC8vIExlZnQgcGFydCBzb3J0ZWQuIENvbnRpbnVlIHRvIHRoZSByaWdodCBvbmUKICAgICAgICAgIHN0YWNrLnBvcCgpOwogICAgICAgICAgdmFyIHJlbmQgPSBzdGFja1tzdGFjay5sZW5ndGgtMV1bMV07CiAgICAgICAgICBzdGFjay5wdXNoKFtlbmQsIHJlbmQsIGZhbHNlXSk7IHVwID0gZmFsc2U7IGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgIC8vIFJpZ2h0IHBhcnQgc29ydGVkLiBNZXJnZSBsZWZ0IGFuZCByaWdodAogICAgICAgICAgc3RhY2sucG9wKCk7CiAgICAgICAgICB2YXIgbHN0YXJ0ID0gc3RhY2tbc3RhY2subGVuZ3RoLTFdWzBdOwogICAgICAgICAgdmFyIGFyeTEgPSBhcnkuc2xpY2UobHN0YXJ0LCBzdGFydCksCiAgICAgICAgICAgICAgYXJ5MiA9IGFyeS5zbGljZShzdGFydCwgZW5kKTsKICAgICAgICAgIHJldHVybiBtZXJnZV8oYXJ5MSwgYXJ5MiwgcHJvYywgW10sIDAsIDAsIGZ1bmN0aW9uKHJldCkgewogICAgICAgICAgICAvL2NvbnNvbGUuZGVidWcoIm1lcmdlU29ydGQiLCBhcnksIHN0YWNrLmpvaW4oJyAnKSwgdXA/InUiOiJkIiwgYXJ5MSwgYXJ5MiwgcmV0LCAiIitzdGFydCsiLi4iKyhzdGFydCtsZW4tMSkpOwogICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGFyeVtsc3RhcnQgKyBpXSA9IHJldFtpXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGZpbmlzaChhcnkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgIHJldHVybiBtZXJnZVNvcnRfKGFyeSwgcHJvYywgZmluaXNoLCBzdGFjaywgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICB2YXIgbWVyZ2VfID0gZnVuY3Rpb24oYXJ5MSwgYXJ5MiwgcHJvYywgcmV0LCBpLCBqLCBjb250KSB7CiAgICAgIC8vY29uc29sZS5kZWJ1ZygibWVyZ2VfIiwgYXJ5MSwgYXJ5MiwgcmV0LCBpLCBqKTsKICAgICAgdmFyIGxlbjEgPSBhcnkxLmxlbmd0aCwgbGVuMiA9IGFyeTIubGVuZ3RoOwogICAgICBpZiAoaSA8IGxlbjEgJiYgaiA8IGxlbjIpIHsKICAgICAgICByZXR1cm4gbmV3IENhbGwocHJvYywgW2FyeTJbal0sIGFyeTFbaV1dLCBmdW5jdGlvbihhcikgewogICAgICAgICAgLy9jb25zb2xlLmRlYnVnKCJjb21wIiwgW2FyeTJbal0sIGFyeTFbaV1dLCBhclswXSk7CiAgICAgICAgICBpZiAoYXJbMF0pIHsKICAgICAgICAgICAgcmV0LnB1c2goYXJ5MltqXSk7IGorPTE7CiAgICAgICAgICB9CiAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0LnB1c2goYXJ5MVtpXSk7IGkrPTE7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gbWVyZ2VfKGFyeTEsIGFyeTIsIHByb2MsIHJldCwgaSwgaiwgY29udCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgd2hpbGUgKGkgPCBsZW4xKSB7IHJldC5wdXNoKGFyeTFbaV0pOyBpKz0xOyB9CiAgICAgICAgd2hpbGUgKGogPCBsZW4yKSB7IHJldC5wdXNoKGFyeTJbal0pOyBqKz0xOyB9CiAgICAgICAgcmV0dXJuIGNvbnQocmV0KQogICAgICB9CiAgICB9OwoKICAgIHZhciBjb21wYXJlRm4gPSBmdW5jdGlvbihhLGIpewogICAgICByZXR1cm4gQml3YVNjaGVtZS5sdChhLCBiKSA/IC0xIDoKICAgICAgICAgICAgIEJpd2FTY2hlbWUubHQoYiwgYSkgPyAxIDogMDsKICAgIH07CgogICAgZGVmaW5lX2xpYmZ1bmMoImxpc3Qtc29ydCIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgICAgaWYoYXJbMV0pewogICAgICAgIGFzc2VydF9wcm9jZWR1cmUoYXJbMF0pOwogICAgICAgIGFzc2VydF9saXN0KGFyWzFdKTsKICAgICAgICByZXR1cm4gbWVyZ2VTb3J0KGFyWzFdLnRvX2FycmF5KCksIGFyWzBdLCBmdW5jdGlvbihyZXQpIHsKICAgICAgICAgIHJldHVybiBhcnJheV90b19saXN0KHJldCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgYXNzZXJ0X2xpc3QoYXJbMF0pOwogICAgICAgIHJldHVybiBhcnJheV90b19saXN0KGFyWzBdLnRvX2FycmF5KCkuc29ydChjb21wYXJlRm4pKTsKICAgICAgfQogICAgfSk7CgogICAgLy8odmVjdG9yLXNvcnQgcHJvYyB2ZWN0b3IpICAgIHByb2NlZHVyZQogICAgZGVmaW5lX2xpYmZ1bmMoInZlY3Rvci1zb3J0IiwgMSwgMiwgZnVuY3Rpb24oYXIpewogICAgICBpZihhclsxXSl7CiAgICAgICAgYXNzZXJ0X3Byb2NlZHVyZShhclswXSk7CiAgICAgICAgYXNzZXJ0X3ZlY3RvcihhclsxXSk7CiAgICAgICAgcmV0dXJuIG1lcmdlU29ydChfLmNsb25lKGFyWzFdKSwgYXJbMF0sIGZ1bmN0aW9uKHJldCl7CiAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgIH0pOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIGFzc2VydF92ZWN0b3IoYXJbMF0pOwogICAgICAgIHJldHVybiBfLmNsb25lKGFyWzBdKS5zb3J0KGNvbXBhcmVGbik7CiAgICAgIH0KICAgIH0pOwoKICAgIC8vKHZlY3Rvci1zb3J0ISBwcm9jIHZlY3RvcikgICAgcHJvY2VkdXJlCiAgICBkZWZpbmVfbGliZnVuYygidmVjdG9yLXNvcnQhIiwgMSwgMiwgZnVuY3Rpb24oYXIpewogICAgICBpZihhclsxXSl7CiAgICAgICAgYXNzZXJ0X3Byb2NlZHVyZShhclswXSk7CiAgICAgICAgYXNzZXJ0X3ZlY3RvcihhclsxXSk7CiAgICAgICAgcmV0dXJuIG1lcmdlU29ydChhclsxXSwgYXJbMF0sIGZ1bmN0aW9uKHJldCkgewogICAgICAgICAgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgYXNzZXJ0X3ZlY3RvcihhclswXSk7CiAgICAgICAgYXJbMF0uc29ydChjb21wYXJlRm4pOwogICAgICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogICAgICB9CiAgICB9KTsKICB9KSgpOwoKICAvLwogIC8vIENoYXB0ZXIgNSBDb250cm9sIFN0cnVjdHVyZXMKICAvLwogIGRlZmluZV9zeW50YXgoIndoZW4iLCBmdW5jdGlvbih4KXsKICAgIC8vKHdoZW4gdGVzdCBib2R5IC4uLikKICAgIC8vPT4gKGlmIHRlc3QgKGJlZ2luIGJvZHkgLi4uKSAjPHVuZGVmPikKICAgIHZhciB0ZXN0ID0geC5jZHIuY2FyLCBib2R5ID0geC5jZHIuY2RyOwoKICAgIHJldHVybiBuZXcgUGFpcihTeW0oImlmIiksCiAgICAgICAgICAgICBuZXcgUGFpcih0ZXN0LAogICAgICAgICAgICAgICBuZXcgUGFpcihuZXcgUGFpcihTeW0oImJlZ2luIiksIGJvZHkpLAogICAgICAgICAgICAgICAgIG5ldyBQYWlyKEJpd2FTY2hlbWUudW5kZWYsIG5pbCkpKSk7CiAgfSk7CgogIGRlZmluZV9zeW50YXgoInVubGVzcyIsIGZ1bmN0aW9uKHgpewogICAgLy8odW5sZXNzIHRlc3QgYm9keSAuLi4pCiAgICAvLz0+IChpZiAobm90IHRlc3QpIChiZWdpbiBib2R5IC4uLikgIzx1bmRlZj4pCiAgICB2YXIgdGVzdCA9IHguY2RyLmNhciwgYm9keSA9IHguY2RyLmNkcjsKCiAgICByZXR1cm4gbmV3IFBhaXIoU3ltKCJpZiIpLAogICAgICAgICAgICAgbmV3IFBhaXIobmV3IFBhaXIoU3ltKCJub3QiKSwgbmV3IFBhaXIodGVzdCwgbmlsKSksCiAgICAgICAgICAgICAgIG5ldyBQYWlyKG5ldyBQYWlyKFN5bSgiYmVnaW4iKSwgYm9keSksCiAgICAgICAgICAgICAgICAgbmV3IFBhaXIoQml3YVNjaGVtZS51bmRlZiwgbmlsKSkpKTsKICB9KTsKCiAgZGVmaW5lX3N5bnRheCgiZG8iLCBmdW5jdGlvbih4KXsKICAgIC8vKGRvICgodmFyMSBpbml0MSBzdGVwMSkKICAgIC8vICAgICAodmFyMiBpbml0MiBzdGVwMikgLi4uKQogICAgLy8gICAgKHRlc3QgZXhwcjEgZXhwcjIgLi4uKQogICAgLy8gIGJvZHkxIGJvZHkyIC4uLikKICAgIC8vPT4gKGxldCBsb29wYCAoKHZhcjEgaW5pdDEpICh2YXIyIGluaXQyKSAuLi4pCiAgICAvLyAgICAgKGlmIHRlc3QKICAgIC8vICAgICAgIChiZWdpbiBleHByMSBleHByMiAuLi4pCiAgICAvLyAgICAgICAoYmVnaW4gYm9keTEgYm9keTIgLi4uCiAgICAvLyAgICAgICAgICAgICAgKGxvb3BgIHN0ZXAxIHN0ZXAyIC4uLikpKSkpCgogICAgLy8gcGFyc2UgYXJndW1lbnRzCiAgICBpZighQml3YVNjaGVtZS5pc1BhaXIoeC5jZHIpKQogICAgICB0aHJvdyBuZXcgRXJyb3IoImRvOiBubyB2YXJpYWJsZXMgb2YgZG8iKTsKICAgIHZhciB2YXJzYyA9IHguY2RyLmNhcjsKICAgIGlmKCFCaXdhU2NoZW1lLmlzUGFpcih2YXJzYykpCiAgICAgIHRocm93IG5ldyBFcnJvcigiZG86IHZhcmlhYmxlcyBtdXN0IGJlIGdpdmVuIGFzIGEgbGlzdCIpOwogICAgaWYoIUJpd2FTY2hlbWUuaXNQYWlyKHguY2RyLmNkcikpCiAgICAgIHRocm93IG5ldyBFcnJvcigiZG86IG5vIHJlc3VsdGluZyBmb3JtIG9mIGRvIik7CiAgICB2YXIgcmVzdWx0YyA9IHguY2RyLmNkci5jYXI7CiAgICB2YXIgYm9keWMgPSB4LmNkci5jZHIuY2RyOwoKICAgIC8vIGNvbnN0cnVjdCBzdWJmb3JtcwogICAgdmFyIGxvb3AgPSBCaXdhU2NoZW1lLmdlbnN5bSgpOwoKICAgIHZhciBpbml0X3ZhcnMgPSBhcnJheV90b19saXN0KHZhcnNjLm1hcChmdW5jdGlvbih2YXJfZGVmKXsKICAgICAgdmFyIGEgPSB2YXJfZGVmLnRvX2FycmF5KCk7CiAgICAgIHJldHVybiBMaXN0KGFbMF0sIGFbMV0pOwogICAgfSkpOwoKICAgIHZhciB0ZXN0ID0gcmVzdWx0Yy5jYXI7CiAgICB2YXIgcmVzdWx0X2V4cHJzID0gbmV3IFBhaXIoU3ltKCJiZWdpbiIpLCByZXN1bHRjLmNkcik7CgogICAgdmFyIG5leHRfbG9vcCA9IG5ldyBQYWlyKGxvb3AsIGFycmF5X3RvX2xpc3QodmFyc2MubWFwKGZ1bmN0aW9uKHZhcl9kZWYpewogICAgICB2YXIgYSA9IHZhcl9kZWYudG9fYXJyYXkoKTsKICAgICAgcmV0dXJuIGFbMl0gfHwgYVswXTsKICAgIH0pKSk7CiAgICB2YXIgYm9keV9leHBycyA9IG5ldyBQYWlyKFN5bSgiYmVnaW4iKSwgYm9keWMpLmNvbmNhdChMaXN0KG5leHRfbG9vcCkpOwoKICAgIC8vIGNvbWJpbmUgc3ViZm9ybXMKICAgIHJldHVybiBMaXN0KFN5bSgibGV0IiksCiAgICAgICAgICAgICAgICBsb29wLAogICAgICAgICAgICAgICAgaW5pdF92YXJzLAogICAgICAgICAgICAgICAgTGlzdChTeW0oImlmIiksCiAgICAgICAgICAgICAgICAgICAgIHRlc3QsCiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdF9leHBycywKICAgICAgICAgICAgICAgICAgICAgYm9keV9leHBycykpOwogIH0pOwoKICAvLyhjYXNlLWxhbWJkYSA8Y2FzZS1sYW1iZGEgY2xhdXNlPiAuLi4pICAgIHN5bnRheAogIGRlZmluZV9zeW50YXgoImNhc2UtbGFtYmRhIiwgZnVuY3Rpb24oeCl7CiAgICBpZighQml3YVNjaGVtZS5pc1BhaXIoeC5jZHIpKQogICAgICB0aHJvdyBuZXcgRXJyb3IoImNhc2UtbGFtYmRhOiBhdCBsZWFzdCAxIGNsYXVzZSByZXF1aXJlZCIpOwogICAgdmFyIGNsYXVzZXMgPSB4LmNkci50b19hcnJheSgpOwogICAgCiAgICB2YXIgYXJnc18gPSBCaXdhU2NoZW1lLmdlbnN5bSgpOwogICAgdmFyIGV4ZWMgPSBMaXN0KFN5bSgicmFpc2UiKSwgImNhc2UtbGFtYmRhOiBubyBtYXRjaGluZyBjbGF1c2UgZm91bmQiKTsKCiAgICBjbGF1c2VzLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uKGNsYXVzZSkgewogICAgICBpZighQml3YVNjaGVtZS5pc1BhaXIoY2xhdXNlKSkKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImNhc2UtbGFtYmRhOiBjbGF1c2UgbXVzdCBiZSBhIHBhaXI6ICIrCiAgICAgICAgICAgICAgICAgICAgICAgIEJpd2FTY2hlbWUudG9fd3JpdGUoY2xhdXNlKSk7CiAgICAgIHZhciBmb3JtYWxzID0gY2xhdXNlLmNhciwgY2xhdXNlX2JvZHkgPSBjbGF1c2UuY2RyOwoKICAgICAgaWYgKGZvcm1hbHMgPT09IEJpd2FTY2hlbWUubmlsKSB7CiAgICAgICAgZXhlYyA9IExpc3QoU3ltKCJpZiIpLAogICAgICAgICAgICAgICAgICAgIExpc3QoU3ltKCJudWxsPyIpLCBhcmdzXyksCiAgICAgICAgICAgICAgICAgICAgbmV3IFBhaXIoU3ltKCJiZWdpbiIpLCBjbGF1c2VfYm9keSksCiAgICAgICAgICAgICAgICAgICAgZXhlYyk7CiAgICAgIH0KICAgICAgZWxzZSBpZiAoQml3YVNjaGVtZS5pc1BhaXIoZm9ybWFscykpIHsKICAgICAgICB2YXIgbGVuID0gZm9ybWFscy5sZW5ndGgoKSwgbGFzdF9jZHIgPSBmb3JtYWxzLmxhc3RfY2RyKCk7CiAgICAgICAgdmFyIHByZWQgPSAobGFzdF9jZHIgPT09IEJpd2FTY2hlbWUubmlsID8gU3ltKCI9IikgOiBTeW0oIj49IikpOwogICAgICAgIHZhciBsYW1iZGEgPSBuZXcgUGFpcihTeW0oImxhbWJkYSIpLAogICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKGZvcm1hbHMsCiAgICAgICAgICAgICAgICAgICAgICAgICBjbGF1c2VfYm9keSkpOwogICAgICAgIGV4ZWMgPSBMaXN0KFN5bSgiaWYiKSwKICAgICAgICAgICAgICAgICAgICBMaXN0KHByZWQsIExpc3QoU3ltKCJsZW5ndGgiKSwgYXJnc18pLCBsZW4pLAogICAgICAgICAgICAgICAgICAgIExpc3QoU3ltKCJhcHBseSIpLCBsYW1iZGEsIGFyZ3NfKSwKICAgICAgICAgICAgICAgICAgICBleGVjKTsKICAgICAgfQogICAgICBlbHNlIGlmIChCaXdhU2NoZW1lLmlzU3ltYm9sKGZvcm1hbHMpKSB7CiAgICAgICAgZXhlYyA9IG5ldyBQYWlyKFN5bSgibGV0MSIpLAogICAgICAgICAgICAgICAgIG5ldyBQYWlyKGZvcm1hbHMsCiAgICAgICAgICAgICAgICAgICBuZXcgUGFpcihhcmdzXywKICAgICAgICAgICAgICAgICAgICAgY2xhdXNlX2JvZHkpKSk7CiAgICAgICAgLy8gTm90ZTogcHJldmlvdXMgYGV4ZWNgIGlzIGp1c3QgZGlzY2FyZGVkIGJlY2F1c2UgdGhpcyBpcyBhIHdpbGRjYXJkIHBhdHRlcm4uCiAgICAgIH0KICAgICAgZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJjYXNlLWxhbWJkYTogaW52YWxpZCBmb3JtYWxzOiAiKwogICAgICAgICAgICAgICAgICAgICAgICBCaXdhU2NoZW1lLnRvX3dyaXRlKGZvcm1hbHMpKTsKICAgICAgfQogICAgfSk7CgogICAgcmV0dXJuIExpc3QoU3ltKCJsYW1iZGEiKSwgYXJnc18sIGV4ZWMpOwogIH0pOwoKICAvLwogIC8vIENoYXB0ZXIgNiBSZWNvcmRzCiAgLy8gc2VlIGFsc286IHNyYy9zeXN0ZW0vcmVjb3JkLmpzCiAgLy8KCiAgLy8gNi4yIFJlY29yZHM6IFN5bnRhY3RpYyBsYXllcgogIC8vZXF2LCBlcQoKICAvLyhkZWZpbmUtcmVjb3JkLXR5cGUgPG5hbWUgc3BlYz4gPHJlY29yZCBjbGF1c2U+KikgICAgc3ludGF4CiAgZGVmaW5lX3N5bnRheCgiZGVmaW5lLXJlY29yZC10eXBlIiwgZnVuY3Rpb24oeCl7CiAgICAvLyAoZGVmaW5lLXJlY29yZC10eXBlIDxuYW1lIHNwZWM+IDxyZWNvcmQgY2xhdXNlPiopCiAgICB2YXIgbmFtZV9zcGVjID0geC5jZHIuY2FyOwogICAgdmFyIHJlY29yZF9jbGF1c2VzID0geC5jZHIuY2RyOwoKICAgIC8vIDEuIHBhcnNlIG5hbWUgc3BlYwogICAgLy8gPG5hbWUgc3BlYz46IGVpdGhlcgogICAgLy8gLSA8cmVjb3JkIG5hbWU+IGVnOiBwb2ludAogICAgLy8gLSAoPHJlY29yZCBuYW1lPiA8Y29uc3RydWN0b3IgbmFtZT4gPHByZWRpY2F0ZSBuYW1lPikKICAgIC8vICAgZWc6IChwb2ludCBtYWtlLXBvaW50IHBvaW50PykKICAgIGlmKEJpd2FTY2hlbWUuaXNTeW1ib2wobmFtZV9zcGVjKSl7CiAgICAgIHZhciByZWNvcmRfbmFtZSA9IG5hbWVfc3BlYzsKICAgICAgdmFyIGNvbnN0cnVjdG9yX25hbWUgPSBTeW0oIm1ha2UtIituYW1lX3NwZWMubmFtZSk7CiAgICAgIHZhciBwcmVkaWNhdGVfbmFtZSA9IFN5bShuYW1lX3NwZWMubmFtZSsiPyIpOwogICAgfQogICAgZWxzZXsKICAgICAgYXNzZXJ0X2xpc3QobmFtZV9zcGVjKTsKICAgICAgdmFyIHJlY29yZF9uYW1lID0gbmFtZV9zcGVjLmNhcjsKICAgICAgdmFyIGNvbnN0cnVjdG9yX25hbWUgPSBuYW1lX3NwZWMuY2RyLmNhcjsKICAgICAgdmFyIHByZWRpY2F0ZV9uYW1lID0gbmFtZV9zcGVjLmNkci5jZHIuY2FyOwogICAgICBhc3NlcnRfc3ltYm9sKHJlY29yZF9uYW1lKTsKICAgICAgYXNzZXJ0X3N5bWJvbChjb25zdHJ1Y3Rvcl9uYW1lKTsKICAgICAgYXNzZXJ0X3N5bWJvbChwcmVkaWNhdGVfbmFtZSk7CiAgICB9CgogICAgLy8gMi4gcGFyc2UgcmVjb3JkIGNsYXVzZXMKICAgIHZhciBzZWFsZWQgPSBmYWxzZTsKICAgIHZhciBvcGFxdWUgPSBmYWxzZTsKICAgIHZhciBub25nZW5lcmF0aXZlID0gZmFsc2U7CiAgICB2YXIgdWlkID0gZmFsc2U7CiAgICB2YXIgcGFyZW50X25hbWU7CiAgICB2YXIgcGFyZW50X3J0ZCA9IGZhbHNlOwogICAgdmFyIHBhcmVudF9jZCA9IGZhbHNlOwogICAgdmFyIHByb3RvY29sID0gZmFsc2U7CiAgICB2YXIgZmllbGRzID0gW107CgogICAgLy8gPHJlY29yZCBjbGF1c2U+OgogICAgXy5lYWNoKHJlY29yZF9jbGF1c2VzLnRvX2FycmF5KCksIGZ1bmN0aW9uKGNsYXVzZSl7CiAgICAgIHN3aXRjaChjbGF1c2UuY2FyKXsKICAgICAgICAvLyAtIChmaWVsZHMgPGZpZWxkIHNwZWM+KikKICAgICAgICBjYXNlIFN5bSgiZmllbGRzIik6CiAgICAgICAgICBmaWVsZHMgPSBfLm1hcChjbGF1c2UuY2RyLnRvX2FycmF5KCksIGZ1bmN0aW9uKGZpZWxkX3NwZWMsIGlkeCl7CiAgICAgICAgICAgIGlmKEJpd2FTY2hlbWUuaXNTeW1ib2woZmllbGRfc3BlYykpewogICAgICAgICAgICAgIC8vIC0gPGZpZWxkIG5hbWU+CiAgICAgICAgICAgICAgcmV0dXJuIHtuYW1lOiBmaWVsZF9zcGVjLCBpZHg6IGlkeCwgbXV0YWJsZTogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3Nvcl9uYW1lOiBudWxsLCBtdXRhdG9yX25hbWU6IG51bGx9OwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgYXNzZXJ0X2xpc3QoZmllbGRfc3BlYyk7CiAgICAgICAgICAgICAgYXNzZXJ0X3N5bWJvbChmaWVsZF9zcGVjLmNhcik7CiAgICAgICAgICAgICAgc3dpdGNoKGZpZWxkX3NwZWMuY2FyKXsKICAgICAgICAgICAgICAgIGNhc2UgU3ltKCJpbW11dGFibGUiKToKICAgICAgICAgICAgICAgICAgLy8gLSAoaW1tdXRhYmxlIDxmaWVsZCBuYW1lPikKICAgICAgICAgICAgICAgICAgLy8gLSAoaW1tdXRhYmxlIDxmaWVsZCBuYW1lPiA8YWNjZXNzb3IgbmFtZT4pCiAgICAgICAgICAgICAgICAgIHZhciBmaWVsZF9uYW1lID0gZmllbGRfc3BlYy5jZHIuY2FyOwogICAgICAgICAgICAgICAgICBhc3NlcnRfc3ltYm9sKGZpZWxkX25hbWUpOwoKICAgICAgICAgICAgICAgICAgaWYoQml3YVNjaGVtZS5pc05pbChmaWVsZF9zcGVjLmNkci5jZHIpKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogZmllbGRfbmFtZSwgaWR4OiBpZHgsIG11dGFibGU6IGZhbHNlfTsKICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogZmllbGRfbmFtZSwgaWR4OiBpZHgsIG11dGFibGU6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JfbmFtZTogZmllbGRfc3BlYy5jZHIuY2RyLmNhcn07CiAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgIGNhc2UgU3ltKCJtdXRhYmxlIik6CiAgICAgICAgICAgICAgICAgIC8vIC0gKG11dGFibGUgPGZpZWxkIG5hbWU+KQogICAgICAgICAgICAgICAgICAvLyAtIChtdXRhYmxlIDxmaWVsZCBuYW1lPiA8YWNjZXNzb3IgbmFtZT4gPG11dGF0b3IgbmFtZT4pCiAgICAgICAgICAgICAgICAgIHZhciBmaWVsZF9uYW1lID0gZmllbGRfc3BlYy5jZHIuY2FyOwogICAgICAgICAgICAgICAgICBhc3NlcnRfc3ltYm9sKGZpZWxkX25hbWUpOwoKICAgICAgICAgICAgICAgICAgaWYoQml3YVNjaGVtZS5pc05pbChmaWVsZF9zcGVjLmNkci5jZHIpKQogICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogZmllbGRfbmFtZSwgaWR4OiBpZHgsIG11dGFibGU6IHRydWV9CiAgICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICByZXR1cm4ge25hbWU6IGZpZWxkX25hbWUsIGlkeDogaWR4LCBtdXRhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzb3JfbmFtZTogZmllbGRfc3BlYy5jZHIuY2RyLmNhciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11dGF0b3JfbmFtZTogIGZpZWxkX3NwZWMuY2RyLmNkci5jZHIuY2FyfTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImRlZmluZS1yZWNvcmQtdHlwZTogZmllbGQgZGVmaW5pdGlvbiAiKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibXVzdCBzdGFydCB3aXRoIGBpbW11dGFibGUnIG9yIGBtdXRhYmxlJyAiKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiYnV0IGdvdCAiK0Jpd2FTY2hlbWUuaW5zcGVjdChmaWVsZF9zcGVjLmNhcikpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyAtIChwYXJlbnQgPG5hbWU+KQogICAgICAgIGNhc2UgU3ltKCJwYXJlbnQiKToKICAgICAgICAgIHBhcmVudF9uYW1lID0gY2xhdXNlLmNkci5jYXI7CiAgICAgICAgICBhc3NlcnRfc3ltYm9sKHBhcmVudF9uYW1lKTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIC0gKHByb3RvY29sIDxleHByPikKICAgICAgICBjYXNlIFN5bSgicHJvdG9jb2wiKToKICAgICAgICAgIHByb3RvY29sID0gY2xhdXNlLmNkci5jYXI7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyAtIChzZWFsZWQgPGJvb2w+KQogICAgICAgIGNhc2UgU3ltKCJzZWFsZWQiKToKICAgICAgICAgIHNlYWxlZCA9ICEhY2xhdXNlLmNkci5jYXI7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyAtIChvcGFxdWUgPGJvb2w+KQogICAgICAgIGNhc2UgU3ltKCJvcGFxdWUiKToKICAgICAgICAgIG9wYXF1ZSA9ICEhY2xhdXNlLmNkci5jYXI7CiAgICAgICAgICBicmVhazsKICAgICAgICAvLyAtIChub25nZW5lcmF0aXZlIDx1aWQ+PykKICAgICAgICBjYXNlIFN5bSgibm9uZ2VuZXJhdGl2ZSIpOgogICAgICAgICAgbm9uZ2VuZXJhdGl2ZSA9IHRydWU7CiAgICAgICAgICB1aWQgPSBjbGF1c2UuY2RyLmNhcjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIC8vIC0gKHBhcmVudC1ydGQgPHJ0ZD4gPGNkPikKICAgICAgICBjYXNlIFN5bSgicGFyZW50LXJ0ZCIpOgogICAgICAgICAgcGFyZW50X3J0ZCA9IGNsYXVzZS5jZHIuY2FyOwogICAgICAgICAgcGFyZW50X2NkID0gY2xhdXNlLmNkci5jZHIuY2FyOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgZGVmYXVsdDoKICAgICAgICAgIHRocm93IG5ldyBCaXdhU2NoZW1lLkVycm9yKCJkZWZpbmUtcmVjb3JkLXR5cGU6IHVua25vd24gY2xhdXNlIGAiKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQml3YVNjaGVtZS50b193cml0ZShjbGF1c2UuY2FyKSsiJyIpOwogICAgICB9CiAgICB9KTsKCiAgICBpZihwYXJlbnRfbmFtZSl7CiAgICAgIHBhcmVudF9ydGQgPSBbU3ltKCJyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIiksIHBhcmVudF9uYW1lXTsKICAgICAgcGFyZW50X2NkICA9IFtTeW0oInJlY29yZC1jb25zdHJ1Y3Rvci1kZXNjcmlwdG9yIiksIHBhcmVudF9uYW1lXTsKICAgIH0KCiAgICAvLyAzLiBidWlsZCB0aGUgZGVmaW5pdGlvbnMKICAgIC8vIE5vdGU6IEluIHRoaXMgaW1wbGVtZW50YXRpb24sIHJ0ZCBhbmQgY2QgYXJlIG5vdCBib3VuZCB0byBzeW1ib2xzLgogICAgLy8gVGhleSBhcmUgcmVmZXJlbmNlZCB0aHJvdWdoIHJlY29yZCBuYW1lIGJ5IHJlY29yZC10eXBlLWRlc2NyaXB0b3IKICAgIC8vIGFuZCByZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvci4gVGhlc2UgcmVsYXRpb24gYXJlIHN0b3JlZCBpbgogICAgLy8gdGhlIGhhc2ggQml3YVNjaGVtZS5SZWNvcmQuX0RlZmluZWRUeXBlcy4KICAgIHZhciBydGQgPSBbU3ltKCJyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIiksIHJlY29yZF9uYW1lXTsKICAgIHZhciBjZCAgPSBbU3ltKCJyZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvciIpLCByZWNvcmRfbmFtZV07CgogICAgLy8gcmVnaXN0cmF0aW9uCiAgICB2YXIgcnRkX2ZpZWxkcyA9IF8ubWFwKGZpZWxkcywgZnVuY3Rpb24oZmllbGQpewogICAgICByZXR1cm4gTGlzdChTeW0oZmllbGQubXV0YWJsZSA/ICJtdXRhYmxlIiA6ICJpbW11dGFibGUiKSwgZmllbGQubmFtZSk7CiAgICB9KTsKICAgIHJ0ZF9maWVsZHMuaXNfdmVjdG9yID0gdHJ1ZTsgLy90ZWxsIExpc3Qgbm90IHRvIGNvbnZlcnQKICAgIHZhciBydGRfZGVmID0gW1N5bSgibWFrZS1yZWNvcmQtdHlwZS1kZXNjcmlwdG9yIiksCiAgICAgICAgICAgICAgICAgICAgW1N5bSgicXVvdGUiKSwgcmVjb3JkX25hbWVdLCBwYXJlbnRfcnRkLCB1aWQsCiAgICAgICAgICAgICAgICAgICAgc2VhbGVkLCBvcGFxdWUsIHJ0ZF9maWVsZHNdOwogICAgdmFyIGNkX2RlZiA9IFtTeW0oIm1ha2UtcmVjb3JkLWNvbnN0cnVjdG9yLWRlc2NyaXB0b3IiKSwKICAgICAgICAgICAgICAgICAgICBTeW0oIl9fcnRkIiksIHBhcmVudF9jZCwgcHJvdG9jb2xdOwogICAgdmFyIHJlZ2lzdHJhdGlvbiA9CiAgICAgIFtTeW0oImxldCoiKSwgW1tTeW0oIl9fcnRkIiksIHJ0ZF9kZWZdLAogICAgICAgICAgICAgICAgICAgIFtTeW0oIl9fY2QiKSwgY2RfZGVmXV0sCiAgICAgICAgW1N5bSgiX2RlZmluZS1yZWNvcmQtdHlwZSIpLAogICAgICAgICAgW1N5bSgicXVvdGUiKSwgcmVjb3JkX25hbWVdLCBTeW0oIl9fcnRkIiksIFN5bSgiX19jZCIpXV07CgogICAgLy8gYWNjZXNzb3JzIGFuZCBtdXRhdG9ycwogICAgdmFyIGFjY2Vzc29yX2RlZnMgPSBfLm1hcChmaWVsZHMsIGZ1bmN0aW9uKGZpZWxkKXsKICAgICAgdmFyIG5hbWUgPSBmaWVsZC5hY2Nlc3Nvcl9uYW1lIHx8CiAgICAgICAgICAgICAgICAgICBTeW0ocmVjb3JkX25hbWUubmFtZSsiLSIrZmllbGQubmFtZS5uYW1lKTsKCiAgICAgIHJldHVybiBbU3ltKCJkZWZpbmUiKSwgbmFtZSwgW1N5bSgicmVjb3JkLWFjY2Vzc29yIiksIHJ0ZCwgZmllbGQuaWR4XV07CiAgICB9KTsKCiAgICB2YXIgbXV0YXRvcl9kZWZzID0gXy5maWx0ZXIoZmllbGRzLCBmdW5jdGlvbihmaWVsZCl7CiAgICAgIHJldHVybiBmaWVsZC5tdXRhYmxlOwogICAgfSk7CiAgICBtdXRhdG9yX2RlZnMgPSBfLm1hcChtdXRhdG9yX2RlZnMsIGZ1bmN0aW9uKGZpZWxkKXsKICAgICAgdmFyIG5hbWUgPSBmaWVsZC5tdXRhdG9yX25hbWUgfHwKICAgICAgICAgICAgICAgICAgIFN5bShyZWNvcmRfbmFtZS5uYW1lKyItIitmaWVsZC5uYW1lLm5hbWUrIi1zZXQhIik7CgogICAgICByZXR1cm4gW1N5bSgiZGVmaW5lIiksIG5hbWUsIFtTeW0oInJlY29yZC1tdXRhdG9yIiksIHJ0ZCwgZmllbGQuaWR4XV07CiAgICB9KTsKCiAgICAvLyBXcmFwIHRoZSBkZWZpbml0aW9ucyB3aXRoIGBiZWdpbicKICAgIC8vIEV4YW1wbGU6CiAgICAvLyAgIChiZWdpbgogICAgLy8gICAgIChsZXQqICgoX19ydGQgKG1ha2UtcmVjb3JkLXR5cGUtZGVzY3JpcHRvciAnc3F1YXJlCiAgICAvLyAgICAgICAgICAgICAgICAgICAgIChyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIHJlY3QpCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICNmICNmICNmCiAgICAvLyAgICAgICAgICAgICAgICAgICAgICMoKG11dGFibGUgdykgKG11dGFibGUgaCkpKSkKICAgIC8vICAgICAgICAgICAgKF9fY2QgKG1ha2UtcmVjb3JkLWNvbnN0cnVjdG9yLWRlc2NyaXB0b3IgX19ydGQKICAgIC8vICAgICAgICAgICAgICAgICAgICAocmVjb3JkLWNvbnN0cnVjdG9yLWRlc2NyaXB0b3IgcmVjdCkKICAgIC8vICAgICAgICAgICAgICAgICAgICAobGFtYmRhIChuKSAuLi4pKSkpCiAgICAvLyAgICAgICAoX2RlZmluZS1yZWNvcmQtdHlwZSAnc3F1YXJlIF9fcnRkIF9fY2QpKQogICAgLy8KICAgIC8vICAgICAoZGVmaW5lIG1ha2Utc3F1YXJlCiAgICAvLyAgICAgICAocmVjb3JkLWNvbnN0cnVjdG9yCiAgICAvLyAgICAgICAgIChyZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvciBzcXVhcmUpKSkKICAgIC8vICAgICAoZGVmaW5lIHNxdWFyZT8KICAgIC8vICAgICAgIChyZWNvcmQtcHJlZGljYXRlIChyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIHNxdWFyZSkpKQogICAgLy8gICAgIChkZWZpbmUgc3F1YXJlLXcKICAgIC8vICAgICAgIChyZWNvcmQtYWNjZXNzb3IgKHJlY29yZC10eXBlLWRlc2NyaXB0b3Igc3F1YXJlKSAwKSkKICAgIC8vICAgICAoZGVmaW5lIHNxdWFyZS1oCiAgICAvLyAgICAgICAocmVjb3JkLWFjY2Vzc29yIChyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIHNxdWFyZSkgMSkpCiAgICAvLyAgICAgKGRlZmluZSBzZXQtc3F1YXJlLXchCiAgICAvLyAgICAgICAocmVjb3JkLW11dGF0b3IgKHJlY29yZC10eXBlLWRlc2NyaXB0b3Igc3F1YXJlKSAwKSkKICAgIC8vICAgICAoZGVmaW5lIHNldC1zcXVhcmUtaCEKICAgIC8vICAgICAgIChyZWNvcmQtbXV0YXRvciAocmVjb3JkLXR5cGUtZGVzY3JpcHRvciBzcXVhcmUpIDEpKSkKICAgIC8vCiAgICByZXR1cm4gZGVlcF9hcnJheV90b19saXN0KAogICAgICBbU3ltKCJiZWdpbiIpLAogICAgICAgIHJlZ2lzdHJhdGlvbiwKICAgICAgICBbU3ltKCJkZWZpbmUiKSwgY29uc3RydWN0b3JfbmFtZSwgW1N5bSgicmVjb3JkLWNvbnN0cnVjdG9yIiksIGNkXV0sCiAgICAgICAgW1N5bSgiZGVmaW5lIiksIHByZWRpY2F0ZV9uYW1lLCBbU3ltKCJyZWNvcmQtcHJlZGljYXRlIiksIHJ0ZF1dLAogICAgICAgIF0uY29uY2F0KGFjY2Vzc29yX2RlZnMpLgogICAgICAgICAgY29uY2F0KG11dGF0b3JfZGVmcykKICAgICk7CiAgfSk7CgogIGRlZmluZV9saWJmdW5jKCJfZGVmaW5lLXJlY29yZC10eXBlIiwgMywgMywgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3N5bWJvbChhclswXSk7CiAgICBhc3NlcnRfcmVjb3JkX3RkKGFyWzFdKTsKICAgIGFzc2VydF9yZWNvcmRfY2QoYXJbMl0pOwogICAgQml3YVNjaGVtZS5SZWNvcmQuZGVmaW5lX3R5cGUoYXJbMF0ubmFtZSwgYXJbMV0sIGFyWzJdKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwoKICAvLyhyZWNvcmQtdHlwZS1kZXNjcmlwdG9yIDxyZWNvcmQgbmFtZT4pICAgIHN5bnRheAogIGRlZmluZV9zeW50YXgoInJlY29yZC10eXBlLWRlc2NyaXB0b3IiLCBmdW5jdGlvbih4KXsKICAgIHJldHVybiBkZWVwX2FycmF5X3RvX2xpc3QoW1N5bSgiX3JlY29yZC10eXBlLWRlc2NyaXB0b3IiKSwgW1N5bSgicXVvdGUiKSwgeC5jZHIuY2FyXV0pOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJfcmVjb3JkLXR5cGUtZGVzY3JpcHRvciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zeW1ib2woYXJbMF0pOwogICAgdmFyIHR5cGUgPSBCaXdhU2NoZW1lLlJlY29yZC5nZXRfdHlwZShhclswXS5uYW1lKTsKICAgIGlmKHR5cGUpCiAgICAgIHJldHVybiB0eXBlLnJ0ZDsKICAgIGVsc2UKICAgICAgdGhyb3cgbmV3IEVycm9yKCJyZWNvcmQtdHlwZS1kZXNjcmlwdG9yOiB1bmtub3duIHJlY29yZCB0eXBlICIrYXJbMF0ubmFtZSk7CiAgfSk7CgogIC8vKHJlY29yZC1jb25zdHJ1Y3Rvci1kZXNjcmlwdG9yIDxyZWNvcmQgbmFtZT4pICAgIHN5bnRheAogIGRlZmluZV9zeW50YXgoInJlY29yZC1jb25zdHJ1Y3Rvci1kZXNjcmlwdG9yIiwgZnVuY3Rpb24oeCl7CiAgICByZXR1cm4gZGVlcF9hcnJheV90b19saXN0KFtTeW0oIl9yZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvciIpLCBbU3ltKCJxdW90ZSIpLCB4LmNkci5jYXJdXSk7CiAgfSk7CiAgZGVmaW5lX2xpYmZ1bmMoIl9yZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zeW1ib2woYXJbMF0pOwogICAgdmFyIHR5cGUgPSBCaXdhU2NoZW1lLlJlY29yZC5nZXRfdHlwZShhclswXS5uYW1lKTsKICAgIGlmKHR5cGUpCiAgICAgIHJldHVybiB0eXBlLmNkOwogICAgZWxzZQogICAgICB0aHJvdyBuZXcgRXJyb3IoInJlY29yZC1jb25zdHJ1Y3Rvci1kZXNjcmlwdG9yOiB1bmtub3duIHJlY29yZCB0eXBlICIrYXJbMF0ubmFtZSk7CiAgfSk7CgogIC8vIDYuMyAgUmVjb3JkczogUHJvY2VkdXJhbCBsYXllcgogIC8vKG1ha2UtcmVjb3JkLXR5cGUtZGVzY3JpcHRvciBuYW1lICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJtYWtlLXJlY29yZC10eXBlLWRlc2NyaXB0b3IiLCA2LCA2LCBmdW5jdGlvbihhcil7CiAgICB2YXIgbmFtZSA9IGFyWzBdLCBwYXJlbnRfcnRkID0gYXJbMV0sIHVpZCA9IGFyWzJdLAogICAgICAgIHNlYWxlZCA9IGFyWzNdLCBvcGFxdWUgPSBhcls0XSwgZmllbGRzID0gYXJbNV07CgogICAgYXNzZXJ0X3N5bWJvbChuYW1lKTsKICAgIGlmKHBhcmVudF9ydGQpIGFzc2VydF9yZWNvcmRfdGQocGFyZW50X3J0ZCk7CiAgICBpZih1aWQpewogICAgICBhc3NlcnRfc3ltYm9sKHVpZCk7CiAgICAgIHZhciBfcnRkID0gQml3YVNjaGVtZS5SZWNvcmQuUlRELk5vbmdlbmVyYXRpdmVSZWNvcmRzW3VpZC5uYW1lXTsKICAgICAgaWYoX3J0ZCl7CiAgICAgICAgLy8gdGhlIHJlY29yZCB0eXBlIGlzIGFscmVhZHkgZGVmaW5lZC4KICAgICAgICByZXR1cm4gX3J0ZDsKICAgICAgICAvLyBzaG91bGQgY2hlY2sgZXF1YWxpdHkgb2Ygb3RoZXIgYXJndW1lbnRzLi4KICAgICAgfQogICAgfQogICAgc2VhbGVkID0gISFzZWFsZWQ7CiAgICBvcGFxdWUgPSAhIW9wYXF1ZTsKICAgIGFzc2VydF92ZWN0b3IoZmllbGRzKTsKICAgIGZvcih2YXIgaT0wOyBpPGZpZWxkcy5sZW5ndGg7IGkrKyl7CiAgICAgIHZhciBsaXN0ID0gZmllbGRzW2ldOwogICAgICBhc3NlcnRfc3ltYm9sKGxpc3QuY2FyLCAibXV0YWJpbGl0eSIpOwogICAgICBhc3NlcnRfc3ltYm9sKGxpc3QuY2RyLmNhciwgImZpZWxkIG5hbWUiKTsKICAgICAgZmllbGRzW2ldID0gW2xpc3QuY2RyLmNhci5uYW1lLCAobGlzdC5jYXIgPT0gU3ltKCJtdXRhYmxlIikpXTsKICAgIH07CgogICAgdmFyIHJ0ZCA9IG5ldyBCaXdhU2NoZW1lLlJlY29yZC5SVEQobmFtZSwgcGFyZW50X3J0ZCwgdWlkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VhbGVkLCBvcGFxdWUsIGZpZWxkcyk7CiAgICBpZih1aWQpCiAgICAgIEJpd2FTY2hlbWUuUmVjb3JkLlJURC5Ob25nZW5lcmF0aXZlUmVjb3Jkc1t1aWQubmFtZV0gPSBydGQ7CgogICAgcmV0dXJuIHJ0ZDsKICB9KTsKCiAgLy8ocmVjb3JkLXR5cGUtZGVzY3JpcHRvcj8gb2JqKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkLXR5cGUtZGVzY3JpcHRvcj8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gKGFyWzBdIGluc3RhbmNlb2YgQml3YVNjaGVtZS5SZWNvcmQuUlREKTsKICB9KTsKCiAgLy8obWFrZS1yZWNvcmQtY29uc3RydWN0b3ItZGVzY3JpcHRvciBydGQgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtcmVjb3JkLWNvbnN0cnVjdG9yLWRlc2NyaXB0b3IiLCAzLCAzLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcnRkID0gYXJbMF0sIHBhcmVudF9jZCA9IGFyWzFdLCBwcm90b2NvbCA9IGFyWzJdOwoKICAgIGFzc2VydF9yZWNvcmRfdGQocnRkKTsKICAgIGlmKHBhcmVudF9jZCkgYXNzZXJ0X3JlY29yZF9jZChwYXJlbnRfY2QpOwogICAgaWYocHJvdG9jb2wpIGFzc2VydF9wcm9jZWR1cmUocHJvdG9jb2wpOwoKICAgIHJldHVybiBuZXcgQml3YVNjaGVtZS5SZWNvcmQuQ0QocnRkLCBwYXJlbnRfY2QsIHByb3RvY29sKTsKICB9KTsKCiAgLy8ocmVjb3JkLWNvbnN0cnVjdG9yIGNvbnN0cnVjdG9yLWRlc2NyaXB0b3IpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtY29uc3RydWN0b3IiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICB2YXIgY2QgPSBhclswXTsKICAgIGFzc2VydF9yZWNvcmRfY2QoY2QpOwoKICAgIHJldHVybiBjZC5yZWNvcmRfY29uc3RydWN0b3IoKTsKICB9KTsKCiAgLy8ocmVjb3JkLXByZWRpY2F0ZSBydGQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtcHJlZGljYXRlIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgdmFyIHJ0ZCA9IGFyWzBdOwogICAgYXNzZXJ0X3JlY29yZF90ZChydGQpOwoKICAgIHJldHVybiBmdW5jdGlvbihhcmdzKXsKICAgICAgdmFyIG9iaiA9IGFyZ3NbMF07CgogICAgICByZXR1cm4gKG9iaiBpbnN0YW5jZW9mIEJpd2FTY2hlbWUuUmVjb3JkKSAmJgogICAgICAgICAgICAgKG9iai5ydGQgPT09IHJ0ZCk7CiAgICB9OwogIH0pOwoKICAvLyhyZWNvcmQtYWNjZXNzb3IgcnRkIGspICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtYWNjZXNzb3IiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcnRkID0gYXJbMF0sIGsgPSBhclsxXTsKICAgIGFzc2VydF9yZWNvcmRfdGQocnRkKTsKICAgIGFzc2VydF9pbnRlZ2VyKGspOwogICAgZm9yKHZhciBfcnRkID0gcnRkLnBhcmVudF9ydGQ7IF9ydGQ7IF9ydGQgPSBfcnRkLnBhcmVudF9ydGQpCiAgICAgIGsgKz0gX3J0ZC5maWVsZHMubGVuZ3RoOwoKICAgIHJldHVybiBmdW5jdGlvbihhcmdzKXsKICAgICAgdmFyIHJlY29yZCA9IGFyZ3NbMF07CiAgICAgIHZhciBlcnJvcl9tc2cgPSBydGQubmFtZS5uYW1lKyItIitydGQuZmllbGRfbmFtZShrKSsiOiAiKwogICAgICAgICAgICAgICAgICAgICAgQml3YVNjaGVtZS50b193cml0ZShyZWNvcmQpKwogICAgICAgICAgICAgICAgICAgICAgIiBpcyBub3QgYSAiK3J0ZC5uYW1lLm5hbWU7CiAgICAgIGFzc2VydChCaXdhU2NoZW1lLmlzUmVjb3JkKHJlY29yZCksIGVycm9yX21zZyk7CgogICAgICB2YXIgZGVzY2VuZGFudCA9IGZhbHNlOwogICAgICBmb3IodmFyIF9ydGQgPSByZWNvcmQucnRkOyBfcnRkOyBfcnRkID0gX3J0ZC5wYXJlbnRfcnRkKXsKICAgICAgICBpZihfcnRkID09IHJ0ZCkgZGVzY2VuZGFudCA9IHRydWU7CiAgICAgIH0KICAgICAgYXNzZXJ0KGRlc2NlbmRhbnQsIGVycm9yX21zZyk7CgogICAgICByZXR1cm4gcmVjb3JkLmdldChrKTsKICAgIH07CiAgfSk7CgogIC8vKHJlY29yZC1tdXRhdG9yIHJ0ZCBrKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkLW11dGF0b3IiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcnRkID0gYXJbMF0sIGsgPSBhclsxXTsKICAgIGFzc2VydF9yZWNvcmRfdGQocnRkKTsKICAgIGFzc2VydF9pbnRlZ2VyKGspOwogICAgZm9yKHZhciBfcnRkID0gcnRkLnBhcmVudF9ydGQ7IF9ydGQ7IF9ydGQgPSBfcnRkLnBhcmVudF9ydGQpCiAgICAgIGsgKz0gX3J0ZC5maWVsZHMubGVuZ3RoOwoKICAgIHJldHVybiBmdW5jdGlvbihhcmdzKXsKICAgICAgdmFyIHJlY29yZCA9IGFyZ3NbMF0sIHZhbCA9IGFyZ3NbMV07CiAgICAgIHZhciBmdW5jX25hbWUgPSBydGQuZmllbGRfbmFtZShrKTsKCiAgICAgIGFzc2VydF9yZWNvcmQocmVjb3JkKTsKICAgICAgYXNzZXJ0KHJlY29yZC5ydGQgPT09IHJ0ZCwKICAgICAgICAgICAgZnVuY19uYW1lKyI6ICIrQml3YVNjaGVtZS50b193cml0ZShyZWNvcmQpKwogICAgICAgICAgICAiIGlzIG5vdCBhICIrcnRkLm5hbWUubmFtZSk7CiAgICAgIGFzc2VydCghcmVjb3JkLnJ0ZC5zZWFsZWQsCiAgICAgICAgICAgIGZ1bmNfbmFtZSsiOiAiK3J0ZC5uYW1lLm5hbWUrIiBpcyBzZWFsZWQgKGNhbid0IG11dGF0ZSkiKTsKCiAgICAgIHJlY29yZC5zZXQoaywgdmFsKTsKICAgIH07CiAgfSk7CgogIC8vIDYuNCAgUmVjb3JkczogSW5zcGVjdGlvbgogIC8vKHJlY29yZD8gb2JqKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBvYmogPSBhclswXTsKICAgIGlmKEJpd2FTY2hlbWUuaXNSZWNvcmQob2JqKSl7CiAgICAgIGlmKG9iai5ydGQub3BhcXVlKQogICAgICAgIHJldHVybiBmYWxzZTsgLy8gb3BhcXVlIHJlY29yZHMgcHJldGVuZCBhcyBpZiBpdCBpcyBub3QgYSByZWNvcmQuCiAgICAgIGVsc2UKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIGVsc2UKICAgICAgcmV0dXJuIGZhbHNlOwogIH0pOwoKICAvLyhyZWNvcmQtcnRkIHJlY29yZCkgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInJlY29yZC1ydGQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfcmVjb3JkKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5ydGQ7CiAgfSk7CgogIC8vKHJlY29yZC10eXBlLW5hbWUgcnRkKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkLXR5cGUtbmFtZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9yZWNvcmRfdGQoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLm5hbWU7CiAgfSk7CgogIC8vKHJlY29yZC10eXBlLXBhcmVudCBydGQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtdHlwZS1wYXJlbnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfcmVjb3JkX3RkKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5wYXJlbnRfcnRkOwogIH0pOwoKICAvLyhyZWNvcmQtdHlwZS11aWQgcnRkKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkLXR5cGUtdWlkIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3JlY29yZF90ZChhclswXSk7CiAgICByZXR1cm4gYXJbMF0udWlkOwogIH0pOwoKICAvLyhyZWNvcmQtdHlwZS1nZW5lcmF0aXZlPyBydGQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtdHlwZS1nZW5lcmF0aXZlPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9yZWNvcmRfdGQoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLmdlbmVyYXRpdmU7CiAgfSk7CgogIC8vKHJlY29yZC10eXBlLXNlYWxlZD8gcnRkKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmVjb3JkLXR5cGUtc2VhbGVkPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9yZWNvcmRfdGQoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLnNlYWxlZDsKICB9KTsKCiAgLy8ocmVjb3JkLXR5cGUtb3BhcXVlPyBydGQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtdHlwZS1vcGFxdWU/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3JlY29yZF90ZChhclswXSk7CiAgICByZXR1cm4gYXJbMF0ub3BhcXVlOwogIH0pOwoKICAvLyhyZWNvcmQtdHlwZS1maWVsZC1uYW1lcyBydGQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJyZWNvcmQtdHlwZS1maWVsZC1uYW1lcyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9yZWNvcmRfdGQoYXJbMF0pOwogICAgcmV0dXJuIF8ubWFwKGFyWzBdLmZpZWxkcywgZnVuY3Rpb24oZmllbGQpeyByZXR1cm4gZmllbGQubmFtZTsgfSk7CiAgfSk7CgogIC8vKHJlY29yZC1maWVsZC1tdXRhYmxlPyBydGQgaykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInJlY29yZC1maWVsZC1tdXRhYmxlPyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBydGQgPSBhclswXSwgayA9IGFyWzFdOwogICAgYXNzZXJ0X3JlY29yZF90ZChhclswXSk7CiAgICBhc3NlcnRfaW50ZWdlcihrKTsKCiAgICBmb3IodmFyIF9ydGQgPSBydGQucGFyZW50X3J0ZDsgX3J0ZDsgX3J0ZCA9IF9ydGQucGFyZW50X3J0ZCkKICAgICAgayArPSBfcnRkLmZpZWxkcy5sZW5ndGg7CgogICAgcmV0dXJuIGFyWzBdLmZpZWxkc1trXS5tdXRhYmxlOwogIH0pOwoKICAvLwogIC8vIENoYXB0ZXIgNyBFeGNlcHRpb25zIGFuZCBjb25kaXRpb25zCiAgLy8KLy8od2l0aC1leGNlcHRpb24taGFuZGxlciBoYW5kbGVyIHRodW5rKSAgICBwcm9jZWR1cmUKLy8oZ3VhcmQgKDx2YXJpYWJsZT4gICAgc3ludGF4CiAgLy8ocmFpc2Ugb2JqKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygicmFpc2UiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICB0aHJvdyBuZXcgQml3YVNjaGVtZS5Vc2VyRXJyb3IoQml3YVNjaGVtZS50b193cml0ZShhclswXSkpOwogIH0pOwovLyhyYWlzZS1jb250aW51YWJsZSBvYmopICAgIHByb2NlZHVyZQovLwovLyZjb25kaXRpb24gICAgY29uZGl0aW9uIHR5cGUKLy8oY29uZGl0aW9uIGNvbmRpdGlvbjEgLi4uKSAgICBwcm9jZWR1cmUKLy8oc2ltcGxlLWNvbmRpdGlvbnMgY29uZGl0aW9uKSAgICBwcm9jZWR1cmUKLy8oY29uZGl0aW9uPyBvYmopICAgIHByb2NlZHVyZQovLyhjb25kaXRpb24tcHJlZGljYXRlIHJ0ZCkgICAgcHJvY2VkdXJlCi8vKGNvbmRpdGlvbi1hY2Nlc3NvciBydGQgcHJvYykgICAgcHJvY2VkdXJlCi8vCi8vJm1lc3NhZ2UgICAgY29uZGl0aW9uIHR5cGUKLy8md2FybmluZyAgICBjb25kaXRpb24gdHlwZQovLyZzZXJpb3VzICAgIGNvbmRpdGlvbiB0eXBlCi8vJmVycm9yICAgIGNvbmRpdGlvbiB0eXBlCi8vJnZpb2xhdGlvbiAgICBjb25kaXRpb24gdHlwZQovLyZhc3NlcnRpb24gICAgY29uZGl0aW9uIHR5cGUKLy8maXJyaXRhbnRzICAgIGNvbmRpdGlvbiB0eXBlCi8vJndobyAgICBjb25kaXRpb24gdHlwZQovLyZub24tY29udGludWFibGUgICAgY29uZGl0aW9uIHR5cGUKLy8maW1wbGVtZW50YXRpb24tcmVzdHJpY3Rpb24gICAgY29uZGl0aW9uIHR5cGUKLy8mbGV4aWNhbCAgICBjb25kaXRpb24gdHlwZQovLyZzeW50YXggICAgY29uZGl0aW9uIHR5cGUKLy8mdW5kZWZpbmVkICAgIGNvbmRpdGlvbiB0eXBlCgogIC8vCiAgLy8gQ2hhcHRlciA4IEkvTwogIC8vCi8vICAvLyAgICA4ICBJL08KLy8gIC8vICAgICAgICA4LjEgIENvbmRpdGlvbiB0eXBlcwovLyZpL28gICAgY29uZGl0aW9uIHR5cGUKLy8maS9vLXJlYWQgICAgY29uZGl0aW9uIHR5cGUKLy8maS9vLXdyaXRlICAgIGNvbmRpdGlvbiB0eXBlCi8vJmkvby1pbnZhbGlkLXBvc2l0aW9uICAgIGNvbmRpdGlvbiB0eXBlCi8vJmkvby1maWxlbmFtZSAgICBjb25kaXRpb24gdHlwZQovLyZpL28tZmlsZS1wcm90ZWN0aW9uICAgIGNvbmRpdGlvbiB0eXBlCi8vJmkvby1maWxlLWlzLXJlYWQtb25seSAgICBjb25kaXRpb24gdHlwZQovLyZpL28tZmlsZS1hbHJlYWR5LWV4aXN0cyAgICBjb25kaXRpb24gdHlwZQovLyZpL28tZmlsZS1kb2VzLW5vdC1leGlzdCAgICBjb25kaXRpb24gdHlwZQovLyZpL28tcG9ydCAgICBjb25kaXRpb24gdHlwZQovLwovLyAgLy8gICAgICAgIDguMiAgUG9ydCBJL08KLy8gIC8vICAgICAgICAgICAgOC4yLjEgIEZpbGUgbmFtZXMKLy8gIC8vKG5vIGZ1bmN0aW9uIGludHJvZHVjZWQpCi8vCi8vICAvLyAgICAgICAgICAgIDguMi4yICBGaWxlIG9wdGlvbnMKLy8oZmlsZS1vcHRpb25zIDxmaWxlLW9wdGlvbnMgc3ltYm9sPiAuLi4pICAgIHN5bnRheAovLwovLyAgLy8gICAgICAgICAgICA4LjIuMyAgQnVmZmVyIG1vZGVzCi8vKGJ1ZmZlci1tb2RlIDxidWZmZXItbW9kZSBzeW1ib2w+KSAgICBzeW50YXgKLy8oYnVmZmVyLW1vZGU/IG9iaikgICAgcHJvY2VkdXJlCi8vCi8vICAvLyAgICAgICAgICAgIDguMi40ICBUcmFuc2NvZGVycwovLyhsYXRpbi0xLWNvZGVjKSAgICBwcm9jZWR1cmUKLy8odXRmLTgtY29kZWMpICAgIHByb2NlZHVyZQovLyh1dGYtMTYtY29kZWMpICAgIHByb2NlZHVyZQovLyhlb2wtc3R5bGUgPGVvbC1zdHlsZSBzeW1ib2w+KSAgICBzeW50YXgKLy8obmF0aXZlLWVvbC1zdHlsZSkgICAgcHJvY2VkdXJlCi8vJmkvby1kZWNvZGluZyAgICBjb25kaXRpb24gdHlwZQovLyZpL28tZW5jb2RpbmcgICAgY29uZGl0aW9uIHR5cGUKLy8oZXJyb3ItaGFuZGxpbmctbW9kZSA8ZXJyb3ItaGFuZGxpbmctbW9kZSBzeW1ib2w+KSAgICBzeW50YXgKLy8obWFrZS10cmFuc2NvZGVyIGNvZGVjKSAgICBwcm9jZWR1cmUKLy8obWFrZS10cmFuc2NvZGVyIGNvZGVjIGVvbC1zdHlsZSkgICAgcHJvY2VkdXJlCi8vKG1ha2UtdHJhbnNjb2RlciBjb2RlYyBlb2wtc3R5bGUgaGFuZGxpbmctbW9kZSkgICAgcHJvY2VkdXJlCi8vKG5hdGl2ZS10cmFuc2NvZGVyKSAgICBwcm9jZWR1cmUKLy8odHJhbnNjb2Rlci1jb2RlYyB0cmFuc2NvZGVyKSAgICBwcm9jZWR1cmUKLy8odHJhbnNjb2Rlci1lb2wtc3R5bGUgdHJhbnNjb2RlcikgICAgcHJvY2VkdXJlCi8vKHRyYW5zY29kZXItZXJyb3ItaGFuZGxpbmctbW9kZSB0cmFuc2NvZGVyKSAgICBwcm9jZWR1cmUKLy8oYnl0ZXZlY3Rvci0+c3RyaW5nIGJ5dGV2ZWN0b3IgdHJhbnNjb2RlcikgICAgcHJvY2VkdXJlCi8vKHN0cmluZy0+Ynl0ZXZlY3RvciBzdHJpbmcgdHJhbnNjb2RlcikgICAgcHJvY2VkdXJlCi8vCiAgLy8gICAgICAgICAgICA4LjIuNSAgRW5kLW9mLWZpbGUgb2JqZWN0CiAgLy8tPiA4LjMgKGVvZi1vYmplY3QpICAgIHByb2NlZHVyZQogIC8vLT4gOC4zIChlb2Ytb2JqZWN0PyBvYmopICAgIHByb2NlZHVyZQoKICAvLyAgICAgICAgICAgIDguMi42ICBJbnB1dCBhbmQgb3V0cHV0IHBvcnRzCiAgZGVmaW5lX2xpYmZ1bmMoInBvcnQ/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIChhclswXSBpbnN0YW5jZW9mIFBvcnQpOwogIH0pCi8vKHBvcnQtdHJhbnNjb2RlciBwb3J0KSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygidGV4dHVhbC1wb3J0PyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIHJldHVybiAhYXJbMF0uaXNfYmluYXJ5OwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImJpbmFyeS1wb3J0PyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIHJldHVybiBhclswXS5pc19iaW5hcnk7CiAgfSkKLy8odHJhbnNjb2RlZC1wb3J0IGJpbmFyeS1wb3J0IHRyYW5zY29kZXIpICAgIHByb2NlZHVyZQovLyhwb3J0LWhhcy1wb3J0LXBvc2l0aW9uPyBwb3J0KSAgICBwcm9jZWR1cmUKLy8ocG9ydC1wb3NpdGlvbiBwb3J0KSAgICBwcm9jZWR1cmUKLy8ocG9ydC1oYXMtc2V0LXBvcnQtcG9zaXRpb24hPyBwb3J0KSAgICBwcm9jZWR1cmUKLy8oc2V0LXBvcnQtcG9zaXRpb24hIHBvcnQgcG9zKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiY2xvc2UtcG9ydCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIGFyWzBdLmNsb3NlKCk7CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KQogIC8vKGNhbGwtd2l0aC1wb3J0IHBvcnQgcHJvYykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImNhbGwtd2l0aC1wb3J0IiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHBvcnQgPSBhclswXSwgcHJvYyA9IGFyWzFdOwogICAgYXNzZXJ0X3BvcnQocG9ydCk7CiAgICBhc3NlcnRfY2xvc3VyZShwcm9jKTsKCiAgICByZXR1cm4gbmV3IENhbGwocHJvYywgW3BvcnRdLCBmdW5jdGlvbihhcil7CiAgICAgIC8vIEF1dG9tYXRpY2FsbHkgY2xvc2UgdGhlIHBvcnQKICAgICAgcG9ydC5jbG9zZSgpOwogICAgICByZXR1cm4gYXJbMF07IC8vIFRPRE86IHZhbHVlcwogICAgfSk7CiAgfSk7CgogIC8vICAgICAgICAgICAgOC4yLjcgIElucHV0IHBvcnRzCiAgLy84LjMgKGlucHV0LXBvcnQ/IG9iaikgICAgcHJvY2VkdXJlCi8vKHBvcnQtZW9mPyBpbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8ob3Blbi1maWxlLWlucHV0LXBvcnQgZmlsZW5hbWUpICAgIHByb2NlZHVyZQovLyhvcGVuLWJ5dGV2ZWN0b3ItaW5wdXQtcG9ydCBieXRldmVjdG9yKSAgICBwcm9jZWR1cmUKLy8ob3Blbi1zdHJpbmctaW5wdXQtcG9ydCBzdHJpbmcpICAgIHByb2NlZHVyZQovLyhzdGFuZGFyZC1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy84LjMgKGN1cnJlbnQtaW5wdXQtcG9ydCkgICAgcHJvY2VkdXJlCi8vKG1ha2UtY3VzdG9tLWJpbmFyeS1pbnB1dC1wb3J0IGlkIHJlYWQhICAgIHByb2NlZHVyZQovLyhtYWtlLWN1c3RvbS10ZXh0dWFsLWlucHV0LXBvcnQgaWQgcmVhZCEgICAgcHJvY2VkdXJlCi8vCi8vICAvLyAgICAgICAgICAgIDguMi44ICBCaW5hcnkgaW5wdXQKLy8oZ2V0LXU4IGJpbmFyeS1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8obG9va2FoZWFkLXU4IGJpbmFyeS1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8oZ2V0LWJ5dGV2ZWN0b3ItbiBiaW5hcnktaW5wdXQtcG9ydCBjb3VudCkgICAgcHJvY2VkdXJlCi8vKGdldC1ieXRldmVjdG9yLW4hIGJpbmFyeS1pbnB1dC1wb3J0ICAgIHByb2NlZHVyZQovLyhnZXQtYnl0ZXZlY3Rvci1zb21lIGJpbmFyeS1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8oZ2V0LWJ5dGV2ZWN0b3ItYWxsIGJpbmFyeS1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8KLy8gIC8vICAgICAgICAgICAgOC4yLjkgIFRleHR1YWwgaW5wdXQKLy8oZ2V0LWNoYXIgdGV4dHVhbC1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8obG9va2FoZWFkLWNoYXIgdGV4dHVhbC1pbnB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8oZ2V0LXN0cmluZy1uIHRleHR1YWwtaW5wdXQtcG9ydCBjb3VudCkgICAgcHJvY2VkdXJlCi8vKGdldC1zdHJpbmctbiEgdGV4dHVhbC1pbnB1dC1wb3J0IHN0cmluZyBzdGFydCBjb3VudCkgICAgcHJvY2VkdXJlCi8vKGdldC1zdHJpbmctYWxsIHRleHR1YWwtaW5wdXQtcG9ydCkgICAgcHJvY2VkdXJlCi8vKGdldC1saW5lIHRleHR1YWwtaW5wdXQtcG9ydCkgICAgcHJvY2VkdXJlCi8vKGdldC1kYXR1bSB0ZXh0dWFsLWlucHV0LXBvcnQpICAgIHByb2NlZHVyZQovLwogIC8vICAgICAgICAgICAgOC4yLjEwICBPdXRwdXQgcG9ydHMKICAvLzguMyAob3V0cHV0LXBvcnQ/IG9iaikgICAgcHJvY2VkdXJlCi8vKGZsdXNoLW91dHB1dC1wb3J0IG91dHB1dC1wb3J0KSAgICBwcm9jZWR1cmUKLy8ob3V0cHV0LXBvcnQtYnVmZmVyLW1vZGUgb3V0cHV0LXBvcnQpICAgIHByb2NlZHVyZQovLyhvcGVuLWZpbGUtb3V0cHV0LXBvcnQgZmlsZW5hbWUpICAgIHByb2NlZHVyZQovLyhvcGVuLWJ5dGV2ZWN0b3Itb3V0cHV0LXBvcnQpICAgIHByb2NlZHVyZQovLyhjYWxsLXdpdGgtYnl0ZXZlY3Rvci1vdXRwdXQtcG9ydCBwcm9jKSAgICBwcm9jZWR1cmUKLy8ob3Blbi1zdHJpbmctb3V0cHV0LXBvcnQpICAgIHByb2NlZHVyZQogIC8vKGNhbGwtd2l0aC1zdHJpbmctb3V0cHV0LXBvcnQgcHJvYykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImNhbGwtd2l0aC1zdHJpbmctb3V0cHV0LXBvcnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcHJvYyA9IGFyWzBdOwogICAgYXNzZXJ0X3Byb2NlZHVyZShwcm9jKTsKCiAgICB2YXIgcG9ydCA9IG5ldyBCaXdhU2NoZW1lLlBvcnQuU3RyaW5nT3V0cHV0KCk7CgogICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIFtwb3J0XSwgZnVuY3Rpb24oYXIpewogICAgICBwb3J0LmNsb3NlKCk7CiAgICAgIHJldHVybiBwb3J0Lm91dHB1dF9zdHJpbmcoKTsKICAgIH0pOwogIH0pOwoKLy8oc3RhbmRhcmQtb3V0cHV0LXBvcnQpICAgIHByb2NlZHVyZQovLyhzdGFuZGFyZC1lcnJvci1wb3J0KSAgICBwcm9jZWR1cmUKLy84LjMgKGN1cnJlbnQtb3V0cHV0LXBvcnQpICAgIHByb2NlZHVyZQovLzguMyAoY3VycmVudC1lcnJvci1wb3J0KSAgICBwcm9jZWR1cmUKLy8obWFrZS1jdXN0b20tYmluYXJ5LW91dHB1dC1wb3J0IGlkICAgIHByb2NlZHVyZQogIC8vKG1ha2UtY3VzdG9tLXRleHR1YWwtb3V0cHV0LXBvcnQgaWQgd3JpdGUhIGdldC1wb3NpdGlvbiBzZXQtcG9zaXRpb24hIGNsb3NlKQovLyAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtY3VzdG9tLXRleHR1YWwtb3V0cHV0LXBvcnQiLCA1LCA1LCBmdW5jdGlvbihhcil7Ci8vICAgIGFzc2VydF9zdHJpbmcoYXJbMF0pOwovLyAgICBhc3NlcnRfY2xvc3VyZShhclsxXSk7Ci8vICAgIGFzc2VydF9jbG9zdXJlKGFyWzJdKTsKLy8gICAgYXNzZXJ0X2Nsb3N1cmUoYXJbM10pOwovLyAgICBhc3NlcnRfY2xvc3VyZShhcls0XSk7Ci8vICAgIHJldHVybiBuZXcgUG9ydChhclswXSwgYXJbMV0sIGFyWzJdLCBhclszXSwgYXJbNF0pOwovLyAgfSkKLy8KLy8gIC8vICAgICAgICAgICAgOC4yLjExICBCaW5hcnkgb3V0cHV0Ci8vKHB1dC11OCBiaW5hcnktb3V0cHV0LXBvcnQgb2N0ZXQpICAgIHByb2NlZHVyZQovLyhwdXQtYnl0ZXZlY3RvciBiaW5hcnktb3V0cHV0LXBvcnQgYnl0ZXZlY3RvcikgICAgcHJvY2VkdXJlCi8vCiAgLy8gICAgICAgICAgICA4LjIuMTIgIFRleHR1YWwgb3V0cHV0CiAgZGVmaW5lX2xpYmZ1bmMoInB1dC1jaGFyIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3BvcnQoYXJbMF0pOwogICAgYXNzZXJ0X2NoYXIoYXJbMV0pOwogICAgYXJbMF0ucHV0X3N0cmluZyhhclsxXS52YWx1ZSk7CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KQogIGRlZmluZV9saWJmdW5jKCJwdXQtc3RyaW5nIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3BvcnQoYXJbMF0pOwogICAgYXNzZXJ0X3N0cmluZyhhclsxXSk7CiAgICBhclswXS5wdXRfc3RyaW5nKGFyWzFdKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoInB1dC1kYXR1bSIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIGFyWzBdLnB1dF9zdHJpbmcodG9fd3JpdGUoYXJbMV0pKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pCi8vCi8vICAvLyAgICAgICAgICAgIDguMi4xMyAgSW5wdXQvb3V0cHV0IHBvcnRzCi8vKG9wZW4tZmlsZS1pbnB1dC9vdXRwdXQtcG9ydCBmaWxlbmFtZSkgICAgcHJvY2VkdXJlCi8vKG1ha2UtY3VzdG9tLWJpbmFyeS1pbnB1dC9vdXRwdXQtcG9ydCAgICBwcm9jZWR1cmUKLy8obWFrZS1jdXN0b20tdGV4dHVhbC1pbnB1dC9vdXRwdXQtcG9ydCAgICBwcm9jZWR1cmUKLy8KLy8gIC8vICAgICAgICA4LjMgIFNpbXBsZSBJL08KICBkZWZpbmVfbGliZnVuYygiZW9mLW9iamVjdCIsIDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBlb2Y7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiZW9mLW9iamVjdD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gYXJbMF0gPT09IGVvZjsKICB9KQovLyhjYWxsLXdpdGgtaW5wdXQtZmlsZSBmaWxlbmFtZSBwcm9jKSAgICBwcm9jZWR1cmUKLy8oY2FsbC13aXRoLW91dHB1dC1maWxlIGZpbGVuYW1lIHByb2MpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJpbnB1dC1wb3J0PyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIHJldHVybiBhclswXS5pc19pbnB1dDsKICB9KQogIGRlZmluZV9saWJmdW5jKCJvdXRwdXQtcG9ydD8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfcG9ydChhclswXSk7CiAgICByZXR1cm4gYXJbMF0uaXNfb3V0cHV0OwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImN1cnJlbnQtaW5wdXQtcG9ydCIsIDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBQb3J0LmN1cnJlbnRfaW5wdXQ7CiAgfSkKICBkZWZpbmVfbGliZnVuYygiY3VycmVudC1vdXRwdXQtcG9ydCIsIDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBQb3J0LmN1cnJlbnRfb3V0cHV0OwogIH0pCiAgZGVmaW5lX2xpYmZ1bmMoImN1cnJlbnQtZXJyb3ItcG9ydCIsIDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBQb3J0LmN1cnJlbnRfZXJyb3I7CiAgfSkKLy8od2l0aC1pbnB1dC1mcm9tLWZpbGUgZmlsZW5hbWUgdGh1bmspICAgIHByb2NlZHVyZQovLyh3aXRoLW91dHB1dC10by1maWxlIGZpbGVuYW1lIHRodW5rKSAgICBwcm9jZWR1cmUKLy8ob3Blbi1pbnB1dC1maWxlIGZpbGVuYW1lKSAgICBwcm9jZWR1cmUKLy8ob3Blbi1vdXRwdXQtZmlsZSBmaWxlbmFtZSkgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImNsb3NlLWlucHV0LXBvcnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfcG9ydChhclswXSk7CiAgICBpZighYXJbMF0uaXNfaW5wdXQpCiAgICAgIHRocm93IG5ldyBFcnJvcigiY2xvc2UtaW5wdXQtcG9ydDogcG9ydCBpcyBub3QgaW5wdXQgcG9ydCIpOwogICAgYXJbMF0uY2xvc2UoKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJjbG9zZS1vdXRwdXQtcG9ydCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9wb3J0KGFyWzBdKTsKICAgIGlmKCFhclswXS5pc19vdXRwdXQpCiAgICAgIHRocm93IG5ldyBFcnJvcigiY2xvc2Utb3V0cHV0LXBvcnQ6IHBvcnQgaXMgbm90IG91dHB1dCBwb3J0Iik7CiAgICBhclswXS5jbG9zZSgpOwogICAgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7CiAgfSk7Ci8vKHJlYWQtY2hhcikgICAgcHJvY2VkdXJlCi8vKHBlZWstY2hhcikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInJlYWQiLCAwLCAxLCBmdW5jdGlvbihhcil7CiAgICB2YXIgcG9ydCA9IGFyWzBdIHx8IFBvcnQuY3VycmVudF9pbnB1dDsKICAgIGFzc2VydF9wb3J0KHBvcnQpOwoKICAgIHJldHVybiBwb3J0LmdldF9zdHJpbmcoZnVuY3Rpb24oc3RyKXsKICAgICAgcmV0dXJuIEludGVycHJldGVyLnJlYWQoc3RyKTsgCiAgICB9KTsKICB9KQoKICBkZWZpbmVfbGliZnVuYygid3JpdGUtY2hhciIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwb3J0ID0gYXJbMV0gfHwgUG9ydC5jdXJyZW50X291dHB1dDsKICAgIGFzc2VydF9jaGFyKGFyWzBdKTsKICAgIHBvcnQucHV0X3N0cmluZyhhclswXS52YWx1ZSk7CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KTsKICBkZWZpbmVfbGliZnVuYygibmV3bGluZSIsIDAsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwb3J0ID0gYXJbMF0gfHwgUG9ydC5jdXJyZW50X291dHB1dDsKICAgIHBvcnQucHV0X3N0cmluZygiXG4iKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJkaXNwbGF5IiwgMSwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIHBvcnQgPSBhclsxXSB8fCBQb3J0LmN1cnJlbnRfb3V0cHV0OwogICAgcG9ydC5wdXRfc3RyaW5nKHRvX2Rpc3BsYXkoYXJbMF0pKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogIH0pOwogIGRlZmluZV9saWJmdW5jKCJ3cml0ZSIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBwb3J0ID0gYXJbMV0gfHwgUG9ydC5jdXJyZW50X291dHB1dDsKICAgIGFzc2VydF9wb3J0KHBvcnQpOwogICAgcG9ydC5wdXRfc3RyaW5nKHRvX3dyaXRlKGFyWzBdKSk7CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KTsKCiAgLy8KICAvLyBDaGFwdGVyIDkgRmlsZSBTeXN0ZW0KICAvLyBDaGFwdGVyIDEwIENvbW1hbmQtbGluZSBhY2Nlc3MgYW5kIGV4aXQgdmFsdWVzCiAgLy8KICAvLyBzZWUgc3JjL2xpYnJhcnkvbm9kZV9mdW5jdGlvbnMuanMKCiAgLy8KICAvLyBDaGFwdGVyIDExIEFyaXRobWV0aWMKICAvLwovLy8vICAgICAgICAxMS4xICBCaXR3aXNlIG9wZXJhdGlvbnMKLy8vLyAgICAgICAgMTEuMiAgRml4bnVtcwovLyhmaXhudW0/IG9iaikgICAgcHJvY2VkdXJlCi8vKGZpeG51bS13aWR0aCkgICAgcHJvY2VkdXJlCi8vKGxlYXN0LWZpeG51bSkgICAgcHJvY2VkdXJlCi8vKGdyZWF0ZXN0LWZpeG51bSkgICAgcHJvY2VkdXJlCi8vKGZ4PT8gZngxIGZ4MiBmeDMgLi4uKSAgICBwcm9jZWR1cmUKLy8oZng+PyBmeDEgZngyIGZ4MyAuLi4pICAgIHByb2NlZHVyZQovLyhmeDw/IGZ4MSBmeDIgZngzIC4uLikgICAgcHJvY2VkdXJlCi8vKGZ4Pj0/IGZ4MSBmeDIgZngzIC4uLikgICAgcHJvY2VkdXJlCi8vKGZ4PD0/IGZ4MSBmeDIgZngzIC4uLikgICAgcHJvY2VkdXJlCi8vKGZ4emVybz8gZngpICAgIHByb2NlZHVyZQovLyhmeHBvc2l0aXZlPyBmeCkgICAgcHJvY2VkdXJlCi8vKGZ4bmVnYXRpdmU/IGZ4KSAgICBwcm9jZWR1cmUKLy8oZnhvZGQ/IGZ4KSAgICBwcm9jZWR1cmUKLy8oZnhldmVuPyBmeCkgICAgcHJvY2VkdXJlCi8vKGZ4bWF4IGZ4MSBmeDIgLi4uKSAgICBwcm9jZWR1cmUKLy8oZnhtaW4gZngxIGZ4MiAuLi4pICAgIHByb2NlZHVyZQovLyhmeCsgZngxIGZ4MikgICAgcHJvY2VkdXJlCi8vKGZ4KiBmeDEgZngyKSAgICBwcm9jZWR1cmUKLy8oZngtIGZ4MSBmeDIpICAgIHByb2NlZHVyZQovLyhmeGRpdi1hbmQtbW9kIGZ4MSBmeDIpICAgIHByb2NlZHVyZQovLyhmeGRpdiBmeDEgZngyKSAgICBwcm9jZWR1cmUKLy8oZnhtb2QgZngxIGZ4MikgICAgcHJvY2VkdXJlCi8vKGZ4ZGl2MC1hbmQtbW9kMCBmeDEgZngyKSAgICBwcm9jZWR1cmUKLy8oZnhkaXYwIGZ4MSBmeDIpICAgIHByb2NlZHVyZQovLyhmeG1vZDAgZngxIGZ4MikgICAgcHJvY2VkdXJlCi8vKGZ4Ky9jYXJyeSBmeDEgZngyIGZ4MykgICAgcHJvY2VkdXJlCi8vKGZ4LS9jYXJyeSBmeDEgZngyIGZ4MykgICAgcHJvY2VkdXJlCi8vKGZ4Ki9jYXJyeSBmeDEgZngyIGZ4MykgICAgcHJvY2VkdXJlCi8vKGZ4bm90IGZ4KSAgICBwcm9jZWR1cmUKLy8oZnhhbmQgZngxIC4uLikgICAgcHJvY2VkdXJlCi8vKGZ4aW9yIGZ4MSAuLi4pICAgIHByb2NlZHVyZQovLyhmeHhvciBmeDEgLi4uKSAgICBwcm9jZWR1cmUKLy8oZnhpZiBmeDEgZngyIGZ4MykgICAgcHJvY2VkdXJlCi8vKGZ4Yml0LWNvdW50IGZ4KSAgICBwcm9jZWR1cmUKLy8oZnhsZW5ndGggZngpICAgIHByb2NlZHVyZQovLyhmeGZpcnN0LWJpdC1zZXQgZngpICAgIHByb2NlZHVyZQovLyhmeGJpdC1zZXQ/IGZ4MSBmeDIpICAgIHByb2NlZHVyZQovLyhmeGNvcHktYml0IGZ4MSBmeDIgZngzKSAgICBwcm9jZWR1cmUKLy8oZnhiaXQtZmllbGQgZngxIGZ4MiBmeDMpICAgIHByb2NlZHVyZQovLyhmeGNvcHktYml0LWZpZWxkIGZ4MSBmeDIgZngzIGZ4NCkgICAgcHJvY2VkdXJlCi8vKGZ4YXJpdGhtZXRpYy1zaGlmdCBmeDEgZngyKSAgICBwcm9jZWR1cmUKLy8oZnhhcml0aG1ldGljLXNoaWZ0LWxlZnQgZngxIGZ4MikgICAgcHJvY2VkdXJlCi8vKGZ4YXJpdGhtZXRpYy1zaGlmdC1yaWdodCBmeDEgZngyKSAgICBwcm9jZWR1cmUKLy8oZnhyb3RhdGUtYml0LWZpZWxkIGZ4MSBmeDIgZngzIGZ4NCkgICAgcHJvY2VkdXJlCi8vKGZ4cmV2ZXJzZS1iaXQtZmllbGQgZngxIGZ4MiBmeDMpICAgIHByb2NlZHVyZQovLwovLy8vICAgICAgICAxMS4zICBGbG9udW1zCi8vKGZsb251bT8gb2JqKSAgICBwcm9jZWR1cmUKLy8ocmVhbC0+ZmxvbnVtIHgpICAgIHByb2NlZHVyZQovLyhmbD0/IGZsMSBmbDIgZmwzIC4uLikgICAgcHJvY2VkdXJlCi8vKGZsPD8gZmwxIGZsMiBmbDMgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmw8PT8gZmwxIGZsMiBmbDMgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmw+PyBmbDEgZmwyIGZsMyAuLi4pICAgIHByb2NlZHVyZQovLyhmbD49PyBmbDEgZmwyIGZsMyAuLi4pICAgIHByb2NlZHVyZQovLyhmbGludGVnZXI/IGZsKSAgICBwcm9jZWR1cmUKLy8oZmx6ZXJvPyBmbCkgICAgcHJvY2VkdXJlCi8vKGZscG9zaXRpdmU/IGZsKSAgICBwcm9jZWR1cmUKLy8oZmxuZWdhdGl2ZT8gZmwpICAgIHByb2NlZHVyZQovLyhmbG9kZD8gaWZsKSAgICBwcm9jZWR1cmUKLy8oZmxldmVuPyBpZmwpICAgIHByb2NlZHVyZQovLyhmbGZpbml0ZT8gZmwpICAgIHByb2NlZHVyZQovLyhmbGluZmluaXRlPyBmbCkgICAgcHJvY2VkdXJlCi8vKGZsbmFuPyBmbCkgICAgcHJvY2VkdXJlCi8vKGZsbWF4IGZsMSBmbDIgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmxtaW4gZmwxIGZsMiAuLi4pICAgIHByb2NlZHVyZQovLyhmbCsgZmwxIC4uLikgICAgcHJvY2VkdXJlCi8vKGZsKiBmbDEgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmwtIGZsMSBmbDIgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmwtIGZsKSAgICBwcm9jZWR1cmUKLy8oZmwvIGZsMSBmbDIgLi4uKSAgICBwcm9jZWR1cmUKLy8oZmwvIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxhYnMgZmwpICAgIHByb2NlZHVyZQovLyhmbGRpdi1hbmQtbW9kIGZsMSBmbDIpICAgIHByb2NlZHVyZQovLyhmbGRpdiBmbDEgZmwyKSAgICBwcm9jZWR1cmUKLy8oZmxtb2QgZmwxIGZsMikgICAgcHJvY2VkdXJlCi8vKGZsZGl2MC1hbmQtbW9kMCBmbDEgZmwyKSAgICBwcm9jZWR1cmUKLy8oZmxkaXYwIGZsMSBmbDIpICAgIHByb2NlZHVyZQovLyhmbG1vZDAgZmwxIGZsMikgICAgcHJvY2VkdXJlCi8vKGZsbnVtZXJhdG9yIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxkZW5vbWluYXRvciBmbCkgICAgcHJvY2VkdXJlCi8vKGZsZmxvb3IgZmwpICAgIHByb2NlZHVyZQovLyhmbGNlaWxpbmcgZmwpICAgIHByb2NlZHVyZQovLyhmbHRydW5jYXRlIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxyb3VuZCBmbCkgICAgcHJvY2VkdXJlCi8vKGZsZXhwIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxsb2cgZmwpICAgIHByb2NlZHVyZQovLyhmbGxvZyBmbDEgZmwyKSAgICBwcm9jZWR1cmUKLy8oZmxzaW4gZmwpICAgIHByb2NlZHVyZQovLyhmbGNvcyBmbCkgICAgcHJvY2VkdXJlCi8vKGZsdGFuIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxhc2luIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxhY29zIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxhdGFuIGZsKSAgICBwcm9jZWR1cmUKLy8oZmxhdGFuIGZsMSBmbDIpICAgIHByb2NlZHVyZQovLyhmbHNxcnQgZmwpICAgIHByb2NlZHVyZQovLyhmbGV4cHQgZmwxIGZsMikgICAgcHJvY2VkdXJlCi8vJm5vLWluZmluaXRpZXMgICAgY29uZGl0aW9uIHR5cGUKLy8mbm8tbmFucyAgICBjb25kaXRpb24gdHlwZQovLyhmaXhudW0tPmZsb251bSBmeCkgICAgcHJvY2VkdXJlCgogIC8vLy8gICAgICAgIDExLjQgIEV4YWN0IGJpdHdpc2UgYXJpdGhtZXRpYwogIC8vKGJpdHdpc2Utbm90IGVpKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1ub3QiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gfihhclswXSk7CiAgfSk7CgogIC8vKGJpdHdpc2UtYW5kIGVpMSAuLi4pICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWFuZCIsIDEsIG51bGwsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBfLnJlZHVjZShhciwgZnVuY3Rpb24ocmV0LCBpdGVtKXsgcmV0dXJuIHJldCAmIGl0ZW07IH0pOwogIH0pOwoKICAvLyhiaXR3aXNlLWlvciBlaTEgLi4uKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1pb3IiLCAxLCBudWxsLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gXy5yZWR1Y2UoYXIsIGZ1bmN0aW9uKHJldCwgaXRlbSl7IHJldHVybiByZXQgfCBpdGVtOyB9KTsKICB9KTsKCiAgLy8oYml0d2lzZS14b3IgZWkxIC4uLikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImJpdHdpc2UteG9yIiwgMSwgbnVsbCwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIF8ucmVkdWNlKGFyLCBmdW5jdGlvbihyZXQsIGl0ZW0peyByZXR1cm4gcmV0IF4gaXRlbTsgfSk7CiAgfSk7CgogIC8vKGJpdHdpc2UtaWYgZWkxIGVpMiBlaTMpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWlmIiwgMywgMywgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIChhclswXSAmIGFyWzFdKSB8ICh+YXJbMF0gJiBhclsyXSk7CiAgfSk7CgogIC8vKGJpdHdpc2UtYml0LWNvdW50IGVpKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1iaXQtY291bnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICB2YXIgZSA9IE1hdGguYWJzKGFyWzBdKSwgcmV0ID0gMDsKICAgIGZvciAoOyBlICE9IDA7IGUgPj49IDEpIHsKICAgICAgaWYoZSAmIDEpIHJldCsrOwogICAgfQogICAgcmV0dXJuIHJldDsKICB9KTsKCiAgLy8oYml0d2lzZS1sZW5ndGggZWkpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWxlbmd0aCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBlID0gTWF0aC5hYnMoYXJbMF0pLCByZXQgPSAwOwogICAgZm9yICg7IGUgIT0gMDsgZSA+Pj0gMSkgewogICAgICByZXQrKzsKICAgIH0KICAgIHJldHVybiByZXQ7CiAgfSk7CgogIC8vKGJpdHdpc2UtZmlyc3QtYml0LXNldCBlaSkgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImJpdHdpc2UtZmlyc3QtYml0LXNldCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBlID0gTWF0aC5hYnMoYXJbMF0pLCByZXQgPSAwOwogICAgaWYgKGUgPT0gMCkgcmV0dXJuIC0xOwogICAgZm9yICg7IGUgIT0gMDsgZSA+Pj0gMSkgewogICAgICBpZiAoZSAmIDEpIHJldHVybiByZXQ7CiAgICAgIHJldCsrOwogICAgfQogIH0pOwoKICAvLyhiaXR3aXNlLWJpdC1zZXQ/IGVpMSBlaTIpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWJpdC1zZXQ/IiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuICEhKGFyWzBdICYgKDEgPDwgYXJbMV0pKTsKICB9KTsKCiAgLy8oYml0d2lzZS1jb3B5LWJpdCBlaTEgbiBiKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1jb3B5LWJpdCIsIDMsIDMsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBtYXNrID0gKDEgPDwgYXJbMV0pOwogICAgcmV0dXJuIChtYXNrICYgKGFyWzJdIDw8IGFyWzFdKSkgfCAgIC8vIFNldCBuLXRoIGJpdCB0byBiCiAgICAgICAgICAgKH5tYXNrICYgYXJbMF0pOyAgICAgICAgICAgICAgLy8gYW5kIHVzZSBlaTEgZm9yIHJlc3Qgb2YgdGhlIGJpdHMKICB9KTsKCiAgLy8oYml0d2lzZS1iaXQtZmllbGQgZWkxIHN0YXJ0IGVuZCkgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImJpdHdpc2UtYml0LWZpZWxkIiwgMywgMywgZnVuY3Rpb24oYXIpewogICAgdmFyIG1hc2sgPSB+KC0xIDw8IGFyWzJdKTsgIC8vIEhhcyAxIGF0IDAuLi5lbmQKICAgIHJldHVybiAobWFzayAmIGFyWzBdKSA+PiBhclsxXTsKICB9KTsKCiAgLy8oYml0d2lzZS1jb3B5LWJpdC1maWVsZCBkc3Qgc3RhcnQgZW5kIHNyYykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImJpdHdpc2UtY29weS1iaXQtZmllbGQiLCA0LCA0LCBmdW5jdGlvbihhcil7CiAgICB2YXIgZHN0PWFyWzBdLCBzdGFydD1hclsxXSwgZW5kPWFyWzJdLCBzcmM9YXJbM107CiAgICB2YXIgbWFzayA9IH4oLTEgPDwgZW5kKSAmICAgLy8gSGFzIDEgYXQgMC4uLmVuZAogICAgICAgICAgICAgICAgKC0xIDw8IHN0YXJ0KSAgIC8vIENsZWFyIDAuLi5zdGFydAogICAgcmV0dXJuIChtYXNrICYgKHNyYyA8PCBzdGFydCkpIHwKICAgICAgICAgICAofm1hc2sgJiBkc3QpOwogIH0pOwoKICAvLyhiaXR3aXNlLWFyaXRobWV0aWMtc2hpZnQgZWkxIGVpMikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImJpdHdpc2UtYXJpdGhtZXRpYy1zaGlmdCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiAoYXJbMV0gPj0gMCkgPyAoYXJbMF0gPDwgYXJbMV0pIDogKGFyWzBdID4+IC1hclsxXSk7CiAgfSk7CgogIC8vKGJpdHdpc2UtYXJpdGhtZXRpYy1zaGlmdC1sZWZ0IGVpMSBlaTIpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWFyaXRobWV0aWMtc2hpZnQtbGVmdCIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBhclswXSA8PCBhclsxXTsKICB9KTsKCiAgLy8oYml0d2lzZS1hcml0aG1ldGljLXNoaWZ0LXJpZ2h0IGVpMSBlaTIpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJiaXR3aXNlLWFyaXRobWV0aWMtc2hpZnQtcmlnaHQiLCAyLCAyLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gYXJbMF0gPj4gYXJbMV07CiAgfSk7CgogIC8vKGJpdHdpc2Utcm90YXRlLWJpdC1maWVsZCBlaTEgc3RhcnQgZW5kIGNvdW50KSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1yb3RhdGUtYml0LWZpZWxkIiwgNCwgNCwgZnVuY3Rpb24oYXIpewogICAgdmFyIG49YXJbMF0sIHN0YXJ0PWFyWzFdLCBlbmQ9YXJbMl0sIGNvdW50PWFyWzNdOwogICAgdmFyIHdpZHRoID0gZW5kIC0gc3RhcnQ7CiAgICBpZiAod2lkdGggPD0gMCkgcmV0dXJuIG47CgogICAgY291bnQgJT0gd2lkdGg7CiAgICB2YXIgb3JpZ19maWVsZCA9ICh+KC0xIDw8IGVuZCkgJiBuKSA+PiBzdGFydDsKICAgIHZhciByb3RhdGVkX2ZpZWxkID0gKG9yaWdfZmllbGQgPDwgY291bnQpIHwKICAgICAgICAgICAgICAgICAgICAgICAgKG9yaWdfZmllbGQgPj4gKHdpZHRoIC0gY291bnQpKQoKICAgIHZhciBtYXNrID0gfigtMSA8PCBlbmQpICYgKC0xIDw8IHN0YXJ0KTsKICAgIHJldHVybiAobWFzayAmIChyb3RhdGVkX2ZpZWxkIDw8IHN0YXJ0KSkgfAogICAgICAgICAgICh+bWFzayAmIG4pOwogIH0pOwoKICAvLyhiaXR3aXNlLXJldmVyc2UtYml0LWZpZWxkIGVpMSBlaTIgZWkzKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiYml0d2lzZS1yZXZlcnNlLWJpdC1maWVsZCIsIDMsIDMsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciByZXQ9bj1hclswXSwgc3RhcnQ9YXJbMV0sIGVuZD1hclsyXTsKICAgIHZhciBvcmlnX2ZpZWxkID0gKCh+KC0xIDw8IGVuZCkgJiBuKSA+PiBzdGFydCk7CiAgICBmb3IgKHZhciBpPTA7IGk8KGVuZC1zdGFydCk7IGkrKywgb3JpZ19maWVsZD4+PTEpIHsKICAgICAgdmFyIGJpdCA9IG9yaWdfZmllbGQgJiAxOwogICAgICB2YXIgc2V0cG9zID0gZW5kIC0gMSAtIGk7CiAgICAgIHZhciBtYXNrID0gKDEgPDwgc2V0cG9zKTsKICAgICAgcmV0ID0gKG1hc2sgJiAoYml0IDw8IHNldHBvcykpIHwgKH5tYXNrICYgcmV0KTsKICAgIH0KICAgIHJldHVybiByZXQ7CiAgfSk7CgogIC8vCiAgLy8gQ2hhcHRlciAxMiBzeW50YXgtY2FzZQogIC8vCgogIC8vCiAgLy8gQ2hhcHRlciAxMyBIYXNodGFibGVzCiAgLy8KCiAgLy8xMy4xICBDb25zdHJ1Y3RvcnMKICAvLyhkZWZpbmUgaCAobWFrZS1lcS1oYXNodGFsZSkKICAvLyhkZWZpbmUgaCAobWFrZS1lcS1oYXNodGFibGUgMTAwMCkpCiAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtZXEtaGFzaHRhYmxlIiwgMCwgMSwgZnVuY3Rpb24oYXIpewogICAgLy8gTm90ZTogYXJbMV0gKGhhc2h0YWJsZSBzaXplKSBpcyBqdXN0IGlnbm9yZWQKICAgIHJldHVybiBuZXcgSGFzaHRhYmxlKEhhc2h0YWJsZS5lcV9oYXNoLCBIYXNodGFibGUuZXFfZXF1aXYpOwogIH0pOwogIC8vKG1ha2UtZXF2LWhhc2h0YWJsZSkgICAgcHJvY2VkdXJlCiAgLy8obWFrZS1lcXYtaGFzaHRhYmxlIGspICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJtYWtlLWVxdi1oYXNodGFibGUiLCAwLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gbmV3IEhhc2h0YWJsZShIYXNodGFibGUuZXF2X2hhc2gsIEhhc2h0YWJsZS5lcXZfZXF1aXYpOwogIH0pOwogIC8vKG1ha2UtaGFzaHRhYmxlIGhhc2gtZnVuY3Rpb24gZXF1aXYpICAgIHByb2NlZHVyZQogIC8vKG1ha2UtaGFzaHRhYmxlIGhhc2gtZnVuY3Rpb24gZXF1aXYgaykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtaGFzaHRhYmxlIiwgMiwgMywgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X3Byb2NlZHVyZShhclswXSk7CiAgICBhc3NlcnRfcHJvY2VkdXJlKGFyWzFdKTsKICAgIHJldHVybiBuZXcgSGFzaHRhYmxlKGFyWzBdLCBhclsxXSk7CiAgfSk7CgogIC8vMTMuMiAgUHJvY2VkdXJlcwogIC8vIChoYXNodGFibGU/IGhhc2gpCiAgZGVmaW5lX2xpYmZ1bmMoImhhc2h0YWJsZT8iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gYXJbMF0gaW5zdGFuY2VvZiBIYXNodGFibGU7CiAgfSk7CiAgLy8oaGFzaHRhYmxlLXNpemUgaGFzaCkKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLXNpemUiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfaGFzaHRhYmxlKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5rZXlzKCkubGVuZ3RoOwogIH0pOwoKICAvLyBGaW5kIGEgcGFpciBmcm9tIGEgaGFzaHRhYmxlIHdpdGggZ2l2ZW4ga2V5LgogIC8vCiAgLy8gaGFzaCAgICAgIC0gYSBCaXdhU2NoZW1lLkhhc2h0YWJsZQogIC8vIGtleSAgICAgICAtIGFuIG9iamVjdAogIC8vIGNhbGxiYWNrcyAtIGFuIG9iamVjdCBjb250YWlucyBjYWxsYmFjayBmdW5jdGlvbnMKICAvLyAgICAgICAgICAgICAub25fZm91bmQgICAgIC0gZnVuY3Rpb24ocGFpciwgaGFzaGVkKQogIC8vICAgICAgICAgICAgICAgcGFpciAgIC0gW09iamVjdCBrZXksIE9iamVjdCB2YWx1ZV0KICAvLyAgICAgICAgICAgICAgIGhhc2hlZCAtIE9iamVjdCBoYXNoZWQKICAvLyAgICAgICAgICAgICAub25fbm90X2ZvdW5kIC0gZnVuY3Rpb24oaGFzaGVkKQogIC8vICAgICAgICAgICAgICAgaGFzaGVkIC0gT2JqZWN0IGhhc2hlZAogIC8vCiAgLy8gUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBCaXdhU2NoZW1lLkNhbGwuCiAgQml3YVNjaGVtZS5maW5kX2hhc2hfcGFpciA9IGZ1bmN0aW9uKGhhc2gsIGtleSwgY2FsbGJhY2tzKXsKICAgIC8vIGludm9rZSBoYXNoIHByb2MKICAgIHJldHVybiBuZXcgQ2FsbChoYXNoLmhhc2hfcHJvYywgW2tleV0sIGZ1bmN0aW9uKGFyKXsKICAgICAgdmFyIGhhc2hlZCA9IGFyWzBdOwogICAgICB2YXIgY2FuZGlkYXRlX3BhaXJzID0gaGFzaC5jYW5kaWRhdGVfcGFpcnMoaGFzaGVkKTsKCiAgICAgIGlmICghY2FuZGlkYXRlX3BhaXJzKXsgLy8gc2hvcnRjdXQ6IG9idmlvdXNseSBub3QgZm91bmQKICAgICAgICByZXR1cm4gY2FsbGJhY2tzLm9uX25vdF9mb3VuZChoYXNoZWQpOwogICAgICB9CgogICAgICAvLyBzZWFyY2ggdGhlIGV4YWN0IGtleSBmcm9tIGNhbmRpZGF0ZXMKICAgICAgcmV0dXJuIENhbGwuZm9yZWFjaChjYW5kaWRhdGVfcGFpcnMsIHsKICAgICAgICBjYWxsOiBmdW5jdGlvbihwYWlyKXsKICAgICAgICAgIC8vIGludm9rZSB0aGUgZXF1aXZhbGVuY2UgcHJvYwogICAgICAgICAgcmV0dXJuIG5ldyBDYWxsKGhhc2guZXF1aXZfcHJvYywgW2tleSwgcGFpclswXV0pOwogICAgICAgIH0sCiAgICAgICAgcmVzdWx0OiBmdW5jdGlvbihlcXVhbCwgcGFpcil7CiAgICAgICAgICBpZihlcXVhbCkgeyAgICAgICAvLyBmb3VuZAogICAgICAgICAgICByZXR1cm4gY2FsbGJhY2tzLm9uX2ZvdW5kKHBhaXIsIGhhc2hlZCk7CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBmaW5pc2g6IGZ1bmN0aW9uKCl7IC8vIG5vdCBmb3VuZAogICAgICAgICAgcmV0dXJuIGNhbGxiYWNrcy5vbl9ub3RfZm91bmQoaGFzaGVkKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfSk7CiAgfTsKCiAgLy8oaGFzaHRhYmxlLXJlZiBoYXNoICJmb28iICNmKQogIGRlZmluZV9saWJmdW5jKCJoYXNodGFibGUtcmVmIiwgMywgMywgZnVuY3Rpb24oYXIpewogICAgdmFyIGhhc2ggPSBhclswXSwga2V5ID0gYXJbMV0sIGlmbm9uZSA9IGFyWzJdOwogICAgYXNzZXJ0X2hhc2h0YWJsZShoYXNoKTsKCiAgICByZXR1cm4gQml3YVNjaGVtZS5maW5kX2hhc2hfcGFpcihoYXNoLCBrZXksIHsKICAgICAgb25fZm91bmQ6IGZ1bmN0aW9uKHBhaXIpewogICAgICAgIHJldHVybiBwYWlyWzFdOwogICAgICB9LAogICAgICBvbl9ub3RfZm91bmQ6IGZ1bmN0aW9uKGhhc2hlZCl7CiAgICAgICAgcmV0dXJuIGlmbm9uZTsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIC8vKGhhc2h0YWJsZS1zZXQhIGhhc2ggImZvbyIgJygxIDIpKQogIGRlZmluZV9saWJmdW5jKCJoYXNodGFibGUtc2V0ISIsIDMsIDMsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBoYXNoID0gYXJbMF0sIGtleSA9IGFyWzFdLCB2YWx1ZSA9IGFyWzJdOwogICAgYXNzZXJ0X2hhc2h0YWJsZShoYXNoKTsKICAgIGFzc2VydChoYXNoLm11dGFibGUsICJoYXNodGFibGUgaXMgbm90IG11dGFibGUiKTsKCiAgICByZXR1cm4gQml3YVNjaGVtZS5maW5kX2hhc2hfcGFpcihoYXNoLCBrZXksIHsKICAgICAgb25fZm91bmQ6IGZ1bmN0aW9uKHBhaXIpewogICAgICAgIHBhaXJbMV0gPSB2YWx1ZTsKICAgICAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICAgICAgfSwKICAgICAgb25fbm90X2ZvdW5kOiBmdW5jdGlvbihoYXNoZWQpewogICAgICAgIGhhc2guYWRkX3BhaXIoaGFzaGVkLCBrZXksIHZhbHVlKTsKICAgICAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIC8vKGhhc2h0YWJsZS1kZWxldGUhIGhhc2ggImZvbyIpCiAgZGVmaW5lX2xpYmZ1bmMoImhhc2h0YWJsZS1kZWxldGUhIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgdmFyIGhhc2ggPSBhclswXSwga2V5ID0gYXJbMV07CiAgICBhc3NlcnRfaGFzaHRhYmxlKGhhc2gpOwogICAgYXNzZXJ0KGhhc2gubXV0YWJsZSwgImhhc2h0YWJsZSBpcyBub3QgbXV0YWJsZSIpOwoKICAgIHJldHVybiBCaXdhU2NoZW1lLmZpbmRfaGFzaF9wYWlyKGhhc2gsIGtleSwgewogICAgICBvbl9mb3VuZDogZnVuY3Rpb24ocGFpciwgaGFzaGVkKXsKICAgICAgICBoYXNoLnJlbW92ZV9wYWlyKGhhc2hlZCwgcGFpcik7CiAgICAgICAgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7CiAgICAgIH0sCiAgICAgIG9uX25vdF9mb3VuZDogZnVuY3Rpb24oaGFzaGVkKXsKICAgICAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICAgICAgfQogICAgfSk7CiAgfSk7CgogIC8vKGhhc2h0YWJsZS1jb250YWlucz8gaGFzaCAiZm9vIikKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLWNvbnRhaW5zPyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBoYXNoID0gYXJbMF0sIGtleSA9IGFyWzFdOwogICAgYXNzZXJ0X2hhc2h0YWJsZShoYXNoKTsKCiAgICByZXR1cm4gQml3YVNjaGVtZS5maW5kX2hhc2hfcGFpcihoYXNoLCBrZXksIHsKICAgICAgb25fZm91bmQ6IGZ1bmN0aW9uKHBhaXIpewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9LAogICAgICBvbl9ub3RfZm91bmQ6IGZ1bmN0aW9uKGhhc2hlZCl7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9KTsKICB9KTsKCiAgLy8oaGFzaHRhYmxlLXVwZGF0ZSEgaGFzaHRhYmxlIGtleSBwcm9jIGRlZmF1bHQpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJoYXNodGFibGUtdXBkYXRlISIsIDQsIDQsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBoYXNoID0gYXJbMF0sIGtleSA9IGFyWzFdLCBwcm9jID0gYXJbMl0sIGlmbm9uZSA9IGFyWzNdOwogICAgYXNzZXJ0X2hhc2h0YWJsZShoYXNoKTsKICAgIGFzc2VydChoYXNoLm11dGFibGUsICJoYXNodGFibGUgaXMgbm90IG11dGFibGUiKTsKICAgIGFzc2VydF9wcm9jZWR1cmUocHJvYyk7CgogICAgcmV0dXJuIEJpd2FTY2hlbWUuZmluZF9oYXNoX3BhaXIoaGFzaCwga2V5LCB7CiAgICAgIG9uX2ZvdW5kOiBmdW5jdGlvbihwYWlyLCBoYXNoZWQpewogICAgICAgIC8vIGludm9rZSBwcm9jIGFuZCBnZXQgbmV3IHZhbHVlCiAgICAgICAgcmV0dXJuIG5ldyBDYWxsKHByb2MsIFtwYWlyWzFdXSwgZnVuY3Rpb24oYXIpewogICAgICAgICAgLy8gcmVwbGFjZSB0aGUgdmFsdWUKICAgICAgICAgIHBhaXJbMV0gPSBhclswXTsKICAgICAgICAgIHJldHVybiBCaXdhU2NoZW1lLnVuZGVmOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBvbl9ub3RfZm91bmQ6IGZ1bmN0aW9uKGhhc2hlZCl7CiAgICAgICAgLy8gaW52b2tlIHByb2MgYW5kIGdldCBuZXcgdmFsdWUKICAgICAgICByZXR1cm4gbmV3IENhbGwocHJvYywgW2lmbm9uZV0sIGZ1bmN0aW9uKGFyKXsKICAgICAgICAgIC8vIGNyZWF0ZSBuZXcgcGFpcgogICAgICAgICAgaGFzaC5hZGRfcGFpcihoYXNoZWQsIGtleSwgYXJbMF0pOwogICAgICAgICAgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0pOwogIH0pOwogIC8vKGhhc2h0YWJsZS1jb3B5IGhhc2h0YWJsZSkgICAgcHJvY2VkdXJlCiAgLy8oaGFzaHRhYmxlLWNvcHkgaGFzaHRhYmxlIG11dGFibGUpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJoYXNodGFibGUtY29weSIsIDEsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIHZhciBtdXRhYmxlID0gKGFyWzFdPT09dW5kZWZpbmVkKSA/IGZhbHNlIDogISFhclsxXTsKICAgIGFzc2VydF9oYXNodGFibGUoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLmNyZWF0ZV9jb3B5KG11dGFibGUpOwogIH0pOwogIC8vKGhhc2h0YWJsZS1jbGVhciEgaGFzaHRhYmxlKSAgICBwcm9jZWR1cmUKICAvLyhoYXNodGFibGUtY2xlYXIhIGhhc2h0YWJsZSBrKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLWNsZWFyISIsIDAsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9oYXNodGFibGUoYXJbMF0pOwogICAgYXNzZXJ0KGFyWzBdLm11dGFibGUsICJoYXNodGFibGUgaXMgbm90IG11dGFibGUiKTsKICAgIGFyWzBdLmNsZWFyKCk7CiAgICByZXR1cm4gQml3YVNjaGVtZS51bmRlZjsKICB9KTsKICAvLyhoYXNodGFibGUta2V5cyBoYXNoKSAgOyA9PiB2ZWN0b3IKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLWtleXMiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfaGFzaHRhYmxlKGFyWzBdKTsKICAgIHJldHVybiBhclswXS5rZXlzKCk7CiAgfSk7CiAgLy8oaGFzaHRhYmxlLWVudHJpZXMgaGFzaCkgIDsgPT4gdHdvIHZlY3RvcnMgKGtleXMsIHZhbHVlcykKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLWVudHJpZXMiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfaGFzaHRhYmxlKGFyWzBdKTsKICAgIHJldHVybiBuZXcgVmFsdWVzKFthclswXS5rZXlzKCksIGFyWzBdLnZhbHVlcygpXSk7CiAgfSk7CgogIC8vMTMuMyAgSW5zcGVjdGlvbgoKICAvLyhoYXNodGFibGUtZXF1aXZhbGVuY2UtZnVuY3Rpb24gaGFzaHRhYmxlKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLWVxdWl2YWxlbmNlLWZ1bmN0aW9uIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2hhc2h0YWJsZShhclswXSk7CiAgICByZXR1cm4gYXJbMF0uZXF1aXZfcHJvYzsKICB9KTsKICAvLyhoYXNodGFibGUtaGFzaC1mdW5jdGlvbiBoYXNodGFibGUpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJoYXNodGFibGUtaGFzaC1mdW5jdGlvbiIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9oYXNodGFibGUoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLmhhc2hfcHJvYzsKICB9KTsKICAvLyhoYXNodGFibGUtbXV0YWJsZT8gaGFzaHRhYmxlKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygiaGFzaHRhYmxlLW11dGFibGU/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2hhc2h0YWJsZShhclswXSk7CiAgICByZXR1cm4gYXJbMF0ubXV0YWJsZTsKICB9KTsKCiAgLy8xMy40ICBIYXNoIGZ1bmN0aW9ucwoKICAvLyhlcXVhbC1oYXNoIG9iaikgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImVxdWFsLWhhc2giLCAwLCAwLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gSGFzaHRhYmxlLmVxdWFsX2hhc2g7CiAgfSk7CiAgLy8oc3RyaW5nLWhhc2ggc3RyaW5nKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbGliZnVuYygic3RyaW5nLWhhc2giLCAwLCAwLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gSGFzaHRhYmxlLnN0cmluZ19oYXNoOwogIH0pOwogIC8vKHN0cmluZy1jaS1oYXNoIHN0cmluZykgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoInN0cmluZy1jaS1oYXNoIiwgMCwgMCwgZnVuY3Rpb24oYXIpewogICAgcmV0dXJuIEhhc2h0YWJsZS5zdHJpbmdfY2lfaGFzaDsKICB9KTsKICAvLyhzeW1ib2wtaGFzaCBzeW1ib2wpICAgIHByb2NlZHVyZQogIGRlZmluZV9saWJmdW5jKCJzeW1ib2wtaGFzaCIsIDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAgIHJldHVybiBIYXNodGFibGUuc3ltYm9sX2hhc2g7CiAgfSk7CgogIC8vCiAgLy8gQ2hhcHRlciAxNCBFbnVtZXJhdG9ycwogIC8vCiAgLy8obWFrZS1lbnVtZXJhdGlvbiBzeW1ib2wtbGlzdCkgLT4gZW51bS1zZXQobmV3IHR5cGUpCiAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtZW51bWVyYXRpb24iLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfbGlzdChhclswXSk7CiAgICB2YXIgbWVtYmVycyA9IGFyWzBdLnRvX2FycmF5KCk7CiAgICB2YXIgZW51bV90eXBlID0gbmV3IEJpd2FTY2hlbWUuRW51bWVyYXRpb24uRW51bVR5cGUobWVtYmVycyk7CiAgICByZXR1cm4gZW51bV90eXBlLnVuaXZlcnNlKCk7CiAgfSk7CgogIC8vKGVudW0tc2V0LXVuaXZlcnNlIGVudW0tc2V0KSAtPiBlbnVtLXNldChzYW1lIHR5cGUgYXMgdGhlIGFyZ3VtZW50KQogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC11bml2ZXJzZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICByZXR1cm4gYXJbMF0uZW51bV90eXBlLnVuaXZlcnNlKCk7CiAgfSk7CgogIC8vKGVudW0tc2V0LWluZGV4ZXIgZW51bS1zZXQpIC0+IChsYW1iZGEgKHN5bSkpIC0+IGludGVnZXIgb3IgI2YKICBkZWZpbmVfbGliZnVuYygiZW51bS1zZXQtaW5kZXhlciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICByZXR1cm4gYXJbMF0uZW51bV90eXBlLmluZGV4ZXIoKTsKICB9KTsKCiAgLy8oZW51bS1zZXQtY29uc3RydWN0b3IgZW51bS1zZXQpIC0+IChsYW1iZGEgKHN5bXMpKSAtPiBlbnVtLXNldChzYW1lIHR5cGUgYXMgdGhlIGFyZ3VtZW50KQogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC1jb25zdHJ1Y3RvciIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICByZXR1cm4gYXJbMF0uZW51bV90eXBlLmNvbnN0cnVjdG9yKCk7CiAgfSk7CgogIC8vKGVudW0tc2V0LT5saXN0IGVudW0tc2V0KSAtPiBzeW1ib2wtbGlzdAogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC0+bGlzdCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICByZXR1cm4gYXJbMF0uc3ltYm9sX2xpc3QoKTsKICB9KTsKCiAgLy8oZW51bS1zZXQtbWVtYmVyPyBzeW1ib2wgZW51bS1zZXQpIC0+IGJvb2wKICBkZWZpbmVfbGliZnVuYygiZW51bS1zZXQtbWVtYmVyPyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9zeW1ib2woYXJbMF0pOwogICAgYXNzZXJ0X2VudW1fc2V0KGFyWzFdKTsKICAgIHJldHVybiBhclsxXS5pc19tZW1iZXIoYXJbMF0pOwogIH0pOwoKICAvLyhlbnVtLXNldC1zdWJzZXQ/IGVzYSBlc2IpIC0+IGJvb2wKICBkZWZpbmVfbGliZnVuYygiZW51bS1zZXQtc3Vic2V0PyIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICBhc3NlcnRfZW51bV9zZXQoYXJbMV0pOwogICAgcmV0dXJuIGFyWzBdLmlzX3N1YnNldChhclsxXSk7CiAgfSk7CgogIC8vKGVudW0tc2V0PT8gZXNhIGVzYikgLT4gYm9vbAogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldD0/IiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2VudW1fc2V0KGFyWzBdKTsKICAgIGFzc2VydF9lbnVtX3NldChhclsxXSk7CiAgICByZXR1cm4gYXJbMF0uZXF1YWxfdG8oYXJbMV0pOwogIH0pOwoKICAvLyhlbnVtLXNldC11bmlvbiBlczEgZXMyKSAtPiBlbnVtLXNldAogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC11bmlvbiIsIDIsIDIsIGZ1bmN0aW9uKGFyKXsKICAgIGFzc2VydF9lbnVtX3NldChhclswXSk7CiAgICBhc3NlcnRfZW51bV9zZXQoYXJbMV0pOwogICAgYXNzZXJ0KGFyWzBdLmVudW1fdHlwZSA9PT0gYXJbMV0uZW51bV90eXBlLAogICAgICAgICAgICJ0d28gZW51bS1zZXRzIG11c3QgYmUgdGhlIHNhbWUgZW51bS10eXBlIiwgImVudW0tc2V0LXVuaW9uIik7CiAgICByZXR1cm4gYXJbMF0udW5pb24oYXJbMV0pOwogIH0pOwoKICAvLyhlbnVtLXNldC1pbnRlcnNlY3Rpb24gZXMxIGVzMikgLT4gZW51bS1zZXQKICBkZWZpbmVfbGliZnVuYygiZW51bS1zZXQtaW50ZXJzZWN0aW9uIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2VudW1fc2V0KGFyWzBdKTsKICAgIGFzc2VydF9lbnVtX3NldChhclsxXSk7CiAgICByZXR1cm4gYXJbMF0uaW50ZXJzZWN0aW9uKGFyWzFdKTsKICB9KTsKCiAgLy8oZW51bS1zZXQtZGlmZmVyZW5jZSBlczEgZXMyKSAtPiBlbnVtLXNldAogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC1kaWZmZXJlbmNlIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2VudW1fc2V0KGFyWzBdKTsKICAgIGFzc2VydF9lbnVtX3NldChhclsxXSk7CiAgICByZXR1cm4gYXJbMF0uZGlmZmVyZW5jZShhclsxXSk7CiAgfSk7CgogIC8vKGVudW0tc2V0LWNvbXBsZW1lbnQgZW51bS1zZXQpIC0+IGVudW0tc2V0CiAgZGVmaW5lX2xpYmZ1bmMoImVudW0tc2V0LWNvbXBsZW1lbnQiLCAxLCAxLCBmdW5jdGlvbihhcil7CiAgICBhc3NlcnRfZW51bV9zZXQoYXJbMF0pOwogICAgcmV0dXJuIGFyWzBdLmNvbXBsZW1lbnQoKTsKICB9KTsKCiAgLy8oZW51bS1zZXQtcHJvamVjdGlvbiBlc2EgZXNiKSAtPiBlbnVtLXNldAogIGRlZmluZV9saWJmdW5jKCJlbnVtLXNldC1wcm9qZWN0aW9uIiwgMiwgMiwgZnVuY3Rpb24oYXIpewogICAgYXNzZXJ0X2VudW1fc2V0KGFyWzBdKTsKICAgIGFzc2VydF9lbnVtX3NldChhclsxXSk7CiAgICByZXR1cm4gYXJbMF0ucHJvamVjdGlvbihhclsxXSk7CiAgfSk7CgogIC8vKGRlZmluZS1lbnVtZXJhdGlvbiA8dHlwZS1uYW1lPiAoPHN5bWJvbD4gLi4uKSA8Y29uc3RydWN0b3Itc3ludGF4PikKICAvLyBFeGFtcGxlOgogIC8vICAgKGRlZmluZS1lbnVtZXJhdGlvbiBjb2xvciAocmVkIGdyZWVuIGJsYWNrIHdoaXRlKSBjb2xvci1zZXQpCiAgLy8gICB0aGlzIGRlZmluZXM6CiAgLy8gICAgIC0gYW4gRW51bVR5cGUKICAvLyAgICAgLSAoY29sb3IgcmVkKSA7PT4gJ3JlZAogIC8vICAgICAtIChjb2xvci1zZXQgcmVkIGJsYWNrKSA7PT4gIzxlbnVtLXNldCAocmVkIGJsYWNrKT4KICBkZWZpbmVfc3ludGF4KCJkZWZpbmUtZW51bWVyYXRpb24iLCBmdW5jdGlvbih4KXsKICAgIC8vIEV4dHJhY3QgcGFyYW1ldGVycwogICAgdmFyIHR5cGVfbmFtZSA9IHguY2RyLmNhcjsKICAgIGFzc2VydChCaXdhU2NoZW1lLmlzU3ltYm9sKHR5cGVfbmFtZSksCiAgICAgICAgICAgImV4cGVjdGVkIHN5bWJvbCBmb3IgdHlwZV9uYW1lIiwgImRlZmluZS1lbnVtZXJhdGlvbiIpOwogICAgdHlwZV9uYW1lID0gdHlwZV9uYW1lLm5hbWU7CgogICAgdmFyIG1lbWJlcnMgPSB4LmNkci5jZHIuY2FyOwogICAgYXNzZXJ0KEJpd2FTY2hlbWUuaXNMaXN0KG1lbWJlcnMpLAogICAgICAgICAgICJleHBlY3RlZCBsaXN0IG9mIHN5bWJvbCBmb3IgbWVtYmVycyIsICJkZWZpbmUtZW51bWVyYXRpb24iKTsKICAgIG1lbWJlcnMgPSBtZW1iZXJzLnRvX2FycmF5KCk7CgogICAgdmFyIGNvbnN0cnVjdG9yX25hbWUgPSB4LmNkci5jZHIuY2RyLmNhcjsKICAgIGFzc2VydChCaXdhU2NoZW1lLmlzU3ltYm9sKGNvbnN0cnVjdG9yX25hbWUpLAogICAgICAgICAgICJleHBlY3RlZCBzeW1ib2wgZm9yIGNvbnN0cnVjdG9yX25hbWUiLCAiZGVmaW5lLWVudW1lcmF0aW9uIik7CiAgICBjb25zdHJ1Y3Rvcl9uYW1lID0gY29uc3RydWN0b3JfbmFtZS5uYW1lOwoKICAgIC8vIERlZmluZSBFbnVtVHlwZQogICAgdmFyIGVudW1fdHlwZSA9IG5ldyBCaXdhU2NoZW1lLkVudW1lcmF0aW9uLkVudW1UeXBlKG1lbWJlcnMpOwoKICAgIC8vIERlZmluZSAoY29sb3IgcmVkKQogICAgZGVmaW5lX3N5bnRheCh0eXBlX25hbWUsIGZ1bmN0aW9uKHgpewogICAgICAvLyAoY29sb3IpCiAgICAgIGFzc2VydCghQml3YVNjaGVtZS5pc05pbCh4LmNkciksCiAgICAgICAgICAgICAiYW4gYXJndW1lbnQgaXMgbmVlZGVkIiwgdHlwZV9uYW1lKTsKCiAgICAgIHZhciBhcmcgPSB4LmNkci5jYXI7CiAgICAgIGFzc2VydF9zeW1ib2woYXJnLCB0eXBlX25hbWUpOwoKICAgICAgLy8gQ2hlY2sgYXJnIGlzIGluY2x1ZGVkIGluIHRoZSB1bml2ZXJzZQogICAgICBhc3NlcnQoXy5pbmNsdWRlKGVudW1fdHlwZS5tZW1iZXJzLCBhcmcpLAogICAgICAgIGFyZy5uYW1lKyIgaXMgbm90IGluY2x1ZGVkIGluIHRoZSB1bml2ZXJzZTogIisKICAgICAgICAgIEJpd2FTY2hlbWUudG9fd3JpdGUoZW51bV90eXBlLm1lbWJlcnMpLAogICAgICAgIHR5cGVfbmFtZSk7CgogICAgICByZXR1cm4gQml3YVNjaGVtZS5MaXN0KFN5bSgicXVvdGUiKSwgYXJnKTsKICAgIH0pOwoKICAgIC8vIERlZmluZSAoY29sb3Itc2V0IHJlZCBibGFjaykKICAgIGRlZmluZV9zeW50YXgoY29uc3RydWN0b3JfbmFtZSwgZnVuY3Rpb24oeCl7CiAgICAgIGFzc2VydF9saXN0KHguY2RyLCBjb25zdHJ1Y3Rvcl9uYW1lKTsKCiAgICAgIHZhciBzeW1ib2xzID0geC5jZHIudG9fYXJyYXkoKTsKCiAgICAgIC8vIENoZWNrIGVhY2ggYXJndW1lbnQgaXMgaW5jbHVkZWQgaW4gdGhlIHVuaXZlcnNlCiAgICAgIF8uZWFjaChzeW1ib2xzLCBmdW5jdGlvbihhcmcpewogICAgICAgIGFzc2VydF9zeW1ib2woYXJnLCBjb25zdHJ1Y3Rvcl9uYW1lKTsKICAgICAgICBhc3NlcnQoXy5pbmNsdWRlKGVudW1fdHlwZS5tZW1iZXJzLCBhcmcpLAogICAgICAgICAgYXJnLm5hbWUrIiBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIHVuaXZlcnNlOiAiKwogICAgICAgICAgICBCaXdhU2NoZW1lLnRvX3dyaXRlKGVudW1fdHlwZS5tZW1iZXJzKSwKICAgICAgICAgIGNvbnN0cnVjdG9yX25hbWUpOwogICAgICB9KTsKCiAgICAgIC8vIENyZWF0ZSBhbiBFbnVtU2V0CiAgICAgIHJldHVybiBuZXcgQml3YVNjaGVtZS5FbnVtZXJhdGlvbi5FbnVtU2V0KGVudW1fdHlwZSwgc3ltYm9scyk7CiAgICB9KTsKICB9KTsKCiAgLy8KICAvLyBDaGFwdGVyIDE1IENvbXBvc2l0ZSBsaWJyYXJ5CiAgLy8KICAvLyhybnJzIDYpID0gYWxsIC0gZXZhbCAtIG11dGFibGUgcGFpcnMgLSBtdXRhYmxlIHN0cmluZ3MgLSByNXJzIGNvbXBhdGliaWxpdHkKCiAgLy8KICAvLyBDaGFwdGVyIDE2IGV2YWwKICAvLwogIC8vKGV2YWwgZXhwcmVzc2lvbiBlbnZpcm9ubWVudCkgICAgcHJvY2VkdXJlCiAgZGVmaW5lX2xpYmZ1bmMoImV2YWwiLCAxLCAxLCBmdW5jdGlvbihhciwgaW50cCl7CiAgICAvL1RPRE86IGVudmlyb25tZW50CiAgICAvL1RPRE86IHRoaXMgaW1wbGVtZW50YXRpb24gaGFzIGEgYnVnIHRoYXQKICAgIC8vICBleHByZXNzaW9ucyB3aGljaCBjb250YWlucyAjPHVuZGVmPiwgZXRjLiBjYW5ub3QgYmUgZXZhbHVhdGVkLgogICAgdmFyIGV4cHIgPSBhclswXTsKICAgIHZhciBpbnRwMiA9IG5ldyBJbnRlcnByZXRlcihpbnRwKTsKICAgIHJldHVybiBpbnRwMi5ldmFsdWF0ZShCaXdhU2NoZW1lLnRvX3dyaXRlKGV4cHIpKTsKICB9KTsKLy8oZW52aXJvbm1lbnQgaW1wb3J0LXNwZWMgLi4uKSAgICBwcm9jZWR1cmUKCiAgLy8KICAvLyBDaGFwdGVyIDE3IE11dGFibGUgcGFpcnMKICAvLwovLyhzZXQtY2FyISBwYWlyIG9iaikgICAgcHJvY2VkdXJlCi8vKHNldC1jZHIhIHBhaXIgb2JqKSAgICBwcm9jZWR1cmUKCiAgLy8KICAvLyBDaGFwdGVyIDE4IE11dGFibGUgc3RyaW5ncwogIC8vCiAgLy8oc3RyaW5nLXNldCEgc3RyaW5nIGsgY2hhcikgICAgcHJvY2VkdXJlCiAvLyAoc3RyaW5nLWZpbGwhIHN0cmluZyBjaGFyKSAgICBwcm9jZWR1cmUKCiAgLy8KICAvLyBDaGFwdGVyIDE5IFI1UlMgY29tcGF0aWJpbGl0eQogIC8vCi8vKGV4YWN0LT5pbmV4YWN0IHopICAgIHByb2NlZHVyZQovLyhpbmV4YWN0LT5leGFjdCB6KSAgICBwcm9jZWR1cmUKLy8KLy8ocXVvdGllbnQgbjEgbjIpICAgIHByb2NlZHVyZQovLyhyZW1haW5kZXIgbjEgbjIpICAgIHByb2NlZHVyZQovLyhtb2R1bG8gbjEgbjIpICAgIHByb2NlZHVyZQovLwovLyhudWxsLWVudmlyb25tZW50IG4pICAgIHByb2NlZHVyZQovLyhzY2hlbWUtcmVwb3J0LWVudmlyb25tZW50IG4pICAgIHByb2NlZHVyZQoKICAvLwogIC8vIFI3UlMgKFRPRE86IHNwbGl0IGZpbGU/KQogIC8vCgogIC8vIFI3UlMgUHJvbWlzZQogIC8vCiAgLy8gKGRlbGF5IGV4cHJlc3Npb24pCiAgZGVmaW5lX3N5bnRheCgiZGVsYXkiLCBmdW5jdGlvbih4KXsKICAgIGlmICh4LmNkciA9PT0gQml3YVNjaGVtZS5uaWwpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJtYWxmb3JtZWQgZGVsYXk6IG5vIGFyZ3VtZW50Iik7CiAgICB9CiAgICBpZiAoeC5jZHIuY2RyICE9PSBuaWwpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJtYWxmb3JtZWQgZGVsYXk6IHRvbyBtYW55IGFyZ3VtZW50czogIisKICAgICAgICAgICAgICAgICAgICAgIEJpd2FTY2hlbWUudG9fd3JpdGVfc3MoeCkpOwogICAgfQogICAgdmFyIGV4cHIgPSB4LmNkci5jYXI7CiAgICAvLyBFeHBhbmQgaW50byBjYWxsIG9mIGludGVybmFsIGZ1bmN0aW9uCiAgICAvLyAoIHByb2NlZHVyZS0+cHJvbWlzZSAobGFtYmRhICgpIChtYWtlLXByb21pc2UgZXhwcikpKQogICAgcmV0dXJuIG5ldyBQYWlyKFN5bSgiIHByb2NlZHVyZS0+cHJvbWlzZSIpLAogICAgICAgICAgICAgbmV3IFBhaXIobmV3IFBhaXIoU3ltKCJsYW1iZGEiKSwKICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhaXIoQml3YVNjaGVtZS5uaWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBhaXIobmV3IFBhaXIoU3ltKCJtYWtlLXByb21pc2UiKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKGV4cHIsIEJpd2FTY2hlbWUubmlsKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBCaXdhU2NoZW1lLm5pbCkpKSkpOwogIH0pOwoKICAvLyAoZGVsYXktZm9yY2UgcHJvbWlzZS1leHByKQogIGRlZmluZV9zeW50YXgoImRlbGF5LWZvcmNlIiwgZnVuY3Rpb24oeCl7CiAgICBpZiAoeC5jZHIgPT09IEJpd2FTY2hlbWUubmlsKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigibWFsZm9ybWVkIGRlbGF5LWZvcmNlOiBubyBhcmd1bWVudCIpOwogICAgfQogICAgaWYgKHguY2RyLmNkciAhPT0gbmlsKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigibWFsZm9ybWVkIGRlbGF5LWZvcmNlOiB0b28gbWFueSBhcmd1bWVudHM6ICIrCiAgICAgICAgICAgICAgICAgICAgICBCaXdhU2NoZW1lLnRvX3dyaXRlX3NzKHgpKTsKICAgIH0KICAgIHZhciBleHByID0geC5jZHIuY2FyOwogICAgLy8gRXhwYW5kIGludG8gY2FsbCBvZiBpbnRlcm5hbCBmdW5jdGlvbgogICAgLy8gKCBwcm9jZWR1cmUtPnByb21pc2UgKGxhbWJkYSAoKSBleHByKSkKICAgIHJldHVybiBuZXcgUGFpcihTeW0oIiBwcm9jZWR1cmUtPnByb21pc2UiKSwKICAgICAgICAgICAgIG5ldyBQYWlyKG5ldyBQYWlyKFN5bSgibGFtYmRhIiksCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKEJpd2FTY2hlbWUubmlsLAogICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYWlyKGV4cHIsIEJpd2FTY2hlbWUubmlsKSkpLCBCaXdhU2NoZW1lLm5pbCkpOwogIH0pOwoKICAvLyAoZm9yY2UgcHJvbWlzZSkKICB2YXIgZm9yY2UgPSBmdW5jdGlvbihwcm9taXNlKSB7CiAgICBpZiAocHJvbWlzZS5pc19kb25lKCkpIHsKICAgICAgcmV0dXJuIHByb21pc2UudmFsdWUoKTsKICAgIH0KICAgIHJldHVybiBuZXcgQ2FsbChwcm9taXNlLnRodW5rKCksIFtdLCBmdW5jdGlvbihhcikgewogICAgICBhc3NlcnRfcHJvbWlzZShhclswXSk7CiAgICAgIHZhciBuZXdfcHJvbWlzZSA9IGFyWzBdOwogICAgICBpZiAocHJvbWlzZS5pc19kb25lKCkpIHsgIC8vIHJlZW50cmFudCEKICAgICAgICByZXR1cm4gcHJvbWlzZS52YWx1ZSgpOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIHByb21pc2UudXBkYXRlX3dpdGgobmV3X3Byb21pc2UpOwogICAgICAgIHJldHVybiBmb3JjZShuZXdfcHJvbWlzZSk7CiAgICAgIH0KICAgIH0pOwogIH07CiAgZGVmaW5lX2xpYmZ1bmMoImZvcmNlIiwgMSwgMSwgZnVuY3Rpb24oYXIsIGludHApewogICAgYXNzZXJ0X3Byb21pc2UoYXJbMF0pOwogICAgcmV0dXJuIGZvcmNlKGFyWzBdKTsKICB9KTsKCiAgLy8gKHByb21pc2U/IG9iaikKICBkZWZpbmVfbGliZnVuYygicHJvbWlzZT8iLCAxLCAxLCBmdW5jdGlvbihhciwgaW50cCl7CiAgICByZXR1cm4gKGFyWzBdIGluc3RhbmNlb2YgQml3YVNjaGVtZS5Qcm9taXNlKTsKICB9KTsKCiAgLy8gKG1ha2UtcHJvbWlzZSBvYmopCiAgZGVmaW5lX2xpYmZ1bmMoIm1ha2UtcHJvbWlzZSIsIDEsIDEsIGZ1bmN0aW9uKGFyLCBpbnRwKXsKICAgIHZhciBvYmogPSBhclswXTsKICAgIGlmIChvYmogaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlByb21pc2UpIHsKICAgICAgcmV0dXJuIG9iajsKICAgIH0KICAgIGVsc2UgewogICAgICByZXR1cm4gQml3YVNjaGVtZS5Qcm9taXNlLmRvbmUob2JqKTsKICAgIH0KICB9KTsKCiAgLy8gaW50ZXJuYWwgZnVuY3Rpb24KICAvLyAoIHByb2NlZHVyZS0+cHJvbWlzZSBwcm9jKQogIC8vIHByb2MgbXVzdCBiZSBhIHByb2NlZHVyZSB3aXRoIG5vIGFyZ3VtZW50IGFuZCByZXR1cm4gYSBwcm9taXNlCiAgZGVmaW5lX2xpYmZ1bmMoIiBwcm9jZWR1cmUtPnByb21pc2UiLCAxLCAxLCBmdW5jdGlvbihhciwgaW50cCl7CiAgICBhc3NlcnRfcHJvY2VkdXJlKGFyWzBdKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLlByb21pc2UuZnJlc2goYXJbMF0pOwogIH0pOwp9Cg==","root/biwascheme/library/js_interface.js":"","root/biwascheme/library/extra_lib.js":"","root/biwascheme/library/node_functions.js":"Ly8KLy8gTGlicmFyeSBmdW5jdGlvbnMgb25seSB3b3JrIG9uIE5vZGUuanMKLy8gc2VlIGFsc286IHRlc3Qvbm9kZV9mdW5jdGlvbnMuanMKLy8KCihmdW5jdGlvbigpewogIGlmKEJpd2FTY2hlbWUub25fbm9kZSl7CiAgICB2YXIgbm9kZSA9IHsKICAgICAgZnM6IHJlcXVpcmUoJ2ZzJyksCiAgICAgIHBhdGg6IHJlcXVpcmUoJ3BhdGgnKSwKICAgICAgcHJvY2VzczogcHJvY2VzcwogICAgfTsKICB9CgogIC8vIERlZmluZXMgbGlicmFyeSBmdW5jdGlvbnMgd2hpY2ggb25seSB3b3JrcyBvbiBOb2RlLgogIC8vIC0gT24gTm9kZTogc2FtZSBhcyBkZWZpbmVfbGliZnVuYwogIC8vIC0gT24gQnJvd3NlcjogZGVmaW5lcyBhIHN0dWIgbGliZnVuYyB3aGljaCBqdXN0IHJhaXNlcyBFcnJvcgogIHZhciBkZWZpbmVfbm9kZV9saWJmdW5jID0gZnVuY3Rpb24oLyphcmd1bWVudHMqLyl7CiAgICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpOwoKICAgIGlmKEJpd2FTY2hlbWUub25fbm9kZSl7CiAgICAgIEJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMuYXBwbHkobnVsbCwgYXJncyk7CiAgICB9CiAgICBlbHNlewogICAgICB2YXIgZnVuY19uYW1lID0gYXJnc1swXTsKICAgICAgdmFyIGZ1bmMgPSBmdW5jdGlvbihhcil7CiAgICAgICAgdGhyb3cgbmV3IEJpd2FTY2hlbWUuRXJyb3IoInRoZSBmdW5jdGlvbiAnIitmdW5jX25hbWUrIicgIisKICAgICAgICAgICJpcyBub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyICIrCiAgICAgICAgICAiKHdvcmtzIG9ubHkgb24gTm9kZS5qcykuIik7CiAgICAgIH07CiAgICAgIGFyZ3MucG9wKCk7CiAgICAgIGFyZ3MucHVzaChmdW5jKTsKICAgICAgQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYy5hcHBseShudWxsLCBhcmdzKTsKICAgIH0KICB9OwoKICAvLwogIC8vIENoYXB0ZXIgOSBGaWxlIFN5c3RlbQogIC8vCgogIC8vKGZpbGUtZXhpc3RzPyBmaWxlbmFtZSkgICAgcHJvY2VkdXJlIAogIGRlZmluZV9ub2RlX2xpYmZ1bmMoImZpbGUtZXhpc3RzPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIEJpd2FTY2hlbWUuYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICByZXR1cm4gbm9kZS5mcy5leGlzdHNTeW5jKGFyWzBdKTsKICB9KTsKCiAgLy8oZGVsZXRlLWZpbGUgZmlsZW5hbWUpICAgIHByb2NlZHVyZSAKICBkZWZpbmVfbm9kZV9saWJmdW5jKCJkZWxldGUtZmlsZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIEJpd2FTY2hlbWUuYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICBub2RlLmZzLnVubGlua1N5bmMoYXJbMF0pOwogICAgcmV0dXJuIEJpd2FTY2hlbWUudW5kZWY7CiAgfSk7CgogIC8vCiAgLy8gQ2hhcHRlciAxMCBDb21tYW5kLWxpbmUgYWNjZXNzIGFuZCBleGl0IHZhbHVlcwogIC8vCiAgCiAgLy8oY29tbWFuZC1saW5lKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbm9kZV9saWJmdW5jKCJjb21tYW5kLWxpbmUiLCAwLCAwLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5MaXN0LmFwcGx5KG51bGwsIG5vZGUucHJvY2Vzcy5hcmd2KTsKICB9KTsKCiAgLy8oZXhpdCkgICAgcHJvY2VkdXJlIAogIC8vKGV4aXQgb2JqKSAgICBwcm9jZWR1cmUKICBkZWZpbmVfbm9kZV9saWJmdW5jKCJleGl0IiwgMCwgMSwgZnVuY3Rpb24oYXIpewogICAgdmFyIG9iaiA9IGFyWzBdOwogICAgdmFyIGNvZGUgPSBfLmlzVW5kZWZpbmVkKG9iaikgPyAwIDoKICAgICAgICAgICAgICAgKG9iaiA9PT0gZmFsc2UpICAgID8gMSA6CiAgICAgICAgICAgICAgIE51bWJlcihvYmopOwoKICAgIG5vZGUucHJvY2Vzcy5leGl0KGNvZGUpOwogIH0pOwoKICAvLwogIC8vIHNyZmktOTggKGdldC1lbnZpcm9ubWVudC12YXJpYWJsZSkKICAvLwoKICAvLyAoZ2V0LWVudmlyb25tZW50LXZhcmlhYmxlIG5hbWUpIC0+IHN0cmluZyBvciAjZgogIGRlZmluZV9ub2RlX2xpYmZ1bmMoImdldC1lbnZpcm9ubWVudC12YXJpYWJsZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAgIEJpd2FTY2hlbWUuYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICB2YXIgdmFsID0gbm9kZS5wcm9jZXNzLmVudlthclswXV07CiAgICByZXR1cm4gXy5pc1VuZGVmaW5lZCh2YWwpID8gZmFsc2UgOiB2YWw7CiAgfSk7CgogIC8vIChnZXQtZW52aXJvbm1lbnQtdmFyaWFibGVzKSAtPiBhbGlzdCBvZiBzdHJpbmcgKCgia2V5IiAuICJ2YWx1ZSIpKQogIGRlZmluZV9ub2RlX2xpYmZ1bmMoImdldC1lbnZpcm9ubWVudC12YXJpYWJsZXMiLCAwLCAwLCBmdW5jdGlvbihhcil7CiAgICByZXR1cm4gQml3YVNjaGVtZS5qc19vYmpfdG9fYWxpc3Qobm9kZS5wcm9jZXNzLmVudik7CiAgfSk7Cgp9KSgpOwo=","root/biwascheme/library/srfi.js":"","root/biwascheme/library/webscheme_lib.js":"","root/biwascheme/platforms/browser/dumper.js":"","root/biwascheme/platforms/browser/console.js":"Q29uc29sZSA9IHt9CgpCaXdhU2NoZW1lLlBvcnQuY3VycmVudF9lcnJvciA9CkJpd2FTY2hlbWUuUG9ydC5jdXJyZW50X291dHB1dCA9IG5ldyBCaXdhU2NoZW1lLlBvcnQuQ3VzdG9tT3V0cHV0KAogIGZ1bmN0aW9uIChzdHIpIHsKICAgIHZhciBjb25zb2xlOwogICAgdmFyIHRleHQ7CiAgICBjb25zb2xlID0gJCgiI2JzLWNvbnNvbGUiKTsKICAgIGlmIChjb25zb2xlWzBdKSB7CiAgICAJdGV4dCA9IF8uZXNjYXBlKHN0cik7CiAgICAJdmFyIHNwYW4gPSAkKCI8c3Bhbj4iKTsKICAgIAlzcGFuLmh0bWwodGV4dC5yZXBsYWNlKC9cbi9nLCI8YnI+IikucmVwbGFjZSgvIC9nLCImbmJzcDsiKSk7CiAgICAJY29uc29sZS5hcHBlbmQoc3Bhbik7CiAgICB9CiAgfQopOwoKQml3YVNjaGVtZS5Qb3J0LmN1cnJlbnRfaW5wdXQgPSBuZXcgQml3YVNjaGVtZS5Qb3J0LkN1c3RvbUlucHV0KAogIGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgdmFyIGZvcm0gPSAkKCI8Zm9ybS8+Iik7CiAgICBmb3JtLmh0bWwoIjxpbnB1dCBpZD0nd2Vic2NoZW1lLXJlYWQtbGluZScgdHlwZT0ndGV4dCc+PGlucHV0IHR5cGU9J3N1Ym1pdCcgdmFsdWU9J29rJz4iKTsKICAgICQoIiNicy1jb25zb2xlIikuYXBwZW5kKGZvcm0pOwogICAgZm9ybS5zdWJtaXQoZnVuY3Rpb24oKXsKICAgICAgdmFyIGlucHV0ID0gJCgiI3dlYnNjaGVtZS1yZWFkLWxpbmUiKS52YWwoKTsKICAgICAgZm9ybS5yZW1vdmUoKTsKICAgICAgY2FsbGJhY2soaW5wdXQpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9KTsKICB9Cik7CgoKQ29uc29sZS5wdXRzID0gZnVuY3Rpb24oc3RyLCBub19uZXdsaW5lKSB7CiAgQml3YVNjaGVtZS5Qb3J0LmN1cnJlbnRfb3V0cHV0LnB1dF9zdHJpbmcoc3RyICsgKG5vX25ld2xpbmUgPyAiIiA6ICJcbiIpKQp9OwoKQ29uc29sZS5wID0gZnVuY3Rpb24gKC8qQVJHUyovKXsKICBCaXdhU2NoZW1lLlBvcnQuY3VycmVudF9vdXRwdXQucHV0X3N0cmluZygKICAgICJwPiAiK18ubWFwKF8udG9BcnJheShhcmd1bWVudHMpLCBCaXdhU2NoZW1lLmluc3BlY3QpLmpvaW4oIiAiKQogICk7Cn07Cg==","root/biwascheme/platforms/browser/release_initializer.js":"Ly8KLy8gcmVsZWFzZV9pbml0aWFsaXplci5qcyAtIHJlYWQgdXNlcidzIHByb2dyYW0gYW5kIGV2YWwgaXQgKGlmIGl0IGV4aXN0cykKLy8KLy8gVGhpcyBmaWxlIGlzIHB1dCBvbiB0aGUgZW5kIHRoZSBsaWIvYml3YXNjaGVtZS5qcy4KLy8KKGZ1bmN0aW9uKCl7IC8vbG9jYWwgbmFtZXNwYWNlCiAgdmFyIGR1bXBlciA9IG51bGw7CiAgaWYgKCQoIiNiaXdhc2NoZW1lLWRlYnVnZ2VyIilbMF0pIHsKICAgIGR1bXBlciA9IG5ldyBCaXdhU2NoZW1lLkR1bXBlcigkKCIjYml3YXNjaGVtZS1kZWJ1Z2dlciIpWzBdKTsKICB9CgogIC8vIEVycm9yIGhhbmRsZXIgKHNob3cgbWVzc2FnZSB0byBjb25zb2xlIGRpdikKICB2YXIgb25FcnJvciA9IGZ1bmN0aW9uKGUsIHN0YXRlKXsKICAgIEJpd2FTY2hlbWUuUG9ydC5jdXJyZW50X2Vycm9yLnB1dF9zdHJpbmcoZS5tZXNzYWdlICsgIlxuIik7CiAgICBpZiAoZHVtcGVyKSB7CiAgICAgIGR1bXBlci5kdW1wKHN0YXRlKTsKICAgICAgZHVtcGVyLmR1bXBfbW92ZSgxKTsKICAgIH0gZWxzZSBpZiAodHlwZW9mKGNvbnNvbGUpICE9PSAidW5kZWZpbmVkIiAmJiBjb25zb2xlLmVycm9yKSB7CiAgICAgIGNvbnNvbGUuZXJyb3IoZS5tZXNzYWdlKTsKICAgIH0gZWxzZSB7CiAgICAgIHRocm93KGUpOwogICAgfQogIH07CgogIHZhciBydW4gPSBmdW5jdGlvbihzY3JpcHQpIHsKICAgIHZhciBpbnRwID0gbmV3IEJpd2FTY2hlbWUuSW50ZXJwcmV0ZXIob25FcnJvcik7CiAgICB0cnl7CiAgICAgIGludHAuZXZhbHVhdGUoc2NyaXB0LCBmdW5jdGlvbigpe30pOwogICAgfQogICAgY2F0Y2goZSl7CiAgICAgIG9uRXJyb3IoZSk7CiAgICB9CiAgfTsKCiAgLy8gU3RhcnQgdXNlcidzIHByb2dyYW0gKG9sZCBzdHlsZSkKICB2YXIgc2NyaXB0ID0gJCgic2NyaXB0W3NyYyQ9J2Jpd2FzY2hlbWUuanMnXSIpLmh0bWwoKSB8fAogICAgICAgICAgICAgICAkKCJzY3JpcHRbc3JjJD0nYml3YXNjaGVtZS1taW4uanMnXSIpLmh0bWwoKTsKICBpZiAoc2NyaXB0KSBydW4oc2NyaXB0KTsKCiAgLy8gU3RhcnQgdXNlcidzIHByb2dyYW0gKG5ldyBzdHlsZSkKICAkKGZ1bmN0aW9uKCl7CiAgICAkKCJzY3JpcHRbdHlwZT0ndGV4dC9iaXdhc2NoZW1lJ10iKS5lYWNoKGZ1bmN0aW9uKCl7CiAgICAgIHJ1bigkKHRoaXMpLmh0bWwoKSk7CiAgICB9KTsKICB9KTsKfSkoKTsK","root/system-extensions.js":"Ly8gc3lzdGVtLWV4dGVuc2lvbnMuanMuCi8vIHN5c3RlbS1yZWxhdGVkIGV4dGVuc2lvbiBwcm9jZWR1cmVzIGZvciBCaXdhU2NoZW1lCi8vIENvcHlyaWdodCAyMDE4LTIwMTkgYnkgQW50aG9ueSBXLiBIdXJzaAovLyBNSVQgTGljZW5zZS4KCi8vIEtlZXAgdHJhY2sgb2Yga2V5cHJlc3Nlcy4KdmFyIGtleXMgPSB7fTsKd2luZG93Lm9ua2V5dXAgPSBmdW5jdGlvbihlKSB7IGtleXNbZS5rZXlDb2RlXSA9IGZhbHNlOyB9CndpbmRvdy5vbmtleWRvd24gPSBmdW5jdGlvbihlKSB7IGtleXNbZS5rZXlDb2RlXSA9IHRydWU7IH0KCgovLyBUcnkgdG8gcHJldmVudCBhbiBhY2NpZGVudGFsIGNsb3NlIHdpdGggdW5zYXZlZCBkYXRhLgogIGNvbnNvbGUubG9nKCJTZXR0aW5nIGJlZm9yZXVubG9hZCBoYW5kbGVyIikKCiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uIChlKSB7CiAgbGV0IHN5c3RlbV9kaXJ0eSA9IHNjaGVtZV9pbnRlcnByZXRlci5pbnZva2VfY2xvc3VyZShCaXdhU2NoZW1lLlRvcEVudlsiaXMtc3lzdGVtLWRpcnR5PyJdLCBbXSk7CiBpZihzeXN0ZW1fZGlydHkgPT09IHRydWUpewogICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgZS5yZXR1cm5WYWx1ZSA9ICdUaGlzIGFwcCBtYXkgaGF2ZSB1bnNhdmVkIGRhdGEuIEFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBsZWF2ZT8nOwogIH0KICBlbHNlIHsKICAgIGRlbGV0ZSBlWydyZXR1cm5WYWx1ZSddOwogIH0KfSk7CgoKRnJvbmtlbnN0ZWVuLmlzUHJvY2VkdXJlID0gZnVuY3Rpb24oZW52SXRlbSl7CiAgaWYodHlwZW9mIGVudkl0ZW0gPT09ICJmdW5jdGlvbiIpewogICAgcmV0dXJuIHRydWU7CiAgfQogIGlmKEFycmF5LmlzQXJyYXkoZW52SXRlbSkgJiYgQXJyYXkuaXNBcnJheShlbnZJdGVtWzBdKSAmJiBlbnZJdGVtWzBdWzBdID09PSAiZnJhbWUiKXsKICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gZmFsc2U7Cn0KCkJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMoImNsZWFyLWN1bXVsYXRpdmUtZXJyb3JzIiwgMCwgMCwgZnVuY3Rpb24oYXIpewogIC8vIENsZWFycyB0aGUgZXJyb3IgYWNjdW11bGF0b3IuCiAgRnJvbmtlbnN0ZWVuLkN1bXVsYXRpdmVFcnJvcnMgPSBbXTsKCn0pOwoKQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYygiY3VtdWxhdGl2ZS1lcnJvcnMiLCAwLCAwLCBmdW5jdGlvbihhcil7CiAgLy8gUmV0dXJucyB0cnVlIGlmIGFyWzBdIGlzIGFuIGFsaXN0LCBmYWxzZSBpZiBub3QuCiAgcmV0dXJuIEZyb25rZW5zdGVlbi5DdW11bGF0aXZlRXJyb3JzLmpvaW4oIlxuIik7Cn0pOwoKCkJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMoImV2YWwtc2NoZW1lLXN0cmluZyIsIDEsMSwgZnVuY3Rpb24oYXIpewogIEZyb25rZW5zdGVlbi5DdW11bGF0aXZlRXJyb3JzID0gW107CiAgQml3YVNjaGVtZS5hc3NlcnRfc3RyaW5nKGFyWzBdKTsKICByZXN1bHQgPSBzY2hlbWVfaW50ZXJwcmV0ZXIuZXZhbHVhdGUoYXJbMF0pICsgRnJvbmtlbnN0ZWVuLkN1bXVsYXRpdmVFcnJvcnMuam9pbigiXG4iKTsKICBGcm9ua2Vuc3RlZW4uQ3VtdWxhdGl2ZUVycm9ycyA9IFtdOwogIHJldHVybiByZXN1bHQ7Cn0pOwoKQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYygiaXMtYWxpc3Q/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogIC8vIFJldHVybnMgdHJ1ZSBpZiBhclswXSBpcyBhbiBhbGlzdCwgZmFsc2UgaWYgbm90LgogIHJldHVybiBCaXdhU2NoZW1lLmlzQWxpc3QoYXJbMF0pOwp9KTsKCkJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMoImlzLWRvdHRlZC1wYWlyPyIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAvLyBSZXR1cm5zIHRydWUgaWYgYXJbMF0gaXMgYSBkb3R0ZWQgcGFpciwgZmFsc2UgaWYgbm90LgogIHJldHVybiBCaXdhU2NoZW1lLmlzRG90dGVkUGFpcihhclswXSk7Cn0pOwoKQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYygiaXMtcHJvY2VkdXJlLWRlZmluZWQ/IiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAgLy8gUmV0dXJucyAjdCBpZiBwcm9jZWR1cmUgbmFtZWQgYXJbMF0gaXMgZGVmaW5lZCwgI2Ygb3RoZXJ3aXNlLgogICAgQml3YVNjaGVtZS5hc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIHJldHVybiBCaXdhU2NoZW1lLmlzX3Byb2NlZHVyZV9kZWZpbmVkKGFyWzBdKQp9KTsKCkJpd2FTY2hlbWUuaXNBbGlzdCA9IGZ1bmN0aW9uKGNhbmRpZGF0ZSl7CiAgaWYoY2FuZGlkYXRlID09PSBCaXdhU2NoZW1lLm5pbCl7CiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgaWYoQml3YVNjaGVtZS5pc0xpc3QoY2FuZGlkYXRlKSA9PT0gZmFsc2UpewogICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZihCaXdhU2NoZW1lLmlzRG90dGVkUGFpcihjYW5kaWRhdGUuY2FyKSA9PT0gdHJ1ZSl7CiAgICByZXR1cm4gQml3YVNjaGVtZS5pc0FsaXN0KGNhbmRpZGF0ZS5jZHIpOwogIH0KICBlbHNlewogICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKQml3YVNjaGVtZS5pc0RvdHRlZFBhaXIgPSBmdW5jdGlvbihjYW5kaWRhdGUpewogIC8vIElmIG5vdCBhIGxpc3QsIGJ1dCBpcyBhIHBhaXIsIGlzIGEgZG90dGVkIHBhaXIuCiAgaWYoKChjYW5kaWRhdGUgaW5zdGFuY2VvZiBCaXdhU2NoZW1lLlBhaXIpID09PSB0cnVlKQogICAgJiYgKEJpd2FTY2hlbWUuaXNMaXN0KGNhbmRpZGF0ZSkgPT09IGZhbHNlKSl7CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogICAgcmV0dXJuIGZhbHNlOwp9CgoKCkJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMoInByb21wdCIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAvLyBEaXNwbGF5IGEgSmF2YXNjcmlwdCBpbnB1dCBwcm9tcHQgd2l0aCB0aGUgdGV4dCBpbgogIC8vIGFyWzBdLiBOZWl0aGVyIHByb21wdCBub3IgY29uZmlybSB3b3JrIGluIEVsZWN0cm9uLCBzYWRseSwKICAvLyB0aG91Z2ggYWxlcnQgZG9lcy4KICAgIEJpd2FTY2hlbWUuYXNzZXJ0X3N0cmluZyhhclswXSk7CiAgICByZXR1cm4gcHJvbXB0KGFyWzBdKTsKfSk7CgpCaXdhU2NoZW1lLmRlZmluZV9saWJmdW5jKCJyZWxvYWQiLDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAvLyBSZWxvYWQgdGhlIGN1cnJlbnQgcGFnZS4KICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTsKfSk7CgpCaXdhU2NoZW1lLmRlZmluZV9saWJmdW5jKCJqcy1iaXdhLWV2YWx1YXRlIiwgMSwgMSwgZnVuY3Rpb24oYXIpewogICAvLyBFdmFsdWF0ZSBhIFNjaGVtZSBleHByZXNzaW9uIGluIHRoZSBiYXNlIGludGVycHJldGVyLgogICAgQml3YVNjaGVtZS5hc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIHZhciByZXN1bHQgPSBzY2hlbWVfaW50ZXJwcmV0ZXIuZXZhbHVhdGUoYXJbMF0pOwogICAgdmFyIHJlc3VsdHN0cmluZzsKICAgIGlmKHJlc3VsdCA9PT0gdW5kZWZpbmVkKXsKICAgICAgICByZXR1cm4gIiM8dW5kZWY+IgogICAgfQogICAgZWxzZXsKICAgICAgICByZXR1cm4gcmVzdWx0LnRvU3RyaW5nKCk7CiAgICB9Cn0pOwoKCkJpd2FTY2hlbWUuZGVmaW5lX2xpYmZ1bmMoInJlcGwtaGVyZSIsIDEsIDEsIGZ1bmN0aW9uKGFyKXsKICAvLyBUYWtlcyBhIHN0cmluZyB3aGljaCBtYXkgY29udGFpbiBvdXIgZW1iZWRkZWQgcHNldWRvLWhlcmUgZG9jdW1lbnQKICAvLyBzeW50YXgsIGFuZCByZXR1cm4gaXQgd2l0aCBwcm9wZXIgcXVvdGVzIHN1YnN0aXR1dGVkIGluLgogICAgQml3YVNjaGVtZS5hc3NlcnRfc3RyaW5nKGFyWzBdKTsKICAgIHJldHVybiBGcm9ua2Vuc3RlZW4ucmVuZGVyUkVQTFRlbXBsYXRlKGFyWzBdKQp9KTsKCgoKICBCaXdhU2NoZW1lLmRlZmluZV9saWJmdW5jKCJzdHJpbmctcmVhZGVyIiwxLDEsIGZ1bmN0aW9uKGFyKXsKICAgIC8vIFdvcmthcm91bmQgZm9yIGEgYnVnIGluIHRoZSBCaXdhU2NoZW1lIHJlYWQgcHJvY2VkdXJlLgogICAgdmFyIHBhcnNlciA9IG5ldyBCaXdhU2NoZW1lLlBhcnNlcihhclswXSk7CiAgICByZXR1cm4gcGFyc2VyOwogIH0pOwoKICBCaXdhU2NoZW1lLmRlZmluZV9saWJmdW5jKCJzdHJpbmctcmVhZGVyLXJlYWQiLDEsMSwgZnVuY3Rpb24oYXIpewogICAgLy8gV29ya2Fyb3VuZCBmb3IgYSBidWcgaW4gdGhlIEJpd2FTY2hlbWUgcmVhZCBwcm9jZWR1cmUuCiAgICB2YXIgciA9IGFyWzBdLmdldE9iamVjdCgpOwogICAgcmV0dXJuIChyID09IEJpd2FTY2hlbWUuUGFyc2VyLkVPUyk/IEJpd2FTY2hlbWUuZW9mOiByOwogIH0pOwoKCiAgLy8gRGV0ZXJtaW5lcyBpZiBzb21ldGhpbmcgaXMgZGVmaW5lZCBvciBub3QuIFVzZWQgYnkgdGhlCiAgLy8gVUkgd2lyaW5nIGNvZGUuCiAgQml3YVNjaGVtZS5pc19wcm9jZWR1cmVfZGVmaW5lZCA9IGZ1bmN0aW9uKG5hbWUpewogICAgaWYoKEJpd2FTY2hlbWUuVG9wRW52Lmhhc093blByb3BlcnR5KG5hbWUpID09PSB0cnVlKSB8fAogICAgICAgIChCaXdhU2NoZW1lLkNvcmVFbnYuaGFzT3duUHJvcGVydHkobmFtZSkgPT09IHRydWUpKXsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmYWxzZTsKICB9CgoKCgogIEZyb25rZW5zdGVlbi5jdXJyZW50Qml3YVNjaGVtZUxvYWRGaWxlID0gbnVsbDsKICBGcm9ua2Vuc3RlZW4ub25CaXdhU2NoZW1lRXJyb3IgPSBmdW5jdGlvbihlKXsKICAgIGxldCBlcnJvcnN0cmluZyA9ICIiICsgZTsKICAgIGlmKEZyb25rZW5zdGVlbi5jdXJyZW50Qml3YVNjaGVtZUxvYWRGaWxlICE9PSBudWxsKXsKICAgICAgZXJyb3JzdHJpbmcgPSAiRXJyb3IgaW4gIiArIEZyb25rZW5zdGVlbi5jdXJyZW50Qml3YVNjaGVtZUxvYWRGaWxlICsgIjoiICsgZXJyb3JzdHJpbmc7CiAgICB9CiAgICBjb25zb2xlLmxvZygib25CaXdhU2NoZW1lRXJyb3I6ICIgKyBlcnJvcnN0cmluZyk7CiAgICBGcm9ua2Vuc3RlZW4uQ3VtdWxhdGl2ZUVycm9ycy5wdXNoKGVycm9yc3RyaW5nKTsKICB9CgoKICBmdW5jdGlvbiBkZWJvdW5jZXIoZnVuYyAsIHRpbWVvdXQpIHsKICAgICB2YXIgdGltZW91dElEICwgdGltZW91dCA9IHRpbWVvdXQgfHwgMjAwOwogICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHNjb3BlID0gdGhpcyAsIGFyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgY2xlYXJUaW1lb3V0KCB0aW1lb3V0SUQgKTsKICAgICAgICB0aW1lb3V0SUQgPSBzZXRUaW1lb3V0KCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZ1bmMuYXBwbHkoIHNjb3BlICwgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoIGFyZ3MgKSApOwogICAgICAgIH0gLCB0aW1lb3V0ICk7CiAgICAgfQogIH0KCiAgICAkKHdpbmRvdykucmVzaXplKGRlYm91bmNlcihmdW5jdGlvbiAoZSl7CiAgICAgICAgcmVzaXplQ29tcG9uZW50cygpOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIHJlc2l6ZUNvbXBvbmVudHMoKXsKCiAgICB9Cg==","root/fronkensteen_template.html":"PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8IS0tIEZyb25rZW5zdGVlbiBCYXNlIFRlbXBsYXRlLiBDb3B5cmlnaHQgMjAxOS0yMDIwIGJ5IEFudGhvbnkgVy4gSHVyc2guIE1JVCBMaWNlbnNlLiAtLT4KICA8aGVhZD4KICAgIDxtZXRhIGNoYXJzZXQ9IlVURi04Ij4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IkNhY2hlLUNvbnRyb2wiIGNvbnRlbnQ9Im5vLWNhY2hlLCBuby1zdG9yZSwgbXVzdC1yZXZhbGlkYXRlIj4KICAgIDxtZXRhIGh0dHAtZXF1aXY9IlByYWdtYSIgY29udGVudD0ibm8tY2FjaGUiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iRXhwaXJlcyIgY29udGVudD0iMCI+CiAgICA8bWV0YSBuYW1lPSJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIiBjb250ZW50PSJ5ZXMiPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSIgY29udGVudD0iYmxhY2siPgogICAgPG1ldGEgbmFtZT0iYXBwbGUtbW9iaWxlLXdlYi1hcHAtdGl0bGUiIGNvbnRlbnQ9IkZyb25rZW5zdGVlbiI+CiAgICA8bm9zY3JpcHQ+U29ycnksIEZyb25rZW5zdGVlbiB3aWxsIG5vdCB3b3JrIHdpdGhvdXQgSmF2YVNjcmlwdCBlbmFibGVkLjwvbm9zY3JpcHQ+CiAgICA8dGl0bGU+RnJvbmtlbnN0ZWVuPC90aXRsZT4KICAgIDxzdHlsZT4KICAgIGJvZHkge2JhY2tncm91bmQtY29sb3I6ICNmZmZmZjh9CiAgICA8L3N0eWxlPgogIDwvaGVhZD4KICA8Ym9keT4KICA8ZGl2IGlkPSJmcm9ua2Vuc3RlZW4td3JhcHBlciI+CiAgPC9kaXY+CiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgokJCRGSUxFU1lTVEVNJCQkCiAgPC9zY3JpcHQ+CiAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoKCiAgLy8gQmFyZS1ib25lcyBvYmplY3QuCiAgLy8gRnVuY3Rpb25zIGFuZCBkYXRhIGZpZWxkcyBhcmUgYWRkZWQgdG8gdGhpcyBvYmplY3QgYnkgdGhlIHZhcmlvdXMgYmFsZSBleHRlbnNpb25zLgogIGxldCBGcm9ua2Vuc3RlZW4gPSB7CiAgICBDdW11bGF0aXZlRXJyb3JzOltdCiAgfTsKCgogICBmdW5jdGlvbiBnZXRGcm9ua2Vuc3RlZW5Mb2dvKCl7CiAgICBsZXQgbWltZXR5cGUgPSAiaW1hZ2UvcG5nIjsKICAgIGxldCBmaWxlbmFtZSA9ICJyb290L2Zyb25rZW5zdGVlbmxvZ28ucG5nIgogICAgaWYoZnJvbmtlbnN0ZWVuX2ZzW2ZpbGVuYW1lXSAhPT0gdW5kZWZpbmVkKXsKICAgICAgcmV0dXJuICdkYXRhOicgKyBtaW1ldHlwZSArICc7YmFzZTY0LCcgKyBmcm9ua2Vuc3RlZW5fZnNbZmlsZW5hbWVdOwogICAgfQogICAgcmV0dXJuICIiOwogIH0KICBmdW5jdGlvbiBvcGVuQXNBcHAoKSB7CiAgICBsZXQgYXBwV2luZG93RmVhdHVyZXMgPSAibWVudWJhcj1ubyxsb2NhdGlvbj1ubyxyZXNpemFibGU9eWVzLHNjcm9sbGJhcnM9eWVzLHN0YXR1cz1ubyx3aWR0aD0iICsgd2luZG93LndpZHRoICsgIixoZWlnaHQ9IiArIHdpbmRvdy5oZWlnaHQ7CiAgICBsZXQgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICBsZXQgYXBwd2luZG93ID0gd2luZG93Lm9wZW4odXJsLCAiRnJvbmtlbnN0ZWVuIiwgYXBwV2luZG93RmVhdHVyZXMpOwogICAgYXBwd2luZG93LmZvY3VzKCk7CiAgfQogIEZyb25rZW5zdGVlbi5pc19kZXZlbG9wbWVudF9lbnZpcm9ubWVudCA9IHRydWU7CiAgRnJvbmtlbnN0ZWVuLmlzX2RlYnVnX2Vudmlyb25tZW50ID0gdHJ1ZTsKCiAgRnJvbmtlbnN0ZWVuLmFkZENTUyA9IGZ1bmN0aW9uKGNvZGUpewogICAgbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnOwogICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoRnJvbmtlbnN0ZWVuLmRlY29kZVRleHQoY29kZSkpKTsKICAgIGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc3R5bGUpOwogIH0KICBGcm9ua2Vuc3RlZW4uYWRkSlMgPSBmdW5jdGlvbihmaWxlbmFtZSxjb2RlKXsKICAgbGV0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsKICAgIGxldCBqc0NvZGUgPSBGcm9ua2Vuc3RlZW4uZGVjb2RlVGV4dChjb2RlKTsKICAgIHNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShqc0NvZGUpKTsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKCiAgfQogIEZyb25rZW5zdGVlbi5leGVjdXRlX2JhbGUgPSBmdW5jdGlvbihmaWxlX21hbmlmZXN0KXsKICAgIGZvcih2YXIgaiA9IDA7IGogPCBmaWxlX21hbmlmZXN0Lmxlbmd0aDsgaisrKXsKICAgICAgbGV0IGZpbGVuYW1lID0gZmlsZV9tYW5pZmVzdFtqXTsKICAgICAgaWYoZmlsZW5hbWUubWF0Y2goL1wuc2NtJC8pICE9PSBudWxsKXsKICAgICAgICBzY2hlbWVfbGF1bmNoZXIucHVzaChmaWxlbmFtZSk7CiAgICAgIH0KICAgICAgaWYoZmlsZW5hbWUubWF0Y2goL1wuY3NzJC8pICE9PSBudWxsKXsKICAgICAgICBjb25zb2xlLmxvZygiQWRkaW5nIENTUzogIiArIGZpbGVuYW1lKTsKICAgICAgICBGcm9ua2Vuc3RlZW4uYWRkQ1NTKGZyb25rZW5zdGVlbl9mc1tmaWxlbmFtZV0pOwogICAgICB9CiAgICAgIGlmKGZpbGVuYW1lLm1hdGNoKC9cLmpzJC8pICE9PSBudWxsKXsKICAgICAgICBjb25zb2xlLmxvZygiQWRkaW5nIEpTOiAiICsgZmlsZW5hbWUpOwogICAgICAgIEZyb25rZW5zdGVlbi5hZGRKUyhmaWxlbmFtZSxmcm9ua2Vuc3RlZW5fZnNbZmlsZW5hbWVdKTsKICAgICAgfQogICAgfQogIH0KICBGcm9ua2Vuc3RlZW4uZXhlY3V0ZV9zY2hlbWVfcXVldWUgPSBmdW5jdGlvbigpewogICAgd2hpbGUoc2NoZW1lX2xhdW5jaGVyLmxlbmd0aCA+IDApewogICAgICBjb25zb2xlLmxvZygibG9hZGluZyAiICsgc2NoZW1lX2xhdW5jaGVyWzBdKQogICAgICBzY2hlbWVfaW50ZXJwcmV0ZXIuZXZhbHVhdGUoIihsb2FkIFwiIiArIHNjaGVtZV9sYXVuY2hlci5zaGlmdCgpICsgIlwiKSIpOwogICAgfQogICAgc2NoZW1lX2ludGVycHJldGVyLmV2YWx1YXRlKCIocmVidWlsZC1kb2N1bWVudGF0aW9uKSIpOwogICAgY29uc29sZS5sb2coRnJvbmtlbnN0ZWVuLkN1bXVsYXRpdmVFcnJvcnMuam9pbigiXG4iKSk7CiAgICBGcm9ua2Vuc3RlZW4uQ3VtdWxhdGl2ZUVycm9ycyA9IFtdOwogIH0KICBGcm9ua2Vuc3RlZW4uZGVjb2RlVGV4dCA9IGZ1bmN0aW9uKGNvZGUpewogICAgdmFyIGJ5dGVDaGFyYWN0ZXJzID0gYXRvYihjb2RlKTsKICAgIHZhciBhcnJheSA9IG5ldyBVaW50OEFycmF5KGJ5dGVDaGFyYWN0ZXJzLmxlbmd0aCk7CiAgICBmb3IoIHZhciBpID0gMDsgaSA8IGJ5dGVDaGFyYWN0ZXJzLmxlbmd0aDsgaSsrICkgeyBhcnJheVtpXSA9IGJ5dGVDaGFyYWN0ZXJzLmNoYXJDb2RlQXQoaSk7CiAgICB9CiAgICByZXR1cm4gbmV3IFRleHREZWNvZGVyKCJ1dGYtOCIpLmRlY29kZShhcnJheSk7CiAgfQogIGxldCBzY2hlbWVfbGF1bmNoZXIgPSBbXTsKICBsZXQgc2NoZW1lX2ludGVycHJldGVyID0gbnVsbDsKICBjb25zb2xlLmxvZygiTG9hZGVkLiIpCiAgZnVuY3Rpb24gcHJvbXB0Rm9ySG9tZVNjcmVlbkluc3RhbGwoKXsKICAgIC8vIEZ1bmN0aW9uYWxpdHkgZm9yIGxhdGVyLgogICAgLy9hbGVydCgiQWRkIHRvIEhvbWUgU2NyZWVuLiIpCiAgfQogIGZ1bmN0aW9uIGxhdW5jaFN5c3RlbSgpewogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZyb25rZW5zdGVlbi13cmFwcGVyIikuaW5uZXJIVE1MID0gIiIKICAgIGxldCBiYWxlX21hbmlmZXN0ID0gZnJvbmtlbnN0ZWVuX2ZzWyIkJEJBTEVNQU5JRkVTVCQkIl07CiAgICBmb3IodmFyIGkgPSAwOyBpIDwgYmFsZV9tYW5pZmVzdC5sZW5ndGg7IGkrKyl7CiAgICAgIGlmKGZyb25rZW5zdGVlbl9mc1tiYWxlX21hbmlmZXN0W2ldICsgIi8iICsgIiQkTE9BRF9CQUxFJCQiXSA9PT0gdHJ1ZSl7CiAgICAgICAgbGV0IGZpbGVfbWFuaWZlc3QgPSBmcm9ua2Vuc3RlZW5fZnNbYmFsZV9tYW5pZmVzdFtpXSArICIvIiArICIkJEZJTEVNQU5JRkVTVCQkIl07CiAgICAgICAgRnJvbmtlbnN0ZWVuLmV4ZWN1dGVfYmFsZShmaWxlX21hbmlmZXN0KTsKICAgICAgfQogICAgICBlbHNlIHsKICAgICAgICBjb25zb2xlLmxvZygiU2tpcHBpbmcgYmFsZTogIiArIGJhbGVfbWFuaWZlc3RbaV0pCiAgICAgIH0KICAgIH0KICAgIHNjaGVtZV9pbnRlcnByZXRlciA9IG5ldyBCaXdhU2NoZW1lLkludGVycHJldGVyKEZyb25rZW5zdGVlbi5vbkJpd2FTY2hlbWVFcnJvcikKICAgIHNjaGVtZV9pbnRlcnByZXRlci5ldmFsdWF0ZSgiKGRlZmluZSBiYXNlbG9hZCBsb2FkKSIpOwogICAgc2NoZW1lX2ludGVycHJldGVyLmV2YWx1YXRlKCIoZGVmaW5lIGxvYWQgaGVyZWxvYWQpIik7CiAgICBGcm9ua2Vuc3RlZW4uZXhlY3V0ZV9zY2hlbWVfcXVldWUoKTsKICAgIGNvbnN0IHVybFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMod2luZG93LmxvY2F0aW9uLnNlYXJjaCk7CiAgICBjb25zdCByZW1vdGUgPSB1cmxQYXJhbXMuZ2V0KCdyZW1vdGUnKTsKICAgIGlmKHJlbW90ZSAhPT0gbnVsbCl7CiAgICAgIGlmKEZyb25rZW5zdGVlbi5yZW1vdGVSRVBMICE9PSB1bmRlZmluZWQpewogICAgICAgIEZyb25rZW5zdGVlbi5yZW1vdGVSRVBMLmNvbm5lY3QodHJ1ZSxudWxsKTsKICAgICAgfQogICAgfQogIH0KICAvLyBTeXN0ZW0gbGF1bmNoZXIuCiAgLy8gQm9vdCB1cCB0aGUgYXBwIGZyb20gdGhlIGludGVybmFsIGZpbGVzeXN0ZW0gc3RvcmVkIGluIHRoZSBmcm9ua2Vuc3RlZW5fZnMgb2JqZWN0LgoKZnVuY3Rpb24gc2V0dXBBc0FwcCgpewogICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImZyb25rZW5zdGVlbi13cmFwcGVyIikuaW5uZXJIVE1MID0gIjxkaXY+PGltZyBzcmM9JyIgKyBnZXRGcm9ua2Vuc3RlZW5Mb2dvKCkgKyAiJy8+PGgxPkZyb25rZW5zdGVlbjwvaGk+PC9kaXY+PGRpdj48L2Rpdj48YnV0dG9uIG9uY2xpY2s9J29wZW5Bc0FwcCgpJz5PcGVuIGluIGEgU2VwYXJhdGUgQXBwIFdpbmRvdyAocmVjb21tZW5kZWQpPC9idXR0b24+PGJ1dHRvbiBvbmNsaWNrPSdsYXVuY2hTeXN0ZW0oKSc+T3BlbiBpbiB0aGUgQ3VycmVudCBCcm93c2VyIFdpbmRvdzwvYnV0dG9uPjwvZGl2PiI7Cgp9CmlmKHdpbmRvdy5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSAhPT0gdW5kZWZpbmVkKXsKICAvLyBpT1MsIG5vdCBhbHJlYWR5IGluc3RhbGxlZCB0byBob21lIHNjcmVlbi4KICBpZih3aW5kb3cubmF2aWdhdG9yLnN0YW5kYWxvbmUgPT09IGZhbHNlKXsKICAgIHByb21wdEZvckhvbWVTY3JlZW5JbnN0YWxsKCk7CiAgICBsYXVuY2hTeXN0ZW0oKQogIH0KICBlbHNlewogICAgbGF1bmNoU3lzdGVtKCk7CiAgfQp9CmVsc2UgewogaWYodG9vbGJhci52aXNpYmxlID09PSB0cnVlKXsKICBzZXR1cEFzQXBwKCkKICB9CiAgZWxzZSB7CiAgICBsYXVuY2hTeXN0ZW0oKTsKICB9Cn0KIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K","root/root-utilities.scm":"OyByb290LXV0aWxpdGllcy5zY20KOyBDb3B5cmlnaHQgMjAxOS0yMDIwIGJ5IEFudGhvbnkgVy4gSHVyc2gKOyBNSVQgbGljZW5zZS4KCihkZWZpbmUgPDwgc3RyaW5nLWFwcGVuZCk7IFNob3J0aGFuZCBwcm9jZWR1cmUgZm9yIHN0cmluZy1hcHBlbmQuIEZyb25rZW5zdGVlbiB1c2VzIHN0cmluZy1hcHBlbmQgYSBMT1QuIDotKQoKKGRlZmluZSBzeXN0ZW0tZGlydHk/ICNmKSA7IFNldCB0aGlzIHRvICN0IGFueSB0aW1lIGEgY2hhbmdlIGlzIG1hZGUgdG8gdGhlIHdvcmtzcGFjZS4gU2V0IGl0IHRvICNmIHdoZW4gdGhlIHdvcmtzcGFjZSBoYXMgYmVlbiBzYXZlZC4KCihkZWZpbmUgKHNldC1zeXN0ZW0tZGlydHkpCiAgKHNldCEgc3lzdGVtLWRpcnR5PyAjdCkpCgooZGVmaW5lIChzZXQtc3lzdGVtLWNsZWFuKQogIChzZXQhIHN5c3RlbS1kaXJ0eT8gI2YpKQoKKGRlZmluZSAoaXMtc3lzdGVtLWRpcnR5PykgOyBSZWRlZmluZSB0aGlzIGlmIG5lY2Vzc2FyeSB0byBkZXRlY3QgY3VzdG9tIGNvbmRpdGlvbnMgKGZvciBleGFtcGxlLCB1bnNhdmVkIGVkaXRvciBidWZmZXJzKS4KICAgIHN5c3RlbS1kaXJ0eT8pCgooZGVmaW5lIChwcm9tcHQtdG8tc2F2ZS11c2VyLWRhdGEpCiAgICAjdCkgOyBSZWRlZmluZSB0aGlzIGlmIG5lY2Vzc2FyeSB0byBwcm9tcHQgZm9yIHNhdmluZyBhbnkgdW5zYXZlZCB1c2VyIGRhdGEuCgooZGVmaW5lIGFjdGl2ZS1kb2N1bWVudC1sb2NhdGlvbiAod2luZG93LWxvY2F0aW9uLWhyZWYpKQoKKGRlZmluZSBhcHAtbmFtZSAiZnJvbmtlbnN0ZWVuIikKKGRlZmluZSBmdWxsLWFwcC1uYW1lICJGZWVkIE15IEZyb25rZW5zdGVlbiIpCgooZGVmaW5lIChzZXQtYXBwLW5hbWUgbmV3LWFwcC1uYW1lIG5ldy1mdWxsLWFwcC1uYW1lKQogIChzZXQhIGFwcC1uYW1lIG5ldy1hcHAtbmFtZSkKICAoc2V0ISBmdWxsLWFwcC1uYW1lIG5ldy1mdWxsLWFwcC1uYW1lKQogIChzZXQtZG9jdW1lbnQtdGl0bGUgbmV3LWZ1bGwtYXBwLW5hbWUpKQoKKGRlZmluZSAocmVsb2FkLXdvcmxkKQogICAgICAobmF2aWdhdGUtdXJsIGFjdGl2ZS1kb2N1bWVudC1sb2NhdGlvbikpCgooZGVmaW5lIChzYXZlLXRoZS1zdGF0aWMtd29ybGQpIDsgU2F2ZSB0aGUgY3VycmVudCBzdGF0aWMgY29udGVudCBvZiB0aGUgc3lzdGVtLiBDaGFuZ2VzIGRvbmUgd2l0aCB0aGUgaW50ZXJhY3RpdmUgUkVQTCBuZWVkIHRvIGJlIHNhdmVkIGJlZm9yZSB0aGV5IHdpbGwgdGFrZSBlZmZlY3QuCiAgKGxldCAoKGFwcC1maWxlLW5hbWUgKDw8IGFwcC1uYW1lIChudW1lcmljLXRpbWUtc3RhbXApICIuaHRtbCIpKSkKICAoZG93bmxvYWQtZmlsZSBhcHAtZmlsZS1uYW1lIChjbG9uZS13b3Jrc3BhY2UpICJ0ZXh0L2h0bWwiKQogIChzZXQhIGFjdGl2ZS1kb2N1bWVudC1sb2NhdGlvbiAoPDwgKGZpbGUtcGF0aCAod2luZG93LWxvY2F0aW9uLXBhdGhuYW1lKSkgIi8iIGFwcC1maWxlLW5hbWUpKQogIChzZXQtc3lzdGVtLWNsZWFuKSkpCgoKKGRlZmluZSAoY2xvbmUtd29ya3NwYWNlKQogIChwcm9tcHQtdG8tc2F2ZS11c2VyLWRhdGEpCiAgKGxldCAoKHRlbXBsYXRlIChyZWFkLWludGVybmFsLXRleHQtZmlsZSAicm9vdC9mcm9ua2Vuc3RlZW5fdGVtcGxhdGUuaHRtbCIpKSkKICAgIChsZXQgKCh0ZW1wbGF0ZS1saW5lcyAodmVjdG9yLT5saXN0IChzdHItc3BsaXQgdGVtcGxhdGUgIlxuIikpKSkKICAgICAgICAocHJvY2Vzcy10ZW1wbGF0ZS1saW5lcyB0ZW1wbGF0ZS1saW5lcykpKSkKCihkZWZpbmUgKHByb2Nlc3MtdGVtcGxhdGUtbGluZXMgdGVtcGxhdGUtbGluZXMpCiAgKGlmIChlcXY/IHRlbXBsYXRlLWxpbmVzICcoKSkKICAgICAgICAiIgogICAgKGxldCAoKHRlbXBsYXRlLWxpbmUgKHN0ci10cmltIChjYXIgdGVtcGxhdGUtbGluZXMpKSkpCiAgICAgIChjb25kICgoZXF2PyB0ZW1wbGF0ZS1saW5lICIkJCRGSUxFU1lTVEVNJCQkIikgKDw8ICJsZXQgZnJvbmtlbnN0ZWVuX2ZzID0gIiAoZ2V0LWludGVybmFsLWZpbGVzeXN0ZW0tanNvbikgIlxuIiAocHJvY2Vzcy10ZW1wbGF0ZS1saW5lcyAoY2RyIHRlbXBsYXRlLWxpbmVzKSkpKQogICAgICAgICAgKCN0ICg8PCB0ZW1wbGF0ZS1saW5lICJcbiIgKHByb2Nlc3MtdGVtcGxhdGUtbGluZXMgKGNkciB0ZW1wbGF0ZS1saW5lcykpKSkpKSkpCgooZGVmaW5lIChkaXNwbGF5LWxpY2Vuc2VzKQogICh2aWV3LXRydXN0ZWQtbWFya3VwLXRleHQKICAgICg8PAogICAgICAocmVhZC1pbnRlcm5hbC10ZXh0LWZpbGUgInJvb3QvTElDRU5TRS1Gcm9ua2Vuc3RlZW4ubWQiKQogICAgICAocmVhZC1iYWxlLWxpY2Vuc2VzICh2ZWN0b3ItPmxpc3QgKGdldC1iYWxlcykpKSkpKQoKKGRlZmluZSAocmVhZC1iYWxlLWxpY2Vuc2VzIGJhbGVzKQogIChpZiAoZXF2PyBiYWxlcyAnKCkpCiAgICAgICIiCiAgICAgICg8PAogICAgICAgICJcblxuIyMgTGljZW5zZSBmb3IgY29kZSBpbmNsdWRlZCBpbiB0aGUgIiAoY2FyIGJhbGVzKSAiIGJhbGU6XG5cbiIKICAgICAgICAocmVhZC1pbnRlcm5hbC10ZXh0LWZpbGUKICAgICAgICAoPDwgKGNhciBiYWxlcykgIi9MSUNFTlNFLSIgKGNhciBiYWxlcykgIi5tZCIpKQogICAgICAgIChyZWFkLWJhbGUtbGljZW5zZXMgKGNkciBiYWxlcykpKSkpCg==","root/uuid-extensions.js":"Ly8gQml3YVNjaGVtZSBpbnRlcmZhY2UgZm9yIHRoZSBVVUlEIGxpYnJhcnkuCi8vIENvcHlyaWdodCAyMDE5IGJ5IEFudGhvbnkgVy4gSHVyc2guCi8vIE1JVCBMaWNlbnNlLgoKQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYygidXVpZCIgLDAsIDAsIGZ1bmN0aW9uKGFyKXsKICAvLyBSZXR1cm5zIGEgdjQgdXVpZAogIHJldHVybiB1dWlkKCk7Cn0pCgpCaXdhU2NoZW1lLmRlZmluZV9saWJmdW5jKCJuby1kYXNoLXV1aWQiICwwLCAwLCBmdW5jdGlvbihhcil7CiAgLy8gUmV0dXJucyBhIHY0IHV1aWQgd2l0aCBubyBkYXNoZXMgaW4gaXQuCiAgcmV0dXJuIHV1aWQoKS5yZXBsYWNlKC9cLS9nLCIiKTsKfSkK","root/uuid.js":"","root/$$BALE-VERSION$$":"0.1","root/$$VERSION$$":"0.0","root/$$MANDATORY$$":true,"root/$$LOAD_BALE$$":true,"root/$$FILEMANIFEST$$":["root/LICENSE-root.md","root/LICENSE-Fronkensteen.md","root/root.css","root/stubs.scm","root/fronkensteenlogo.png","root/third-party-libs/jquery-3.4.1.min.js","root/third-party-libs/underscore-min.js","root/third-party-libs/underscore.string.min.js","root/biwascheme/version.js","root/biwascheme/header.js","root/biwascheme/system/class.js","root/biwascheme/system/_writer.js","root/biwascheme/system/_types.js","root/biwascheme/system/error.js","root/biwascheme/system/set.js","root/biwascheme/system/values.js","root/biwascheme/system/pair.js","root/biwascheme/system/symbol.js","root/biwascheme/system/char.js","root/biwascheme/system/number.js","root/biwascheme/system/port.js","root/biwascheme/system/record.js","root/biwascheme/system/enumeration.js","root/biwascheme/system/hashtable.js","root/biwascheme/system/syntax.js","root/biwascheme/system/parser.js","root/biwascheme/system/compiler.js","root/biwascheme/system/pause.js","root/biwascheme/system/call.js","root/biwascheme/system/interpreter.js","root/biwascheme/system/promise.js","root/biwascheme/library/infra.js","root/biwascheme/library/r6rs_lib.js","root/biwascheme/library/js_interface.js","root/biwascheme/library/extra_lib.js","root/biwascheme/library/node_functions.js","root/biwascheme/library/srfi.js","root/biwascheme/library/webscheme_lib.js","root/biwascheme/platforms/browser/dumper.js","root/biwascheme/platforms/browser/console.js","root/biwascheme/platforms/browser/release_initializer.js","root/system-extensions.js","root/fronkensteen_template.html","root/root-utilities.scm","root/uuid-extensions.js","root/uuid.js","root/$$BALE-VERSION$$","root/$$VERSION$$","root/$$MANDATORY$$","root/$$LOAD_BALE$$"]}