{"version":"0.1beta","5-string/LICENSE-string.md":{"timestamp":1603739748285,"data":"YHN0cmluZy11dGlsaXRpZXMuc2NtYCBhbmQgYHN0cmluZy1leHRlbnNpb25zLmpzYCBhcmUgY29weXJpZ2h0IDIwMTgtMjAyMCBieSBBbnRob255IFcuIEh1cnNoLCBhbmQgYXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgc2FtZSBNSVQgbGljZW5zZSBhcyBGcm9ua2Vuc3RlZW4gYXMgYSB3aG9sZS4KClRoZSBjb2RlIGluIGBuYXR1cmFsLXNvcnQuanNgIGlzIENvcHlyaWdodCDCqSAyMDE04oCTMjAxNiBTdHVkaW8gQjEyIGFuZCBpcyB1c2VkIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgZm9sbG93aW5nIGxpY2Vuc2U6CgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgoKVGhlIGNvZGUgaW4gYGJhc2UzMi5qc2AgaXMgY29weXJpZ2h0IDIwMTEgYnkgSXNhYWMgV29sa2Vyc3RvcmZlciBhbmQgaXMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBmb2xsb3dpbmcgbGljZW5zZToKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCgpUaGUgY29kZSBpbiBgcGFwYXBhcnNlLm1pbi5qc2AgaXMgY29weXJpZ2h0IDIwMTUgYnkgTWF0dGhldyBIb2x0IGFuZCBpcyBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIGZvbGxvd2luZyBsaWNlbnNlOgoKVGhlIE1JVCBMaWNlbnNlIChNSVQpCgpDb3B5cmlnaHQgKGMpIDIwMTUgTWF0dGhldyBIb2x0CgpQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mCnRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlICJTb2Z0d2FyZSIpLCB0byBkZWFsIGluCnRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8KdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YKdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLApzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczoKClRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbApjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEICJBUyBJUyIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1IKSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MKRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SCkNPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUgpJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTgpDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLgo="},"5-string/base32.js":{"timestamp":1603739748285,"data":"OyhmdW5jdGlvbigpewoKLy8gVGhpcyB3b3VsZCBiZSB0aGUgcGxhY2UgdG8gZWRpdCBpZiB5b3Ugd2FudCBhIGRpZmZlcmVudAovLyBCYXNlMzIgaW1wbGVtZW50YXRpb24KCnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5YWJjZGVmZ2hqa21ucHFydHV2d3h5eicKdmFyIGFsaWFzID0geyBvOjAsIGk6MSwgbDoxLCBzOjUgfQoKLyoqCiAqIEJ1aWxkIGEgbG9va3VwIHRhYmxlIGFuZCBtZW1vaXplIGl0CiAqCiAqIFJldHVybiBhbiBvYmplY3QgdGhhdCBtYXBzIGEgY2hhcmFjdGVyIHRvIGl0cwogKiBieXRlIHZhbHVlLgogKi8KCnZhciBsb29rdXAgPSBmdW5jdGlvbigpIHsKICAgIHZhciB0YWJsZSA9IHt9CiAgICAvLyBJbnZlcnQgJ2FscGhhYmV0JwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbHBoYWJldC5sZW5ndGg7IGkrKykgewogICAgICAgIHRhYmxlW2FscGhhYmV0W2ldXSA9IGkKICAgIH0KICAgIC8vIFNwbGljZSBpbiAnYWxpYXMnCiAgICBmb3IgKHZhciBrZXkgaW4gYWxpYXMpIHsKICAgICAgICBpZiAoIWFsaWFzLmhhc093blByb3BlcnR5KGtleSkpIGNvbnRpbnVlCiAgICAgICAgdGFibGVba2V5XSA9IHRhYmxlWycnICsgYWxpYXNba2V5XV0KICAgIH0KICAgIGxvb2t1cCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGFibGUgfQogICAgcmV0dXJuIHRhYmxlCn0KCi8qKgogKiBBIHN0cmVhbWluZyBlbmNvZGVyCiAqCiAqICAgICB2YXIgZW5jb2RlciA9IG5ldyBiYXNlMzIuRW5jb2RlcigpCiAqICAgICB2YXIgb3V0cHV0MSA9IGVuY29kZXIudXBkYXRlKGlucHV0MSkKICogICAgIHZhciBvdXRwdXQyID0gZW5jb2Rlci51cGRhdGUoaW5wdXQyKQogKiAgICAgdmFyIGxhc3RvdXRwdXQgPSBlbmNvZGUudXBkYXRlKGxhc3RpbnB1dCwgdHJ1ZSkKICovCgpmdW5jdGlvbiBFbmNvZGVyKCkgewogICAgdmFyIHNraXAgPSAwIC8vIGhvdyBtYW55IGJpdHMgd2Ugd2lsbCBza2lwIGZyb20gdGhlIGZpcnN0IGJ5dGUKICAgIHZhciBiaXRzID0gMCAvLyA1IGhpZ2ggYml0cywgY2FycnkgZnJvbSBvbmUgYnl0ZSB0byB0aGUgbmV4dAoKICAgIHRoaXMub3V0cHV0ID0gJycKCiAgICAvLyBSZWFkIG9uZSBieXRlIG9mIGlucHV0CiAgICAvLyBTaG91bGQgbm90IHJlYWxseSBiZSB1c2VkIGV4Y2VwdCBieSAidXBkYXRlIgogICAgdGhpcy5yZWFkQnl0ZSA9IGZ1bmN0aW9uKGJ5dGUpIHsKICAgICAgICAvLyBjb2VyY2UgdGhlIGJ5dGUgdG8gYW4gaW50CiAgICAgICAgaWYgKHR5cGVvZiBieXRlID09ICdzdHJpbmcnKSBieXRlID0gYnl0ZS5jaGFyQ29kZUF0KDApCgogICAgICAgIGlmIChza2lwIDwgMCkgeyAvLyB3ZSBoYXZlIGEgY2FycnkgZnJvbSB0aGUgcHJldmlvdXMgYnl0ZQogICAgICAgICAgICBiaXRzIHw9IChieXRlID4+ICgtc2tpcCkpCiAgICAgICAgfSBlbHNlIHsgLy8gbm8gY2FycnkKICAgICAgICAgICAgYml0cyA9IChieXRlIDw8IHNraXApICYgMjQ4CiAgICAgICAgfQoKICAgICAgICBpZiAoc2tpcCA+IDMpIHsKICAgICAgICAgICAgLy8gbm90IGVub3VnaCBkYXRhIHRvIHByb2R1Y2UgYSBjaGFyYWN0ZXIsIGdldCB1cyBhbm90aGVyIG9uZQogICAgICAgICAgICBza2lwIC09IDgKICAgICAgICAgICAgcmV0dXJuIDEKICAgICAgICB9CgogICAgICAgIGlmIChza2lwIDwgNCkgewogICAgICAgICAgICAvLyBwcm9kdWNlIGEgY2hhcmFjdGVyCiAgICAgICAgICAgIHRoaXMub3V0cHV0ICs9IGFscGhhYmV0W2JpdHMgPj4gM10KICAgICAgICAgICAgc2tpcCArPSA1CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gMAogICAgfQoKICAgIC8vIEZsdXNoIGFueSByZW1haW5pbmcgYml0cyBsZWZ0IGluIHRoZSBzdHJlYW0KICAgIHRoaXMuZmluaXNoID0gZnVuY3Rpb24oY2hlY2spIHsKICAgICAgICB2YXIgb3V0cHV0ID0gdGhpcy5vdXRwdXQgKyAoc2tpcCA8IDAgPyBhbHBoYWJldFtiaXRzID4+IDNdIDogJycpICsgKGNoZWNrID8gJyQnIDogJycpCiAgICAgICAgdGhpcy5vdXRwdXQgPSAnJwogICAgICAgIHJldHVybiBvdXRwdXQKICAgIH0KfQoKLyoqCiAqIFByb2Nlc3MgYWRkaXRpb25hbCBpbnB1dAogKgogKiBpbnB1dDogc3RyaW5nIG9mIGJ5dGVzIHRvIGNvbnZlcnQKICogZmx1c2g6IGJvb2xlYW4sIHNob3VsZCB3ZSBmbHVzaCBhbnkgdHJhaWxpbmcgYml0cyBsZWZ0CiAqICAgICAgICBpbiB0aGUgc3RyZWFtCiAqIHJldHVybnM6IGEgc3RyaW5nIG9mIGNoYXJhY3RlcnMgcmVwcmVzZW50aW5nICdpbnB1dCcgaW4gYmFzZTMyCiAqLwoKRW5jb2Rlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oaW5wdXQsIGZsdXNoKSB7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgKSB7CiAgICAgICAgaSArPSB0aGlzLnJlYWRCeXRlKGlucHV0W2ldKQogICAgfQogICAgLy8gY29uc3VtZSBhbGwgb3V0cHV0CiAgICB2YXIgb3V0cHV0ID0gdGhpcy5vdXRwdXQKICAgIHRoaXMub3V0cHV0ID0gJycKICAgIGlmIChmbHVzaCkgewogICAgICBvdXRwdXQgKz0gdGhpcy5maW5pc2goKQogICAgfQogICAgcmV0dXJuIG91dHB1dAp9CgovLyBGdW5jdGlvbnMgYW5hbG9nb3VzbHkgdG8gRW5jb2RlcgoKZnVuY3Rpb24gRGVjb2RlcigpIHsKICAgIHZhciBza2lwID0gMCAvLyBob3cgbWFueSBiaXRzIHdlIGhhdmUgZnJvbSB0aGUgcHJldmlvdXMgY2hhcmFjdGVyCiAgICB2YXIgYnl0ZSA9IDAgLy8gY3VycmVudCBieXRlIHdlJ3JlIHByb2R1Y2luZwoKICAgIHRoaXMub3V0cHV0ID0gJycKCiAgICAvLyBDb25zdW1lIGEgY2hhcmFjdGVyIGZyb20gdGhlIHN0cmVhbSwgc3RvcmUKICAgIC8vIHRoZSBvdXRwdXQgaW4gdGhpcy5vdXRwdXQuIEFzIGJlZm9yZSwgYmV0dGVyCiAgICAvLyB0byB1c2UgdXBkYXRlKCkuCiAgICB0aGlzLnJlYWRDaGFyID0gZnVuY3Rpb24oY2hhcikgewogICAgICAgIGlmICh0eXBlb2YgY2hhciAhPSAnc3RyaW5nJyl7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY2hhciA9PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgY2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY2hhcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBjaGFyID0gY2hhci50b0xvd2VyQ2FzZSgpCiAgICAgICAgdmFyIHZhbCA9IGxvb2t1cCgpW2NoYXJdCiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgLy8gY2hhcmFjdGVyIGRvZXMgbm90IGV4aXN0IGluIG91ciBsb29rdXAgdGFibGUKICAgICAgICAgICAgcmV0dXJuIC8vIHNraXAgc2lsZW50bHkuIEFuIGFsdGVybmF0aXZlIHdvdWxkIGJlOgogICAgICAgICAgICAvLyB0aHJvdyBFcnJvcignQ291bGQgbm90IGZpbmQgY2hhcmFjdGVyICInICsgY2hhciArICciIGluIGxvb2t1cCB0YWJsZS4nKQogICAgICAgIH0KICAgICAgICB2YWwgPDw9IDMgLy8gbW92ZSB0byB0aGUgaGlnaCBiaXRzCiAgICAgICAgYnl0ZSB8PSB2YWwgPj4+IHNraXAKICAgICAgICBza2lwICs9IDUKICAgICAgICBpZiAoc2tpcCA+PSA4KSB7CiAgICAgICAgICAgIC8vIHdlIGhhdmUgZW5vdWdoIHRvIHByZWR1Y2Ugb3V0cHV0CiAgICAgICAgICAgIHRoaXMub3V0cHV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZSkKICAgICAgICAgICAgc2tpcCAtPSA4CiAgICAgICAgICAgIGlmIChza2lwID4gMCkgYnl0ZSA9ICh2YWwgPDwgKDUgLSBza2lwKSkgJiAyNTUKICAgICAgICAgICAgZWxzZSBieXRlID0gMAogICAgICAgIH0KCiAgICB9CgogICAgdGhpcy5maW5pc2ggPSBmdW5jdGlvbihjaGVjaykgewogICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLm91dHB1dCArIChza2lwIDwgMCA/IGFscGhhYmV0W2JpdHMgPj4gM10gOiAnJykgKyAoY2hlY2sgPyAnJCcgOiAnJykKICAgICAgICB0aGlzLm91dHB1dCA9ICcnCiAgICAgICAgcmV0dXJuIG91dHB1dAogICAgfQp9CgpEZWNvZGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihpbnB1dCwgZmx1c2gpIHsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHsKICAgICAgICB0aGlzLnJlYWRDaGFyKGlucHV0W2ldKQogICAgfQogICAgdmFyIG91dHB1dCA9IHRoaXMub3V0cHV0CiAgICB0aGlzLm91dHB1dCA9ICcnCiAgICBpZiAoZmx1c2gpIHsKICAgICAgb3V0cHV0ICs9IHRoaXMuZmluaXNoKCkKICAgIH0KICAgIHJldHVybiBvdXRwdXQKfQoKLyoqIENvbnZlbmllbmNlIGZ1bmN0aW9ucwogKgogKiBUaGVzZSBhcmUgdGhlIG9uZXMgdG8gdXNlIGlmIHlvdSBqdXN0IGhhdmUgYSBzdHJpbmcgYW5kCiAqIHdhbnQgdG8gY29udmVydCBpdCB3aXRob3V0IGRlYWxpbmcgd2l0aCBzdHJlYW1zIGFuZCB3aGF0bm90LgogKi8KCi8vIFN0cmluZyBvZiBkYXRhIGdvZXMgaW4sIEJhc2UzMi1lbmNvZGVkIHN0cmluZyBjb21lcyBvdXQuCmZ1bmN0aW9uIGVuY29kZShpbnB1dCkgewogIHZhciBlbmNvZGVyID0gbmV3IEVuY29kZXIoKQogIHZhciBvdXRwdXQgPSBlbmNvZGVyLnVwZGF0ZShpbnB1dCwgdHJ1ZSkKICByZXR1cm4gb3V0cHV0Cn0KCi8vIEJhc2UzMi1lbmNvZGVkIHN0cmluZyBnb2VzIGluLCBkZWNvZGVkIGRhdGEgY29tZXMgb3V0LgpmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHsKICAgIHZhciBkZWNvZGVyID0gbmV3IERlY29kZXIoKQogICAgdmFyIG91dHB1dCA9IGRlY29kZXIudXBkYXRlKGlucHV0LCB0cnVlKQogICAgcmV0dXJuIG91dHB1dAp9CgoKdmFyIGJhc2UzMiA9IHsKICAgIERlY29kZXI6IERlY29kZXIsCiAgICBFbmNvZGVyOiBFbmNvZGVyLAogICAgZW5jb2RlOiBlbmNvZGUsCiAgICBkZWNvZGU6IGRlY29kZQp9CgppZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAvLyB3ZSdyZSBpbiBhIGJyb3dzZXIgLSBPTUchCiAgd2luZG93LmJhc2UzMiA9IGJhc2UzMgp9CgppZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAvLyBub2RlanMvYnJvd3NlcmlmeQogIG1vZHVsZS5leHBvcnRzID0gYmFzZTMyCn0KfSkoKTsK"},"5-string/csv.js":{"timestamp":1603739748285,"data":""},"5-string/natural-sort.js":{"timestamp":1603739748286,"data":"LyohCiAqIG5hdHVyYWwtc29ydC5qcwogKiA9PT09PT09PT09PT09PT0KICogU29ydGluZyB3aXRoIHN1cHBvcnQgZm9yIG51bWJlcnMsIGRhdGVzLCB1bmljb2RlIGFuZCBtb3JlLgogKgogKiBodHRwOi8vZ2l0aHViLmNvbS9zdHVkaW8tYjEyL25hdHVyYWwtc29ydAogKiBNSVQgTGljZW5zZSwgwqkgU3R1ZGlvIEIxMiBHbWJIIDIwMTQKICoKICovLyoKICoKICogSWRlYSBieSBEYXZlIEtvZWxsZQogKiBPcmlnaW5hbCBpbXBsZW1lbnRhdGlvbiBieSBKaW0gUGFsbWVyCiAqIE1vZGlmaWVkIGJ5IFRvbWVrIFdpc3puaWV3c2tpCiAqCiAqLwoKdmFyIG5hdHVyYWxTb3J0ID0gZnVuY3Rpb24gbmF0dXJhbFNvcnQgKG9wdGlvbnMpIHsgJ3VzZSBzdHJpY3QnOwogIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9OwoKICByZXR1cm4gZnVuY3Rpb24oYSwgYikgewogICAgdmFyIEVRVUFMID0gMDsKICAgIHZhciBHUkVBVEVSID0gKG9wdGlvbnMuZGlyZWN0aW9uID09ICdkZXNjJyA/CiAgICAgIC0xIDoKICAgICAgMQogICAgKTsKICAgIHZhciBTTUFMTEVSID0gLUdSRUFURVI7CgogICAgdmFyIHJlID0gLyheLT9bMC05XSsoXC4/WzAtOV0qKVtkZl0/ZT9bMC05XT8kfF4weFswLTlhLWZdKyR8WzAtOV0rKS9naTsKICAgIHZhciBzcmUgPSAvKF5bIF0qfFsgXSokKS9nOwogICAgdmFyIGRyZSA9IC8oXihbXHcgXSssP1tcdyBdKyk/W1x3IF0rLD9bXHcgXStcZCs6XGQrKDpcZCspP1tcdyBdP3xeXGR7MSw0fVtcL1wtXVxkezEsNH1bXC9cLV1cZHsxLDR9fF5cdyssIFx3KyBcZCssIFxkezR9KS87CiAgICB2YXIgaHJlID0gL14weFswLTlhLWZdKyQvaTsKICAgIHZhciBvcmUgPSAvXjAvOwoKICAgIHZhciBub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUgKHZhbHVlKSB7CiAgICAgIHZhciBzdHJpbmcgPSAnJyArIHZhbHVlOwogICAgICByZXR1cm4gKG9wdGlvbnMuY2FzZVNlbnNpdGl2ZSA/CiAgICAgICAgc3RyaW5nIDoKICAgICAgICBzdHJpbmcudG9Mb3dlckNhc2UoKQogICAgICApOwogICAgfTsKCiAgICAvLyBOb3JtYWxpemUgdmFsdWVzIHRvIHN0cmluZ3MKICAgIHZhciB4ID0gbm9ybWFsaXplKGEpLnJlcGxhY2Uoc3JlLCAnJykgfHwgJyc7CiAgICB2YXIgeSA9IG5vcm1hbGl6ZShiKS5yZXBsYWNlKHNyZSwgJycpIHx8ICcnOwoKICAgIC8vIGNodW5rL3Rva2VuaXplCiAgICB2YXIgeE4gPSB4LnJlcGxhY2UocmUsICdcMCQxXDAnKS5yZXBsYWNlKC9cMCQvLCcnKS5yZXBsYWNlKC9eXDAvLCcnKS5zcGxpdCgnXDAnKTsKICAgIHZhciB5TiA9IHkucmVwbGFjZShyZSwgJ1wwJDFcMCcpLnJlcGxhY2UoL1wwJC8sJycpLnJlcGxhY2UoL15cMC8sJycpLnNwbGl0KCdcMCcpOwoKICAgIC8vIFJldHVybiBpbW1lZGlhdGVseSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHZhbHVlcyBpcyBlbXB0eS4KICAgIGlmICgheCAmJiAheSkgcmV0dXJuIEVRVUFMOwogICAgaWYgKCF4ICYmICB5KSByZXR1cm4gR1JFQVRFUjsKICAgIGlmICggeCAmJiAheSkgcmV0dXJuIFNNQUxMRVI7CgogICAgLy8gbnVtZXJpYywgaGV4IG9yIGRhdGUgZGV0ZWN0aW9uCiAgICB2YXIgeEQgPSBwYXJzZUludCh4Lm1hdGNoKGhyZSkpIHx8ICh4Ti5sZW5ndGggIT0gMSAmJiB4Lm1hdGNoKGRyZSkgJiYgRGF0ZS5wYXJzZSh4KSk7CiAgICB2YXIgeUQgPSBwYXJzZUludCh5Lm1hdGNoKGhyZSkpIHx8IHhEICYmIHkubWF0Y2goZHJlKSAmJiBEYXRlLnBhcnNlKHkpIHx8IG51bGw7CiAgICB2YXIgb0Z4TmNMLCBvRnlOY0w7CgogICAgLy8gZmlyc3QgdHJ5IGFuZCBzb3J0IEhleCBjb2RlcyBvciBEYXRlcwogICAgaWYgKHlEKSB7CiAgICAgIGlmICggeEQgPCB5RCApIHJldHVybiBTTUFMTEVSOwogICAgICBlbHNlIGlmICggeEQgPiB5RCApIHJldHVybiBHUkVBVEVSOwogICAgfQoKICAgIC8vIG5hdHVyYWwgc29ydGluZyB0aHJvdWdoIHNwbGl0IG51bWVyaWMgc3RyaW5ncyBhbmQgZGVmYXVsdCBzdHJpbmdzCiAgICBmb3IgKHZhciBjTG9jPTAsIG51bVM9TWF0aC5tYXgoeE4ubGVuZ3RoLCB5Ti5sZW5ndGgpOyBjTG9jIDwgbnVtUzsgY0xvYysrKSB7CgogICAgICAvLyBmaW5kIGZsb2F0cyBub3Qgc3RhcnRpbmcgd2l0aCAnMCcsIHN0cmluZyBvciAwIGlmIG5vdCBkZWZpbmVkIChDbGludCBQcmllc3QpCiAgICAgIG9GeE5jTCA9ICEoeE5bY0xvY10gfHwgJycpLm1hdGNoKG9yZSkgJiYgcGFyc2VGbG9hdCh4TltjTG9jXSkgfHwgeE5bY0xvY10gfHwgMDsKICAgICAgb0Z5TmNMID0gISh5TltjTG9jXSB8fCAnJykubWF0Y2gob3JlKSAmJiBwYXJzZUZsb2F0KHlOW2NMb2NdKSB8fCB5TltjTG9jXSB8fCAwOwoKICAgICAgLy8gaGFuZGxlIG51bWVyaWMgdnMgc3RyaW5nIGNvbXBhcmlzb24gLSBudW1iZXIgPCBzdHJpbmcgLSAoS3lsZSBBZGFtcykKICAgICAgaWYgKGlzTmFOKG9GeE5jTCkgIT09IGlzTmFOKG9GeU5jTCkpIHJldHVybiAoaXNOYU4ob0Z4TmNMKSkgPyBHUkVBVEVSIDogU01BTExFUjsKCiAgICAgIC8vIHJlbHkgb24gc3RyaW5nIGNvbXBhcmlzb24gaWYgZGlmZmVyZW50IHR5cGVzIC0gaS5lLiAnMDInIDwgMiAhPSAnMDInIDwgJzInCiAgICAgIGVsc2UgaWYgKHR5cGVvZiBvRnhOY0wgIT09IHR5cGVvZiBvRnlOY0wpIHsKICAgICAgICBvRnhOY0wgKz0gJyc7CiAgICAgICAgb0Z5TmNMICs9ICcnOwogICAgICB9CgogICAgICBpZiAob0Z4TmNMIDwgb0Z5TmNMKSByZXR1cm4gU01BTExFUjsKICAgICAgaWYgKG9GeE5jTCA+IG9GeU5jTCkgcmV0dXJuIEdSRUFURVI7CiAgICB9CgogICAgcmV0dXJuIEVRVUFMOwogIH07Cn07CgooZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHsKICBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7CiAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTsKICB9IGVsc2UgewogICAgcm9vdC5uYXR1cmFsU29ydCA9IGZhY3RvcnkoKTsKICB9Cn0odGhpcywgZnVuY3Rpb24gKCkgewoKICByZXR1cm4gbmF0dXJhbFNvcnQ7Cgp9KSk7CgoKQml3YVNjaGVtZS5kZWZpbmVfbGliZnVuYygibmF0dXJhbC1zb3J0IiwzLDMsIGZ1bmN0aW9uKGFyLGludHApewogIEJpd2FTY2hlbWUuYXNzZXJ0X3ZlY3RvcihhclswXSk7CiAgcmV0dXJuIGFyWzBdLnNvcnQobmF0dXJhbFNvcnQoeyJkaXJlY3Rpb24iOmFyWzFdLCJjYXNlU2Vuc2l0aXZlIjphclsyXX0pKTsKfSk7Cg=="},"5-string/papaparse.min.js":{"timestamp":1603739748286,"data":""},"5-string/string-extensions.js":{"timestamp":1603739748287,"data":""},"5-string/string-utilities.scm":{"timestamp":1603739748287,"data":"OyBzdHJpbmctdXRpbGl0aWVzLnNjbQo7IENvcHlyaWdodCAyMDE4LTIwMjAgYnkgQW50aG9ueSBXLiBIdXJzaAo7IE1JVCBsaWNlbnNlLgoKCjsgUHJvY2VkdXJlcyBmb3IgZ2VuZXJhdGluZyBNb2Rlcm4gTGFuZ3VhZ2UgQXNzb2NpYXRpb24gKE1MQSkgb3V0bGluZSBoZWFkaW5ncy4KCgooZGVmaW5lIG1sYS1sZXZlbC1jb3VudGVyIChtYWtlLXZlY3RvciA3IDApKSA7IEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IGhlYWRpbmcgY291bnRlcnMgZm9yIGVhY2ggbGV2ZWwuCgooZGVmaW5lIChyZXNldC1tbGEtbGV2ZWwtY291bnRlcikgOyBSZXNldHMgdGhlIG51bWJlcmluZyBsZXZlbCBmb3IgYW4gTUxBIG91dGxpbmUuCiAgKHNldCEgbWxhLWxldmVsLWNvdW50ZXIgKG1ha2UtdmVjdG9yIDcgMCkpKQoKCihkZWZpbmUgKHJlc2V0LWxvd2VyLWxldmVscyBjdXJyZW50KSA7IFJlc2V0cyBhbGwgbGV2ZWxzIGJlbG93IHRoZSBjdXJyZW50IGxldmVsIGZvciBhbiBNTEEgb3V0bGluZS4KICAoaWYgKGVxdj8gY3VycmVudCAodmVjdG9yLWxlbmd0aCBtbGEtbGV2ZWwtY291bnRlcikpCiAgICAjdAogICAgKGJlZ2luCiAgICAgICh2ZWN0b3Itc2V0ISBtbGEtbGV2ZWwtY291bnRlciBjdXJyZW50IDApCiAgICAgIChyZXNldC1sb3dlci1sZXZlbHMgKCsgY3VycmVudCAxKSkpKSkKCihkZWZpbmUgKG1sYS1oZWFkaW5nLXN0cmluZyBsZXZlbCBpcy12aXNpYmxlPykgOyBFdmFsdWF0ZXMgdG8gdGhlIGNvcnJlY3QgTUxBIG91dGxpbmUgbnVtYmVyIGZvciB0aGUgZ2l2ZW4gbGV2ZWwuIEluY3JlbWVudHMgY291bnRzIGFzIHJlcXVpcmVkLgogIChpZiAoZXF2PyBpcy12aXNpYmxlPyAiZmFsc2UiKQogICAgIi0iCiAgICAoYmVnaW4KICAgICAgKHJlc2V0LWxvd2VyLWxldmVscyAoKyBsZXZlbCAxKSkKICAgICAgKGxldCAoKGhlYWRpbmctY291bnQgKCsgMSAodmVjdG9yLXJlZiBtbGEtbGV2ZWwtY291bnRlciBsZXZlbCkpKSkKICAgICAgICAodmVjdG9yLXNldCEgbWxhLWxldmVsLWNvdW50ZXIgbGV2ZWwgaGVhZGluZy1jb3VudCkKICAgICAgICAoY29uZCAoKGVxdj8gbGV2ZWwgMCkgKHN0cmluZy1hcHBlbmQgKGNvbnZlcnQtcm9tYW4gaGVhZGluZy1jb3VudCAjdCkgIi4iKSkKICAgICAgICAgICAgKChlcXY/IGxldmVsIDEpIChzdHJpbmctYXBwZW5kICh1cHBlci1jYXNlLWxldHRlci1lcXVpdmFsZW50IGhlYWRpbmctY291bnQpICIuIikpCiAgICAgICAgICAgICgoZXF2PyBsZXZlbCAyKSAoc3RyaW5nLWFwcGVuZCAobnVtYmVyLT5zdHJpbmcgaGVhZGluZy1jb3VudCkgIi4iKSkKICAgICAgICAgICAgKChlcXY/IGxldmVsIDMpIChzdHJpbmctYXBwZW5kIChsb3dlci1jYXNlLWxldHRlci1lcXVpdmFsZW50IGhlYWRpbmctY291bnQpICIuIikpCiAgICAgICAgICAgICgoZXF2PyBsZXZlbCA0KSAoc3RyaW5nLWFwcGVuZCAoY29udmVydC1yb21hbiBoZWFkaW5nLWNvdW50ICNmKSAiLiIpKQogICAgICAgICAgICAoKGVxdj8gbGV2ZWwgNSkgKHN0cmluZy1hcHBlbmQgIigiIChudW1iZXItPnN0cmluZyBoZWFkaW5nLWNvdW50KSAiKSIpKQogICAgICAgICAgICAoI3QgKHN0cmluZy1hcHBlbmQgIigiIChsb3dlci1jYXNlLWxldHRlci1lcXVpdmFsZW50IGhlYWRpbmctY291bnQpICIpIikpKSkpKSkKCjsgUm9tYW4gbnVtZXJhbHMuCgooZGVmaW5lIChjb252ZXJ0LXJvbWFuIG51bWJlciB1cHBlci1jYXNlKSA7IENvbnZlcnRzIGEgbnVtYmVyIHRvIGEgUm9tYW4gbnVtZXJhbCAoZWl0aGVyIHVwcHBlci0gb3IgbG93ZXItY2FzZSwgYWNjb3JkaW5nIHRvIHRoZSB1cHBlci1jYXNlIHBhcmFtZXRlcikuIFZhbGlkIHVwIHRvIDM5OTkgKE1NTUNNWENJWCkuCiAgIChpZiAoPiBudW1iZXIgMzk5OSkKICAgICAgKDw8ICJjb252ZXJ0LXJvbWFuOiBhcmd1bWVudCBvdXQgb2YgcmFuZ2UgLT4gIiAobnVtYmVyLT5zdHJpbmcgbnVtYmVyKSkKICAgKGNvbnZlcnQtcm9tYW4taGVscGVyIG51bWJlciB1cHBlci1jYXNlIDApKSkKCihkZWZpbmUgcm9tYW4tbnVtZXJhbC1iYW5kcyAjKDEwMDAgOTAwIDUwMCA0MDAgMTAwIDkwIDUwIDQwIDEwIDkgNSA0IDEpKQooZGVmaW5lIHJvbWFuLW51bWVyYWwtc3RyaW5ncy11cHBlciAjKCJNIiAiQ00iICJEIiAiQ0QiICJDIiAiWEMiICJMIiAiWEwiICJYIiAiSVgiICJWIiAiSVYiICJJIikpCihkZWZpbmUgcm9tYW4tbnVtZXJhbC1zdHJpbmdzLWxvd2VyICMoIm0iICJjbSIgImQiICJjZCIgImMiICJ4YyIgImwiICJ4bCIgIngiICJpeCIgInYiICJpdiIgImkiKSkKCgooZGVmaW5lIChjb252ZXJ0LXJvbWFuLWhlbHBlciBudW1iZXIgdXBwZXItY2FzZSBiYW5kKSA7IGhlbHBlciBwcm9jZWR1cmUgZm9yIGNvbnZlcnQtcm9tYW4uIE5vdCBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZGlyZWN0bHkuCiAgKGlmIChlcXY/IG51bWJlciAwKQogICAgICAiIgogICAobGV0ICgoYmFuZC1zdHJpbmcKICAgICAgKGlmIChlcXY/IHVwcGVyLWNhc2UgI3QpCiAgICAgICAgKHZlY3Rvci1yZWYgcm9tYW4tbnVtZXJhbC1zdHJpbmdzLXVwcGVyIGJhbmQpCiAgICAgICAgKHZlY3Rvci1yZWYgcm9tYW4tbnVtZXJhbC1zdHJpbmdzLWxvd2VyIGJhbmQpKSkKICAgICAgICAoYmFuZC1kaXZpc29yICh2ZWN0b3ItcmVmIHJvbWFuLW51bWVyYWwtYmFuZHMgYmFuZCkpKQogICAgKGlmICg+PSBudW1iZXIgYmFuZC1kaXZpc29yKQogICAgICAgIChzdHJpbmctYXBwZW5kIGJhbmQtc3RyaW5nIChjb252ZXJ0LXJvbWFuICgtIG51bWJlciBiYW5kLWRpdmlzb3IpIHVwcGVyLWNhc2UgYmFuZCkpCiAgICAgICAgKGNvbnZlcnQtcm9tYW4taGVscGVyIG51bWJlciB1cHBlci1jYXNlICgrIDEgYmFuZCkpKSkpKQoKKGRlZmluZSAobG93ZXItY2FzZS1sZXR0ZXItZXF1aXZhbGVudCBudW1iZXIpIDsgRXZhbHVhdGVzIHRvIHRoZSBsb3dlci1jYXNlIEVuZ2xpc2ggbGV0dGVyIGVxdWl2YWxlbnQgb2YgYSBudW1iZXIgZnJvbSAxLTI2LgogICAgKGlmIChhbmQgKDw9IG51bWJlciAyNikgKD49IG51bWJlciAxKSkKICAgICAgKHN0cmluZyAoaW50ZWdlci0+Y2hhciAoKyBudW1iZXIgOTYpKSkKICAgICAgImxvd2VyLWNhc2UtbGV0dGVyLWVxdWl2YWxlbnQ6IG51bWJlciBtdXN0IGJlIGJldHdlZW4gMS0yNiBpbmNsdXNpdmUuIikpCgooZGVmaW5lICh1cHBlci1jYXNlLWxldHRlci1lcXVpdmFsZW50IG51bWJlcikgOyBFdmFsdWF0ZXMgdG8gdGhlIHVwcGVyLWNhc2UgRW5nbGlzaCBsZXR0ZXIgZXF1aXZhbGVudCBvZiBhIG51bWJlciBmcm9tIDEtMjYuCiAgKGlmIChhbmQgKDw9IG51bWJlciAyNikgKD49IG51bWJlciAxKSkKICAgIChzdHJpbmcgKGludGVnZXItPmNoYXIgKCsgbnVtYmVyIDY0KSkpCiAgICAidXBwZXItY2FzZS1sZXR0ZXItZXF1aXZhbGVudDogbnVtYmVyIG11c3QgYmUgYmV0d2VlbiAxLTI2IGluY2x1c2l2ZS4iKSkK"}}